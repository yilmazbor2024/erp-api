using Microsoft.EntityFrameworkCore;
using ErpMobile.Api.Entities.ErpModels;

namespace ErpMobile.Api.Data.Context
{
    public abstract class ErpDbContextBase : DbContext
    {
        protected ErpDbContextBase(DbContextOptions options) : base(options)
        {
        }

         // Other Tables
        public DbSet<dfAgentContractProductLevels> dfAgentContractProductLevels { get; set; }
        public DbSet<dfAirportExchangeRateWidgetParameters> dfAirportExchangeRateWidgetParameters { get; set; }
        public DbSet<dfAttTypesForMarketPlaceCategory> dfAttTypesForMarketPlaceCategory { get; set; }
        public DbSet<dfAvailableTaxTypesOnPos> dfAvailableTaxTypesOnPos { get; set; }
        public DbSet<dfBankCreditOfficialForm> dfBankCreditOfficialForm { get; set; }
        public DbSet<dfBankDefATAttribute> dfBankDefATAttribute { get; set; }
        public DbSet<dfBankOfficialForm> dfBankOfficialForm { get; set; }
        public DbSet<dfBankPaymentInstructionOfficialForm> dfBankPaymentInstructionOfficialForm { get; set; }
        public DbSet<dfBankPaymentListOfficialForm> dfBankPaymentListOfficialForm { get; set; }
        public DbSet<dfBankPOSReturnsRule> dfBankPOSReturnsRule { get; set; }
        public DbSet<dfBankPOSReturnsTermRule> dfBankPOSReturnsTermRule { get; set; }
        public DbSet<dfBasefyStore> dfBasefyStore { get; set; }
        public DbSet<dfBulkMailServiceProviderAccount> dfBulkMailServiceProviderAccount { get; set; }
        public DbSet<dfBulutTahsilatVPosCompany> dfBulutTahsilatVPosCompany { get; set; }
        public DbSet<dfBulutTahsilatVPosOffice> dfBulutTahsilatVPosOffice { get; set; }
        public DbSet<dfCarriageExpenseCodes> dfCarriageExpenseCodes { get; set; }
        public DbSet<dfCashDefATAttribute> dfCashDefATAttribute { get; set; }
        public DbSet<dfCashOfficialForm> dfCashOfficialForm { get; set; }
        public DbSet<dfChequeDefATAttribute> dfChequeDefATAttribute { get; set; }
        public DbSet<dfChequeOfficialForm> dfChequeOfficialForm { get; set; }
        public DbSet<dfChippin> dfChippin { get; set; }
        public DbSet<dfChippinPOSTerminal> dfChippinPOSTerminal { get; set; }
        public DbSet<dfCommunicationForm> dfCommunicationForm { get; set; }
        public DbSet<dfCOMOPOSTerminal> dfCOMOPOSTerminal { get; set; }
        public DbSet<dfCOMOProductProperty> dfCOMOProductProperty { get; set; }
        public DbSet<dfCOMOStore> dfCOMOStore { get; set; }
        public DbSet<dfCompanyClosedPeriod> dfCompanyClosedPeriod { get; set; }
        public DbSet<dfCompanyCostOfGoodsSold> dfCompanyCostOfGoodsSold { get; set; }
        public DbSet<dfCompanyCurrAccSize> dfCompanyCurrAccSize { get; set; }
        public DbSet<dfCompanyDeductionDefault> dfCompanyDeductionDefault { get; set; }
        public DbSet<dfCompanyDefault> dfCompanyDefault { get; set; }
        public DbSet<dfCompanyDigitalMarketingServiceAdress> dfCompanyDigitalMarketingServiceAdress { get; set; }
        public DbSet<dfCompanyEarningsDefault> dfCompanyEarningsDefault { get; set; }
        public DbSet<dfCompanyEarningsMonthly> dfCompanyEarningsMonthly { get; set; }
        public DbSet<dfCompanyEmailDefault> dfCompanyEmailDefault { get; set; }
        public DbSet<dfCompanyFolder> dfCompanyFolder { get; set; }
        public DbSet<dfCompanyLockTransaction> dfCompanyLockTransaction { get; set; }
        public DbSet<dfCompanyLoyaltyProgram> dfCompanyLoyaltyProgram { get; set; }
        public DbSet<dfCompanyMarkup> dfCompanyMarkup { get; set; }
        public DbSet<dfCompanyPriceGroup> dfCompanyPriceGroup { get; set; }
        public DbSet<dfCompanyProcessLockTransaction> dfCompanyProcessLockTransaction { get; set; }
        public DbSet<dfConsignmentStore> dfConsignmentStore { get; set; }
        public DbSet<dfConsStoreDistributionWarehouse> dfConsStoreDistributionWarehouse { get; set; }
        public DbSet<dfCreditableConfirmation> dfCreditableConfirmation { get; set; }
        public DbSet<dfCreditCardPaymentDefATAttribute> dfCreditCardPaymentDefATAttribute { get; set; }
        public DbSet<dfCreditCardPaymentOfficialForm> dfCreditCardPaymentOfficialForm { get; set; }
        public DbSet<dfCurrAccProductLotLevels> dfCurrAccProductLotLevels { get; set; }
        public DbSet<dfCustomerOnlinePayment> dfCustomerOnlinePayment { get; set; }
        public DbSet<dfCustomizedDiscountEngineCompany> dfCustomizedDiscountEngineCompany { get; set; }
        public DbSet<dfCustomsCompany> dfCustomsCompany { get; set; }
        public DbSet<dfCustomsStore> dfCustomsStore { get; set; }
        public DbSet<dfDebitOfficialForm> dfDebitOfficialForm { get; set; }
        public DbSet<dfDepartmentReceiptOfficialForm> dfDepartmentReceiptOfficialForm { get; set; }
        public DbSet<dfDMSCompany> dfDMSCompany { get; set; }
        public DbSet<dfDMSPOSTerminal> dfDMSPOSTerminal { get; set; }
        public DbSet<dfDMSStore> dfDMSStore { get; set; }
        public DbSet<dfDomesticPPI> dfDomesticPPI { get; set; }
        public DbSet<dfDufryCompany> dfDufryCompany { get; set; }
        public DbSet<dfDufryStore> dfDufryStore { get; set; }
        public DbSet<dfEArchiveOfficialForm> dfEArchiveOfficialForm { get; set; }
        public DbSet<dfEArchiveWebServiceParameters> dfEArchiveWebServiceParameters { get; set; }
        public DbSet<dfEInvoiceOfficialForm> dfEInvoiceOfficialForm { get; set; }
        public DbSet<dfEInvoiceWebServiceParameters> dfEInvoiceWebServiceParameters { get; set; }
        public DbSet<dfEShipmentOfficialForm> dfEShipmentOfficialForm { get; set; }
        public DbSet<dfEShipmentWebServiceParameters> dfEShipmentWebServiceParameters { get; set; }
        public DbSet<dfExpenseSlipForm> dfExpenseSlipForm { get; set; }
        public DbSet<dffastPayCompany> dffastPayCompany { get; set; }
        public DbSet<dffastPayPosTerminal> dffastPayPosTerminal { get; set; }
        public DbSet<dffastPayStore> dffastPayStore { get; set; }
        public DbSet<dfFixedAssetReassessmentRates> dfFixedAssetReassessmentRates { get; set; }
        public DbSet<dfGetirCarsiCompany> dfGetirCarsiCompany { get; set; }
        public DbSet<dfGetirCarsiOrderCancelReasonConvert> dfGetirCarsiOrderCancelReasonConvert { get; set; }
        public DbSet<dfGetirCarsiStore> dfGetirCarsiStore { get; set; }
        public DbSet<dfGLClosedYear> dfGLClosedYear { get; set; }
        public DbSet<dfGlobalBlueCompany> dfGlobalBlueCompany { get; set; }
        public DbSet<dfGlobalBlueStore> dfGlobalBlueStore { get; set; }
        public DbSet<dfGlobalDataMatrix> dfGlobalDataMatrix { get; set; }
        public DbSet<dfGlobalDefault> dfGlobalDefault { get; set; }
        public DbSet<dfGlobalFolder> dfGlobalFolder { get; set; }
        public DbSet<dfGlobalItemSize> dfGlobalItemSize { get; set; }
        public DbSet<dfGlobalMernisUser> dfGlobalMernisUser { get; set; }
        public DbSet<dfGuidedSalesCustomerParameters> dfGuidedSalesCustomerParameters { get; set; }
        public DbSet<dfGuidedSalesParameters> dfGuidedSalesParameters { get; set; }
        public DbSet<dfGuidedSalesProductParameters> dfGuidedSalesProductParameters { get; set; }
        public DbSet<dfHopiCompany> dfHopiCompany { get; set; }
        public DbSet<dfHopiStore> dfHopiStore { get; set; }
        public DbSet<dfIGACompany> dfIGACompany { get; set; }
        public DbSet<dfIGAPosTerminal> dfIGAPosTerminal { get; set; }
        public DbSet<dfIncomeTaxRelief> dfIncomeTaxRelief { get; set; }
        public DbSet<dfInnerOrderProcessOfficialForm> dfInnerOrderProcessOfficialForm { get; set; }
        public DbSet<dfInnerProcessOfficialForm> dfInnerProcessOfficialForm { get; set; }
        public DbSet<dfInstallmentCountRulesBracket> dfInstallmentCountRulesBracket { get; set; }
        public DbSet<dfInsuaranceExpenseCodes> dfInsuaranceExpenseCodes { get; set; }
        public DbSet<dfItemDimensionNames> dfItemDimensionNames { get; set; }
        public DbSet<dfItemTestOfficialForm> dfItemTestOfficialForm { get; set; }
        public DbSet<dfIyzicoCompany> dfIyzicoCompany { get; set; }
        public DbSet<dfIyzicoCPCompany> dfIyzicoCPCompany { get; set; }
        public DbSet<dfJournalDefATAttribute> dfJournalDefATAttribute { get; set; }
        public DbSet<dfJournalOfficialForm> dfJournalOfficialForm { get; set; }
        public DbSet<dfJoyRefundCompany> dfJoyRefundCompany { get; set; }
        public DbSet<dfJoyRefundStore> dfJoyRefundStore { get; set; }
        public DbSet<dfMacellanSuperappCompany> dfMacellanSuperappCompany { get; set; }
        public DbSet<dfMarketPlaceParameters> dfMarketPlaceParameters { get; set; }
        public DbSet<dfMedulaLogonInfo> dfMedulaLogonInfo { get; set; }
        public DbSet<dfMedulaStoreLogonInfo> dfMedulaStoreLogonInfo { get; set; }
        public DbSet<dfMobilDevCompanyBrandCollectorID> dfMobilDevCompanyBrandCollectorID { get; set; }
        public DbSet<dfMobilDevCompanyThirdPartyCollectorID> dfMobilDevCompanyThirdPartyCollectorID { get; set; }
        public DbSet<dfMobildevStoreCollectorID> dfMobildevStoreCollectorID { get; set; }
        public DbSet<dfMobilDevStoreCompanyBrandCollectorID> dfMobilDevStoreCompanyBrandCollectorID { get; set; }
        public DbSet<dfMobilRevenueUser> dfMobilRevenueUser { get; set; }
        public DbSet<dfMobilRevenueUserSalesPoint> dfMobilRevenueUserSalesPoint { get; set; }
        public DbSet<dfMonthlyTurnoverTarget> dfMonthlyTurnoverTarget { get; set; }
        public DbSet<dfOfficeCreditCardType> dfOfficeCreditCardType { get; set; }
        public DbSet<dfOfficeDefault> dfOfficeDefault { get; set; }
        public DbSet<dfOfficeEArchiveStartDate> dfOfficeEArchiveStartDate { get; set; }
        public DbSet<dfOfficeNotAvailableProcess> dfOfficeNotAvailableProcess { get; set; }
        public DbSet<dfOfflinePosServiceParameters> dfOfflinePosServiceParameters { get; set; }
        public DbSet<dfOfflinePosTerminalParameters> dfOfflinePosTerminalParameters { get; set; }
        public DbSet<dfOnlineBankWebServiceParameters> dfOnlineBankWebServiceParameters { get; set; }
        public DbSet<dfOnlineDistributor> dfOnlineDistributor { get; set; }
        public DbSet<dfOnlineInstallmentPaymentBankAccs> dfOnlineInstallmentPaymentBankAccs { get; set; }
        public DbSet<dfOnlineInstallmentPaymentParameters> dfOnlineInstallmentPaymentParameters { get; set; }
        public DbSet<dfOnlineSalesandPaymentBankAccs> dfOnlineSalesandPaymentBankAccs { get; set; }
        public DbSet<dfOnlineSalesandPaymentParameters> dfOnlineSalesandPaymentParameters { get; set; }
        public DbSet<dfOnlineSalesAndPaymentParametersForConnection> dfOnlineSalesAndPaymentParametersForConnection { get; set; }
        public DbSet<dfOtherPaymentOfficialForm> dfOtherPaymentOfficialForm { get; set; }
        public DbSet<dfOtpServiceCompany> dfOtpServiceCompany { get; set; }
        public DbSet<dfPARO> dfPARO { get; set; }
        public DbSet<dfPAROCompany> dfPAROCompany { get; set; }
        public DbSet<dfPAROPOSTerminal> dfPAROPOSTerminal { get; set; }
        public DbSet<dfPAROProductProperty> dfPAROProductProperty { get; set; }
        public DbSet<dfPAROStore> dfPAROStore { get; set; }
        public DbSet<dfPaxEftPosCompany> dfPaxEftPosCompany { get; set; }
        public DbSet<dfPaymentOfficialForm> dfPaymentOfficialForm { get; set; }
        public DbSet<dfPaynetBankIDConvert> dfPaynetBankIDConvert { get; set; }
        public DbSet<dfPaynetCompany> dfPaynetCompany { get; set; }
        public DbSet<dfPaynetPaymentPlan> dfPaynetPaymentPlan { get; set; }
        public DbSet<dfPaynetStore> dfPaynetStore { get; set; }
        public DbSet<dfPayrollDefault> dfPayrollDefault { get; set; }
        public DbSet<dfPayrollForm> dfPayrollForm { get; set; }
        public DbSet<dfPDCCurrAcc> dfPDCCurrAcc { get; set; }
        public DbSet<dfPDCCurrAccAttribute> dfPDCCurrAccAttribute { get; set; }
        public DbSet<dfPDCCurrAccCommunication> dfPDCCurrAccCommunication { get; set; }
        public DbSet<dfPDCCurrAccContact> dfPDCCurrAccContact { get; set; }
        public DbSet<dfPDCCurrAccPersonalInfo> dfPDCCurrAccPersonalInfo { get; set; }
        public DbSet<dfPDCCurrAccPostalAddress> dfPDCCurrAccPostalAddress { get; set; }
        public DbSet<dfPDCCustomerCompanyBrandAttribute> dfPDCCustomerCompanyBrandAttribute { get; set; }
        public DbSet<dfPDCElements> dfPDCElements { get; set; }
        public DbSet<dfPDCQuery> dfPDCQuery { get; set; }
        public DbSet<dfPeriodicalAllocationRule> dfPeriodicalAllocationRule { get; set; }
        public DbSet<dfPeriodicalSMSRule> dfPeriodicalSMSRule { get; set; }
        public DbSet<dfPeriodicalTransferPlanRule> dfPeriodicalTransferPlanRule { get; set; }
        public DbSet<dfPlanetPaymentCompany> dfPlanetPaymentCompany { get; set; }
        public DbSet<dfPlanetPaymentStore> dfPlanetPaymentStore { get; set; }
        public DbSet<dfPosCustomerScreenLayout> dfPosCustomerScreenLayout { get; set; }
        public DbSet<dfPosCustomerScreenWidgetParameters> dfPosCustomerScreenWidgetParameters { get; set; }
        public DbSet<dfPosDeviceParameters> dfPosDeviceParameters { get; set; }
        public DbSet<dfPosNewCustomer> dfPosNewCustomer { get; set; }
        public DbSet<dfPosNewCustomerActions> dfPosNewCustomerActions { get; set; }
        public DbSet<dfPosNewCustomerField> dfPosNewCustomerField { get; set; }
        public DbSet<dfPosOrderOpticalProductField> dfPosOrderOpticalProductField { get; set; }
        public DbSet<dfPosUI> dfPosUI { get; set; }
        public DbSet<dfPosUIDesc> dfPosUIDesc { get; set; }
        public DbSet<dfPosUISetting> dfPosUISetting { get; set; }
        public DbSet<dfPriceListForm> dfPriceListForm { get; set; }
        public DbSet<dfProcessOfficialForm> dfProcessOfficialForm { get; set; }
        public DbSet<dfProductGroupLevelForOfficeBasedSerialNumberTracking> dfProductGroupLevelForOfficeBasedSerialNumberTracking { get; set; }
        public DbSet<dfProductHierarchy> dfProductHierarchy { get; set; }
        public DbSet<dfProductHierarchyAttribute> dfProductHierarchyAttribute { get; set; }
        public DbSet<dfProductHierarchyColorSet> dfProductHierarchyColorSet { get; set; }
        public DbSet<dfProductHierarchyDefault> dfProductHierarchyDefault { get; set; }
        public DbSet<dfProductHierarchyDimSet> dfProductHierarchyDimSet { get; set; }
        public DbSet<dfProductHierarchyLevelNames> dfProductHierarchyLevelNames { get; set; }
        public DbSet<dfProductsForOfficeBasedSerialNumberTracking> dfProductsForOfficeBasedSerialNumberTracking { get; set; }
        public DbSet<dfProductsForSerialNumberTrackingOnCustomer> dfProductsForSerialNumberTrackingOnCustomer { get; set; }
        public DbSet<dfPurchaseRequisitionOfficialForm> dfPurchaseRequisitionOfficialForm { get; set; }
        public DbSet<dfPurchaseRequisitionProposalOfficialForm> dfPurchaseRequisitionProposalOfficialForm { get; set; }
        public DbSet<dfReSendSMSForCustomerRelationship> dfReSendSMSForCustomerRelationship { get; set; }
        public DbSet<dfRetailCustomerConditionalRequiredFields> dfRetailCustomerConditionalRequiredFields { get; set; }
        public DbSet<dfRomaniaGoosfrabaeInvoiceOffice> dfRomaniaGoosfrabaeInvoiceOffice { get; set; }
        public DbSet<dfRomaniaGoosfrabaeShipmentOffice> dfRomaniaGoosfrabaeShipmentOffice { get; set; }
        public DbSet<dfSeaBoxCompany> dfSeaBoxCompany { get; set; }
        public DbSet<dfSMSForCustomerRelationship> dfSMSForCustomerRelationship { get; set; }
        public DbSet<dfSocialInsuranceRates> dfSocialInsuranceRates { get; set; }
        public DbSet<dfStoreConsStore> dfStoreConsStore { get; set; }
        public DbSet<dfStoreCreditableConfirmation> dfStoreCreditableConfirmation { get; set; }
        public DbSet<dfStoreDefault> dfStoreDefault { get; set; }
        public DbSet<dfStoreDeliveryWarehouse> dfStoreDeliveryWarehouse { get; set; }
        public DbSet<dfStoreDigitalMarketingService> dfStoreDigitalMarketingService { get; set; }
        public DbSet<dfStoreDistributionWarehouse> dfStoreDistributionWarehouse { get; set; }
        public DbSet<dfStoreFolder> dfStoreFolder { get; set; }
        public DbSet<dfStoreForeignCurrency> dfStoreForeignCurrency { get; set; }
        public DbSet<dfStoreHierarchy> dfStoreHierarchy { get; set; }
        public DbSet<dfStoreHierarchyLevelNames> dfStoreHierarchyLevelNames { get; set; }
        public DbSet<dfStoreLabelTypes> dfStoreLabelTypes { get; set; }
        public DbSet<dfStoreProductInformation> dfStoreProductInformation { get; set; }
        public DbSet<dfStoreSupportWarehouse> dfStoreSupportWarehouse { get; set; }
        public DbSet<dfStoreTotalDiscountAuthority> dfStoreTotalDiscountAuthority { get; set; }
        public DbSet<dfStoreTransferStore> dfStoreTransferStore { get; set; }
        public DbSet<dfSupportRequestOfficialForm> dfSupportRequestOfficialForm { get; set; }
        public DbSet<dfSupportRequestProductLevels> dfSupportRequestProductLevels { get; set; }
        public DbSet<dfSupportRequestSurveyDefault> dfSupportRequestSurveyDefault { get; set; }
        public DbSet<dfTaxFreePointCompany> dfTaxFreePointCompany { get; set; }
        public DbSet<dfTaxFreeRefundRate> dfTaxFreeRefundRate { get; set; }
        public DbSet<dfTaxFreeZoneCompany> dfTaxFreeZoneCompany { get; set; }
        public DbSet<dfTaxFreeZoneStore> dfTaxFreeZoneStore { get; set; }
        public DbSet<dfTransactionDefFTAttribute> dfTransactionDefFTAttribute { get; set; }
        public DbSet<dfUmicoPOSTerminal> dfUmicoPOSTerminal { get; set; }
        public DbSet<dfUnifreeCompany> dfUnifreeCompany { get; set; }
        public DbSet<dfUnifreeStore> dfUnifreeStore { get; set; }
        public DbSet<dfUserAllowedOffice> dfUserAllowedOffice { get; set; }
        public DbSet<dfUserAllowedStore> dfUserAllowedStore { get; set; }
        public DbSet<dfUserAllowedWarehouse> dfUserAllowedWarehouse { get; set; }
        public DbSet<dfUserPosition> dfUserPosition { get; set; }
        public DbSet<dfUserPositionHistory> dfUserPositionHistory { get; set; }
        public DbSet<dfUserPosUISettings> dfUserPosUISettings { get; set; }
        public DbSet<dfUTSWebServiceToken> dfUTSWebServiceToken { get; set; }
        public DbSet<dfVehicleLoadingOfficialForm> dfVehicleLoadingOfficialForm { get; set; }
        public DbSet<dfVehicleUnLoadingOfficialForm> dfVehicleUnLoadingOfficialForm { get; set; }
        public DbSet<dfVendorPriceListForm> dfVendorPriceListForm { get; set; }
        public DbSet<dfVirementOfficialForm> dfVirementOfficialForm { get; set; }
        public DbSet<dfWeArePlanetTaxFreeCompany> dfWeArePlanetTaxFreeCompany { get; set; }
        public DbSet<dfWeArePlanetTaxFreeStore> dfWeArePlanetTaxFreeStore { get; set; }

        // Other Tables
        public DbSet<dtSendingData> dtSendingData { get; set; }

        // Other Tables
        public DbSet<e_InboxShipmentBuyerCustomerParty> e_InboxShipmentBuyerCustomerParty { get; set; }
        public DbSet<e_InboxShipmentCarrierParty> e_InboxShipmentCarrierParty { get; set; }
        public DbSet<e_InboxShipmentDeliveryCustomerParty> e_InboxShipmentDeliveryCustomerParty { get; set; }
        public DbSet<e_InboxShipmentDespatchSupplierParty> e_InboxShipmentDespatchSupplierParty { get; set; }
        public DbSet<e_InboxShipmentDrivers> e_InboxShipmentDrivers { get; set; }
        public DbSet<e_InboxShipmentHeader> e_InboxShipmentHeader { get; set; }
        public DbSet<e_InboxShipmentLine> e_InboxShipmentLine { get; set; }
        public DbSet<e_InboxShipmentLineV3Items> e_InboxShipmentLineV3Items { get; set; }
        public DbSet<e_InboxShipmentOriginatorCustomerParty> e_InboxShipmentOriginatorCustomerParty { get; set; }
        public DbSet<e_InboxShipmentResponseDeliveryCustomerParty> e_InboxShipmentResponseDeliveryCustomerParty { get; set; }
        public DbSet<e_InboxShipmentResponseDespatchSupplierParty> e_InboxShipmentResponseDespatchSupplierParty { get; set; }
        public DbSet<e_InboxShipmentResponseHeader> e_InboxShipmentResponseHeader { get; set; }
        public DbSet<e_InboxShipmentResponseLine> e_InboxShipmentResponseLine { get; set; }
        public DbSet<e_InboxShipmentSellerSupplierParty> e_InboxShipmentSellerSupplierParty { get; set; }
        public DbSet<e_InboxShipmentStatus> e_InboxShipmentStatus { get; set; }
        public DbSet<e_InboxShipmentTransportDetails> e_InboxShipmentTransportDetails { get; set; }
        public DbSet<e_LastShipmentAskDate> e_LastShipmentAskDate { get; set; }
        public DbSet<e_OutboxShipmentBuyerCustomerParty> e_OutboxShipmentBuyerCustomerParty { get; set; }
        public DbSet<e_OutboxShipmentCarrierParty> e_OutboxShipmentCarrierParty { get; set; }
        public DbSet<e_OutboxShipmentDeliveryCustomerParty> e_OutboxShipmentDeliveryCustomerParty { get; set; }
        public DbSet<e_OutboxShipmentDespatchSupplierParty> e_OutboxShipmentDespatchSupplierParty { get; set; }
        public DbSet<e_OutboxShipmentDrivers> e_OutboxShipmentDrivers { get; set; }
        public DbSet<e_OutboxShipmentHeader> e_OutboxShipmentHeader { get; set; }
        public DbSet<e_OutboxShipmentLine> e_OutboxShipmentLine { get; set; }
        public DbSet<e_OutboxShipmentOrder> e_OutboxShipmentOrder { get; set; }
        public DbSet<e_OutboxShipmentOriginatorCustomerParty> e_OutboxShipmentOriginatorCustomerParty { get; set; }
        public DbSet<e_OutboxShipmentResponseDeliveryCustomerParty> e_OutboxShipmentResponseDeliveryCustomerParty { get; set; }
        public DbSet<e_OutboxShipmentResponseDespatchSupplierParty> e_OutboxShipmentResponseDespatchSupplierParty { get; set; }
        public DbSet<e_OutboxShipmentResponseHeader> e_OutboxShipmentResponseHeader { get; set; }
        public DbSet<e_OutboxShipmentResponseLine> e_OutboxShipmentResponseLine { get; set; }
        public DbSet<e_OutboxShipmentSellerSupplierParty> e_OutboxShipmentSellerSupplierParty { get; set; }
        public DbSet<e_OutboxShipmentStatus> e_OutboxShipmentStatus { get; set; }
        public DbSet<e_OutboxShipmentTransportDetails> e_OutboxShipmentTransportDetails { get; set; }
        public DbSet<e_OutboxShipmentUBLExtensions> e_OutboxShipmentUBLExtensions { get; set; }
        public DbSet<e_SubjectToEInvoice> e_SubjectToEInvoice { get; set; }
        public DbSet<e_SubjectToEShipment> e_SubjectToEShipment { get; set; }

        // Other Tables
        public DbSet<hrEmployeeAGI> hrEmployeeAGI { get; set; }
        public DbSet<hrEmployeeJobTitle> hrEmployeeJobTitle { get; set; }
        public DbSet<hrEmployeeMonthlySum> hrEmployeeMonthlySum { get; set; }
        public DbSet<hrEmployeeMonthlySumDetail> hrEmployeeMonthlySumDetail { get; set; }
        public DbSet<hrEmployeeOrganizationChart> hrEmployeeOrganizationChart { get; set; }
        public DbSet<hrEmployeePayrollProfile> hrEmployeePayrollProfile { get; set; }
        public DbSet<hrEmployeePrivateInsurance> hrEmployeePrivateInsurance { get; set; }
        public DbSet<hrEmployeeSGKBorrowing> hrEmployeeSGKBorrowing { get; set; }
        public DbSet<hrEmployeeWage> hrEmployeeWage { get; set; }
        public DbSet<hrEmployeeWorkPlace> hrEmployeeWorkPlace { get; set; }
        public DbSet<hrJobInterview> hrJobInterview { get; set; }
        public DbSet<hrJobInterviewResults> hrJobInterviewResults { get; set; }
        public DbSet<hrJobPositionCandidate> hrJobPositionCandidate { get; set; }
        public DbSet<hrJobTitleOrganizationChart> hrJobTitleOrganizationChart { get; set; }
        public DbSet<hrSGKEmployeeJobEndDeclaration> hrSGKEmployeeJobEndDeclaration { get; set; }
        public DbSet<hrSGKEmployeeJobStartDeclaration> hrSGKEmployeeJobStartDeclaration { get; set; }
        public DbSet<hrSGKMonthlyDocument> hrSGKMonthlyDocument { get; set; }
        public DbSet<hrSGKMonthlyDocumentDeclaration> hrSGKMonthlyDocumentDeclaration { get; set; }
        public DbSet<hrTestResult> hrTestResult { get; set; }
        public DbSet<hrWageGarnishment> hrWageGarnishment { get; set; }

        // Other Tables
        public DbSet<lgSMSForCustomerRelationshipNonFormattedCommunications> lgSMSForCustomerRelationshipNonFormattedCommunications { get; set; }
        public DbSet<lgV3OfflinePOSSendStatusLog> lgV3OfflinePOSSendStatusLog { get; set; }

        // Process Tables
        public DbSet<prAllocationResultViewCustomization> prAllocationResultViewCustomization { get; set; }
        public DbSet<prAllocationRuleScript> prAllocationRuleScript { get; set; }
        public DbSet<prAllocationTemplateParameterValue> prAllocationTemplateParameterValue { get; set; }
        public DbSet<prAmountRuleBracket> prAmountRuleBracket { get; set; }
        public DbSet<prAvailableDeclarationPostTypes> prAvailableDeclarationPostTypes { get; set; }
        public DbSet<prBankAdditionalChargeTypeGLAccs> prBankAdditionalChargeTypeGLAccs { get; set; }
        public DbSet<prBankBranch> prBankBranch { get; set; }
        public DbSet<prBankPOSAccounts> prBankPOSAccounts { get; set; }
        public DbSet<prBankPOSGLAccs> prBankPOSGLAccs { get; set; }
        public DbSet<prBankPosID> prBankPosID { get; set; }
        public DbSet<prBankPOSProviderConvert> prBankPOSProviderConvert { get; set; }
        public DbSet<prBOMContent> prBOMContent { get; set; }
        public DbSet<prBOMTemplateAttribute> prBOMTemplateAttribute { get; set; }
        public DbSet<prBOMTemplateContent> prBOMTemplateContent { get; set; }
        public DbSet<prBOMTemplateItemConditionalFilter> prBOMTemplateItemConditionalFilter { get; set; }
        public DbSet<prBOMTemplateItemFilter> prBOMTemplateItemFilter { get; set; }
        public DbSet<prCareWarningTemplateAtt> prCareWarningTemplateAtt { get; set; }
        public DbSet<prChannelTemplateCurrAcc> prChannelTemplateCurrAcc { get; set; }
        public DbSet<prChequeAttribute> prChequeAttribute { get; set; }
        public DbSet<prChequeGLAccs> prChequeGLAccs { get; set; }
        public DbSet<prCityMapLocation> prCityMapLocation { get; set; }
        public DbSet<prColorThemeAttribute> prColorThemeAttribute { get; set; }
        public DbSet<prCompanyCostCenter> prCompanyCostCenter { get; set; }
        public DbSet<prCompanyCreditCardEarnedPoints> prCompanyCreditCardEarnedPoints { get; set; }
        public DbSet<prCompanyCreditCardEmployee> prCompanyCreditCardEmployee { get; set; }
        public DbSet<prCompanyCreditCardExpense> prCompanyCreditCardExpense { get; set; }
        public DbSet<prCompanyCreditCardUsageFee> prCompanyCreditCardUsageFee { get; set; }
        public DbSet<prCompanyExpense> prCompanyExpense { get; set; }
        public DbSet<prCompanyExpenseInvoiceConfirmationRule> prCompanyExpenseInvoiceConfirmationRule { get; set; }
        public DbSet<prCompanyHierarchy> prCompanyHierarchy { get; set; }
        public DbSet<prConfirmationFormCommTypes> prConfirmationFormCommTypes { get; set; }
        public DbSet<prConfirmationFormContent> prConfirmationFormContent { get; set; }
        public DbSet<prConfirmationRequiredProductGroups> prConfirmationRequiredProductGroups { get; set; }
        public DbSet<prConfirmationRuleStep> prConfirmationRuleStep { get; set; }
        public DbSet<prConfirmationRuleStepUser> prConfirmationRuleStepUser { get; set; }
        public DbSet<prConsentSourceConvert> prConsentSourceConvert { get; set; }
        public DbSet<prConvertedJobCandidate> prConvertedJobCandidate { get; set; }
        public DbSet<prConvertedPotentialCustomer> prConvertedPotentialCustomer { get; set; }
        public DbSet<prCostCenterAttribute> prCostCenterAttribute { get; set; }
        public DbSet<prCostCenterCostDriver> prCostCenterCostDriver { get; set; }
        public DbSet<prCostCenterHierarchy> prCostCenterHierarchy { get; set; }
        public DbSet<prCountryCallingCode> prCountryCallingCode { get; set; }
        public DbSet<prCountryPCTApplicablePaymentTypes> prCountryPCTApplicablePaymentTypes { get; set; }
        public DbSet<prCreditCardTypeBIN> prCreditCardTypeBIN { get; set; }
        public DbSet<prCreditCardTypeGLAccs> prCreditCardTypeGLAccs { get; set; }
        public DbSet<prCreditCardValidity> prCreditCardValidity { get; set; }
        public DbSet<prCreditSurveyorResponsibilityArea> prCreditSurveyorResponsibilityArea { get; set; }
        public DbSet<prCurrAccAttribute> prCurrAccAttribute { get; set; }
        public DbSet<prCurrAccAvailableForeignCurrencyTrans> prCurrAccAvailableForeignCurrencyTrans { get; set; }
        public DbSet<prCurrAccBadDebtStatus> prCurrAccBadDebtStatus { get; set; }
        public DbSet<prCurrAccBankAccNo> prCurrAccBankAccNo { get; set; }
        public DbSet<prCurrAccCommunication> prCurrAccCommunication { get; set; }
        public DbSet<prCurrAccCommunicationEnc> prCurrAccCommunicationEnc { get; set; }
        public DbSet<prCurrAccCommunicationFormatted> prCurrAccCommunicationFormatted { get; set; }
        public DbSet<prCurrAccCompanyBrand> prCurrAccCompanyBrand { get; set; }
        public DbSet<prCurrAccContact> prCurrAccContact { get; set; }
        public DbSet<prCurrAccDefault> prCurrAccDefault { get; set; }
        public DbSet<prCurrAccEInvoiceAlias> prCurrAccEInvoiceAlias { get; set; }
        public DbSet<prCurrAccEInvoiceOfficialForm> prCurrAccEInvoiceOfficialForm { get; set; }
        public DbSet<prCurrAccEnc> prCurrAccEnc { get; set; }
        public DbSet<prCurrAccEShipmentAlias> prCurrAccEShipmentAlias { get; set; }
        public DbSet<prCurrAccEShipmentOfficialForm> prCurrAccEShipmentOfficialForm { get; set; }
        public DbSet<prCurrAccExtendedProperties> prCurrAccExtendedProperties { get; set; }
        public DbSet<prCurrAccGLAccount> prCurrAccGLAccount { get; set; }
        public DbSet<prCurrAccInformation> prCurrAccInformation { get; set; }
        public DbSet<prCurrAccListContent> prCurrAccListContent { get; set; }
        public DbSet<prCurrAccLotGrAtt> prCurrAccLotGrAtt { get; set; }
        public DbSet<prCurrAccMapLocation> prCurrAccMapLocation { get; set; }
        public DbSet<prCurrAccNotes> prCurrAccNotes { get; set; }
        public DbSet<prCurrAccOnlineBank> prCurrAccOnlineBank { get; set; }
        public DbSet<prCurrAccOptInOptOutStatus> prCurrAccOptInOptOutStatus { get; set; }
        public DbSet<prCurrAccPersonalDataConfirmation> prCurrAccPersonalDataConfirmation { get; set; }
        public DbSet<prCurrAccPersonalDataConfirmationStatus> prCurrAccPersonalDataConfirmationStatus { get; set; }
        public DbSet<prCurrAccPersonalInfo> prCurrAccPersonalInfo { get; set; }
        public DbSet<prCurrAccPhoto> prCurrAccPhoto { get; set; }
        public DbSet<prCurrAccPostalAddress> prCurrAccPostalAddress { get; set; }
        public DbSet<prCurrAccReconciliationContact> prCurrAccReconciliationContact { get; set; }
        public DbSet<prCurrAccReconciliationContactReports> prCurrAccReconciliationContactReports { get; set; }
        public DbSet<prCurrAccUBLExtensions> prCurrAccUBLExtensions { get; set; }
        public DbSet<prCurrAccUserWarning> prCurrAccUserWarning { get; set; }
        public DbSet<prCurrAccUTSInformation> prCurrAccUTSInformation { get; set; }
        public DbSet<prCustomerCompanyBrandAttribute> prCustomerCompanyBrandAttribute { get; set; }
        public DbSet<prCustomerConversation> prCustomerConversation { get; set; }
        public DbSet<prCustomerConversationSubjectRelatedResult> prCustomerConversationSubjectRelatedResult { get; set; }
        public DbSet<prCustomerCreditLimit> prCustomerCreditLimit { get; set; }
        public DbSet<prCustomerDBSAccount> prCustomerDBSAccount { get; set; }
        public DbSet<prCustomerDiscountGrAtt> prCustomerDiscountGrAtt { get; set; }
        public DbSet<prCustomerLoyaltyProgram> prCustomerLoyaltyProgram { get; set; }
        public DbSet<prCustomerLoyaltyProgramHistory> prCustomerLoyaltyProgramHistory { get; set; }
        public DbSet<prCustomerMarkupGrAtt> prCustomerMarkupGrAtt { get; set; }
        public DbSet<prCustomerOnlinePayment> prCustomerOnlinePayment { get; set; }
        public DbSet<prCustomerOnlinePaymentContact> prCustomerOnlinePaymentContact { get; set; }
        public DbSet<prCustomerPaymentPlanGrAtt> prCustomerPaymentPlanGrAtt { get; set; }
        public DbSet<prCustomerPresentCard> prCustomerPresentCard { get; set; }
        public DbSet<prCustomerSalesperson> prCustomerSalesperson { get; set; }
        public DbSet<prCustomerStore> prCustomerStore { get; set; }
        public DbSet<prCustomerVendorAccount> prCustomerVendorAccount { get; set; }
        public DbSet<prCustomerVerificationPassword> prCustomerVerificationPassword { get; set; }
        public DbSet<prCustomProcessGroupAtt> prCustomProcessGroupAtt { get; set; }
        public DbSet<prDataTransferCompanyParameter> prDataTransferCompanyParameter { get; set; }
        public DbSet<prDataTransferJobClients> prDataTransferJobClients { get; set; }
        public DbSet<prDataTransferJobSchedule> prDataTransferJobSchedule { get; set; }
        public DbSet<prDataTransferTemplateQuery> prDataTransferTemplateQuery { get; set; }
        public DbSet<prDataTransferTemplateQueryFilter> prDataTransferTemplateQueryFilter { get; set; }
        public DbSet<prDBSLimitAkbank> prDBSLimitAkbank { get; set; }
        public DbSet<prDBSLimitAkbankHistory> prDBSLimitAkbankHistory { get; set; }
        public DbSet<prDBSLimitIsBankasi> prDBSLimitIsBankasi { get; set; }
        public DbSet<prDBSLimitIsBankasiHistory> prDBSLimitIsBankasiHistory { get; set; }
        public DbSet<prDBSLimitTEB> prDBSLimitTEB { get; set; }
        public DbSet<prDBSLimitTEBHistory> prDBSLimitTEBHistory { get; set; }
        public DbSet<prDBSLimitYKB> prDBSLimitYKB { get; set; }
        public DbSet<prDBSLimitYKBHistory> prDBSLimitYKBHistory { get; set; }
        public DbSet<prDeclarationGLAccs> prDeclarationGLAccs { get; set; }
        public DbSet<prDeclarationTypeDetail> prDeclarationTypeDetail { get; set; }
        public DbSet<prDeclarationXML> prDeclarationXML { get; set; }
        public DbSet<prDeliveryCompanyMarketPlaceMapping> prDeliveryCompanyMarketPlaceMapping { get; set; }
        public DbSet<prDigitalChannelStockConfiguration> prDigitalChannelStockConfiguration { get; set; }
        public DbSet<prDiscountOfferActiveLog> prDiscountOfferActiveLog { get; set; }
        public DbSet<prDiscountOfferAttribute> prDiscountOfferAttribute { get; set; }
        public DbSet<prDiscountOfferCreditCard> prDiscountOfferCreditCard { get; set; }
        public DbSet<prDiscountOfferCustomer> prDiscountOfferCustomer { get; set; }
        public DbSet<prDiscountOfferDescription> prDiscountOfferDescription { get; set; }
        public DbSet<prDiscountOfferLocation> prDiscountOfferLocation { get; set; }
        public DbSet<prDiscountOfferMethodParameter> prDiscountOfferMethodParameter { get; set; }
        public DbSet<prDiscountOfferMethodScript> prDiscountOfferMethodScript { get; set; }
        public DbSet<prDiscountOfferNotes> prDiscountOfferNotes { get; set; }
        public DbSet<prDiscountOfferParameterValue> prDiscountOfferParameterValue { get; set; }
        public DbSet<prDiscountOfferPassword> prDiscountOfferPassword { get; set; }
        public DbSet<prDiscountOfferPaymentPlan> prDiscountOfferPaymentPlan { get; set; }
        public DbSet<prDiscountOfferPaymentProvider> prDiscountOfferPaymentProvider { get; set; }
        public DbSet<prDiscountOfferProduct> prDiscountOfferProduct { get; set; }
        public DbSet<prDiscountOfferRules> prDiscountOfferRules { get; set; }
        public DbSet<prDiscountOfferTurnoverTarget> prDiscountOfferTurnoverTarget { get; set; }
        public DbSet<prDiscountPoint> prDiscountPoint { get; set; }
        public DbSet<prDiscountPointTypeNotes> prDiscountPointTypeNotes { get; set; }
        public DbSet<prDiscountReasonSubReason> prDiscountReasonSubReason { get; set; }
        public DbSet<prDiscountTypeGLAccs> prDiscountTypeGLAccs { get; set; }
        public DbSet<prDiscountVoucherTypeNotes> prDiscountVoucherTypeNotes { get; set; }
        public DbSet<prDistrictMapLocation> prDistrictMapLocation { get; set; }
        public DbSet<prDOVGLAccs> prDOVGLAccs { get; set; }
        public DbSet<prEArchiveWebServiceCompany> prEArchiveWebServiceCompany { get; set; }
        public DbSet<prEArchiveWebServiceOffice> prEArchiveWebServiceOffice { get; set; }
        public DbSet<prEasyStartupComments> prEasyStartupComments { get; set; }
        public DbSet<prEasyStartupNotes> prEasyStartupNotes { get; set; }
        public DbSet<prEInvoiceWebServiceCompany> prEInvoiceWebServiceCompany { get; set; }
        public DbSet<prEInvoiceWebServiceOffice> prEInvoiceWebServiceOffice { get; set; }
        public DbSet<prEmployee7252Incentive> prEmployee7252Incentive { get; set; }
        public DbSet<prEmployeeDocument> prEmployeeDocument { get; set; }
        public DbSet<prEmployeeEducation> prEmployeeEducation { get; set; }
        public DbSet<prEmployeeForeignLanguage> prEmployeeForeignLanguage { get; set; }
        public DbSet<prEmployeeJobTraining> prEmployeeJobTraining { get; set; }
        public DbSet<prEmployeeLeaveDay> prEmployeeLeaveDay { get; set; }
        public DbSet<prEmployeeLeaveHour> prEmployeeLeaveHour { get; set; }
        public DbSet<prEmployeeLeaveRequest> prEmployeeLeaveRequest { get; set; }
        public DbSet<prEmployeeLeaveRequestHour> prEmployeeLeaveRequestHour { get; set; }
        public DbSet<prEmployeeLeaveTransfered> prEmployeeLeaveTransfered { get; set; }
        public DbSet<prEmployeePrevJob> prEmployeePrevJob { get; set; }
        public DbSet<prEmployeeRecord> prEmployeeRecord { get; set; }
        public DbSet<prEmployeeRemoteWorkDays> prEmployeeRemoteWorkDays { get; set; }
        public DbSet<prEmployeeSeniorityTransfered> prEmployeeSeniorityTransfered { get; set; }
        public DbSet<prEmployeeShoppingLimit> prEmployeeShoppingLimit { get; set; }
        public DbSet<prEmployeeSoftware> prEmployeeSoftware { get; set; }
        public DbSet<prEmployeeWorkplaceInformation> prEmployeeWorkplaceInformation { get; set; }
        public DbSet<prExpenseInvoiceConfirmationRule> prExpenseInvoiceConfirmationRule { get; set; }
        public DbSet<prExportFileAttribute> prExportFileAttribute { get; set; }
        public DbSet<prExportFileIndirectExpense> prExportFileIndirectExpense { get; set; }
        public DbSet<prExportFileInsurance> prExportFileInsurance { get; set; }
        public DbSet<prExportFileShippingInfo> prExportFileShippingInfo { get; set; }
        public DbSet<prExportFileStatusHistory> prExportFileStatusHistory { get; set; }
        public DbSet<prFixedAssetDepreciationInfo> prFixedAssetDepreciationInfo { get; set; }
        public DbSet<prFixedAssetEmployee> prFixedAssetEmployee { get; set; }
        public DbSet<prFixedAssetExpense> prFixedAssetExpense { get; set; }
        public DbSet<prFixedAssetExpenseReassessment> prFixedAssetExpenseReassessment { get; set; }
        public DbSet<prFixedAssetInflationAdjustment> prFixedAssetInflationAdjustment { get; set; }
        public DbSet<prFixedAssetInsurance> prFixedAssetInsurance { get; set; }
        public DbSet<prFixedAssetPurchases> prFixedAssetPurchases { get; set; }
        public DbSet<prFixedAssetReassessmentRates> prFixedAssetReassessmentRates { get; set; }
        public DbSet<prFixedAssetSales> prFixedAssetSales { get; set; }
        public DbSet<prFixedAssetStatusHistory> prFixedAssetStatusHistory { get; set; }
        public DbSet<prGiftCardCharge> prGiftCardCharge { get; set; }
        public DbSet<prGLAccAttribute> prGLAccAttribute { get; set; }
        public DbSet<prGLAccAvailableForeignCurrencyTrans> prGLAccAvailableForeignCurrencyTrans { get; set; }
        public DbSet<prGLAccAvailableJournalTypeSub> prGLAccAvailableJournalTypeSub { get; set; }
        public DbSet<prGLAccNotes> prGLAccNotes { get; set; }
        public DbSet<prGLAccOnlineBank> prGLAccOnlineBank { get; set; }
        public DbSet<prGLAccUserWarning> prGLAccUserWarning { get; set; }
        public DbSet<prGLReflectionAccount> prGLReflectionAccount { get; set; }
        public DbSet<prImportFileAttribute> prImportFileAttribute { get; set; }
        public DbSet<prImportFileExpense> prImportFileExpense { get; set; }
        public DbSet<prImportFileGLAccs> prImportFileGLAccs { get; set; }
        public DbSet<prImportFileIndirectExpense> prImportFileIndirectExpense { get; set; }
        public DbSet<prImportFileInsurance> prImportFileInsurance { get; set; }
        public DbSet<prImportFileShippingInfo> prImportFileShippingInfo { get; set; }
        public DbSet<prImportFileStatusHistory> prImportFileStatusHistory { get; set; }
        public DbSet<prInnerProcessInfo> prInnerProcessInfo { get; set; }
        public DbSet<prInnerProcessITAttribute> prInnerProcessITAttribute { get; set; }
        public DbSet<prInnerProcessItemType> prInnerProcessItemType { get; set; }
        public DbSet<prInsuranceAgencyContribution> prInsuranceAgencyContribution { get; set; }
        public DbSet<prInteractiveSMSApplications> prInteractiveSMSApplications { get; set; }
        public DbSet<prITAttributeTypeRequiredProcesses> prITAttributeTypeRequiredProcesses { get; set; }
        public DbSet<prItemAccountGrGLAccs> prItemAccountGrGLAccs { get; set; }
        public DbSet<prItemAirportSalesCommissionGroup> prItemAirportSalesCommissionGroup { get; set; }
        public DbSet<prItemAlike> prItemAlike { get; set; }
        public DbSet<prItemAttribute> prItemAttribute { get; set; }
        public DbSet<prItemBarcode> prItemBarcode { get; set; }
        public DbSet<prItemBasePrice> prItemBasePrice { get; set; }
        public DbSet<prItemBatchBarcode> prItemBatchBarcode { get; set; }
        public DbSet<prItemColorAttributes> prItemColorAttributes { get; set; }
        public DbSet<prItemColorFabricBlend> prItemColorFabricBlend { get; set; }
        public DbSet<prItemCompanyBrand> prItemCompanyBrand { get; set; }
        public DbSet<prItemCostCenter> prItemCostCenter { get; set; }
        public DbSet<prItemCostCenterRates> prItemCostCenterRates { get; set; }
        public DbSet<prItemCrossUnitOfMeasure> prItemCrossUnitOfMeasure { get; set; }
        public DbSet<prItemDim1Equ> prItemDim1Equ { get; set; }
        public DbSet<prItemDim2Equ> prItemDim2Equ { get; set; }
        public DbSet<prItemDim3Equ> prItemDim3Equ { get; set; }
        public DbSet<prItemDiscountGrAtt> prItemDiscountGrAtt { get; set; }
        public DbSet<prItemInformation> prItemInformation { get; set; }
        public DbSet<prItemListContent> prItemListContent { get; set; }
        public DbSet<prItemMeasuresOfVolume> prItemMeasuresOfVolume { get; set; }
        public DbSet<prItemNotes> prItemNotes { get; set; }
        public DbSet<prItemPaymentPlanGrAtt> prItemPaymentPlanGrAtt { get; set; }
        public DbSet<prItemPhoto> prItemPhoto { get; set; }
        public DbSet<prItemProcessPermits> prItemProcessPermits { get; set; }
        public DbSet<prItemRequisition> prItemRequisition { get; set; }
        public DbSet<prItemSection> prItemSection { get; set; }
        public DbSet<prItemSerialNumber> prItemSerialNumber { get; set; }
        public DbSet<prItemSerialNumberPool> prItemSerialNumberPool { get; set; }
        public DbSet<prItemStockLevel> prItemStockLevel { get; set; }
        public DbSet<prItemTaxGrAtt> prItemTaxGrAtt { get; set; }
        public DbSet<prItemTextileCareSymbol> prItemTextileCareSymbol { get; set; }
        public DbSet<prItemTextileCareTemplateSymbol> prItemTextileCareTemplateSymbol { get; set; }
        public DbSet<prItemUnAcceptableExpense> prItemUnAcceptableExpense { get; set; }
        public DbSet<prItemVariant> prItemVariant { get; set; }
        public DbSet<prItemVendorGrAtt> prItemVendorGrAtt { get; set; }
        public DbSet<prJobTrainingAttribute> prJobTrainingAttribute { get; set; }
        public DbSet<prJobTrainingNotes> prJobTrainingNotes { get; set; }
        public DbSet<prJobTrainingPlanned> prJobTrainingPlanned { get; set; }
        public DbSet<prJobTrainingRealised> prJobTrainingRealised { get; set; }
        public DbSet<prLetterOfGuaranteeAttribute> prLetterOfGuaranteeAttribute { get; set; }
        public DbSet<prLinkedProductContent> prLinkedProductContent { get; set; }
        public DbSet<prLinkedProductContentSum> prLinkedProductContentSum { get; set; }
        public DbSet<prLinkedProductContentSumDetail> prLinkedProductContentSumDetail { get; set; }
        public DbSet<prLinkedProductProperties> prLinkedProductProperties { get; set; }
        public DbSet<prLotQty> prLotQty { get; set; }
        public DbSet<prLoyaltyProgramLevel> prLoyaltyProgramLevel { get; set; }
        public DbSet<prLoyaltyProgramLevelHistory> prLoyaltyProgramLevelHistory { get; set; }
        public DbSet<prLoyaltyProgramNotes> prLoyaltyProgramNotes { get; set; }
        public DbSet<prLoyaltyProgramProcessAvailableStatus> prLoyaltyProgramProcessAvailableStatus { get; set; }
        public DbSet<prLoyaltyProgramProcessAvailableStatusHistory> prLoyaltyProgramProcessAvailableStatusHistory { get; set; }
        public DbSet<prLoyaltyProgramProcessStatus> prLoyaltyProgramProcessStatus { get; set; }
        public DbSet<prLoyaltyProgramProcessStatusHistory> prLoyaltyProgramProcessStatusHistory { get; set; }
        public DbSet<prMarketPlaceCategoryAttConvert> prMarketPlaceCategoryAttConvert { get; set; }
        public DbSet<prMarketPlaceCategoryAttType> prMarketPlaceCategoryAttType { get; set; }
        public DbSet<prMarketPlaceCategoryAttTypeConvert> prMarketPlaceCategoryAttTypeConvert { get; set; }
        public DbSet<prMarketPlaceCategoryConvert> prMarketPlaceCategoryConvert { get; set; }
        public DbSet<prMarketPlaceCreditCardMappings> prMarketPlaceCreditCardMappings { get; set; }
        public DbSet<prMarketPlaceItemVariant> prMarketPlaceItemVariant { get; set; }
        public DbSet<prMarketPlaceProduct> prMarketPlaceProduct { get; set; }
        public DbSet<prMarketPlaceProductHierarchyConvert> prMarketPlaceProductHierarchyConvert { get; set; }
        public DbSet<prMarketPlaceProductInformation> prMarketPlaceProductInformation { get; set; }
        public DbSet<prMDMCommunication> prMDMCommunication { get; set; }
        public DbSet<prMDMPostalAddress> prMDMPostalAddress { get; set; }
        public DbSet<prMedicalProductImportCountries> prMedicalProductImportCountries { get; set; }
        public DbSet<prMedicalProductOriginCountries> prMedicalProductOriginCountries { get; set; }
        public DbSet<prMedicalProductProperties> prMedicalProductProperties { get; set; }
        public DbSet<prMT940ProcessRules> prMT940ProcessRules { get; set; }
        public DbSet<prNotesGLAccs> prNotesGLAccs { get; set; }
        public DbSet<prOfficeCOGSGrAtt> prOfficeCOGSGrAtt { get; set; }
        public DbSet<prOfficeGLAccs> prOfficeGLAccs { get; set; }
        public DbSet<prOfficeMapLocation> prOfficeMapLocation { get; set; }
        public DbSet<prOnlineBankWebServiceBankInternalParameter> prOnlineBankWebServiceBankInternalParameter { get; set; }
        public DbSet<prOnlineBankWebServiceCreditCardParameter> prOnlineBankWebServiceCreditCardParameter { get; set; }
        public DbSet<prOnlineDBSLimit> prOnlineDBSLimit { get; set; }
        public DbSet<prOnlineDBSLimitHistory> prOnlineDBSLimitHistory { get; set; }
        public DbSet<prOpticalSutContributionAmount> prOpticalSutContributionAmount { get; set; }
        public DbSet<prPaylinkCardOwner> prPaylinkCardOwner { get; set; }
        public DbSet<prPaymentNumberGroup> prPaymentNumberGroup { get; set; }
        public DbSet<prPaymentPlanAdditionalInstallmentAuthority> prPaymentPlanAdditionalInstallmentAuthority { get; set; }
        public DbSet<prPaymentPlanAdditionalInstallmentCampaign> prPaymentPlanAdditionalInstallmentCampaign { get; set; }
        public DbSet<prPaymentPlanBIN> prPaymentPlanBIN { get; set; }
        public DbSet<prPaymentProviderConvert> prPaymentProviderConvert { get; set; }
        public DbSet<prPaymentProviderGLAccs> prPaymentProviderGLAccs { get; set; }
        public DbSet<prPCTGLAccs> prPCTGLAccs { get; set; }
        public DbSet<prPersonalDataConfirmationFormTypeForCurrAccTypes> prPersonalDataConfirmationFormTypeForCurrAccTypes { get; set; }
        public DbSet<prPOSTerminalATAttribute> prPOSTerminalATAttribute { get; set; }
        public DbSet<prPosTerminalDevice> prPosTerminalDevice { get; set; }
        public DbSet<prPosTerminalFiscalPrinter> prPosTerminalFiscalPrinter { get; set; }
        public DbSet<prPOSTerminalPrinter> prPOSTerminalPrinter { get; set; }
        public DbSet<prPresentCardActivationSteps> prPresentCardActivationSteps { get; set; }
        public DbSet<prPresentCardValidCardTypes> prPresentCardValidCardTypes { get; set; }
        public DbSet<prProcessATAttribute> prProcessATAttribute { get; set; }
        public DbSet<prProcessDefaultExpenseType> prProcessDefaultExpenseType { get; set; }
        public DbSet<prProcessDiscount> prProcessDiscount { get; set; }
        public DbSet<prProcessFlowRules> prProcessFlowRules { get; set; }
        public DbSet<prProcessFTAttribute> prProcessFTAttribute { get; set; }
        public DbSet<prProcessInfo> prProcessInfo { get; set; }
        public DbSet<prProcessITAttribute> prProcessITAttribute { get; set; }
        public DbSet<prProcessItemType> prProcessItemType { get; set; }
        public DbSet<prProductCareWarning> prProductCareWarning { get; set; }
        public DbSet<prProductColorAttribute> prProductColorAttribute { get; set; }
        public DbSet<prProductColorSetContent> prProductColorSetContent { get; set; }
        public DbSet<prProductDimSetContent> prProductDimSetContent { get; set; }
        public DbSet<prProductFrameProperties> prProductFrameProperties { get; set; }
        public DbSet<prProductImageURLs> prProductImageURLs { get; set; }
        public DbSet<prProductLensProperties> prProductLensProperties { get; set; }
        public DbSet<prProductLot> prProductLot { get; set; }
        public DbSet<prProductLotBarcode> prProductLotBarcode { get; set; }
        public DbSet<prProductPartAvailableFabric> prProductPartAvailableFabric { get; set; }
        public DbSet<prProductPoint> prProductPoint { get; set; }
        public DbSet<prProductStatusHistory> prProductStatusHistory { get; set; }
        public DbSet<prProposalConfirmationRuleDepartments> prProposalConfirmationRuleDepartments { get; set; }
        public DbSet<prProposalConfirmationRuleStep> prProposalConfirmationRuleStep { get; set; }
        public DbSet<prProposalConfirmationRuleStepUser> prProposalConfirmationRuleStepUser { get; set; }
        public DbSet<prPurchasingAgentAvailableRequisition> prPurchasingAgentAvailableRequisition { get; set; }
        public DbSet<prRelatedCurrAcc> prRelatedCurrAcc { get; set; }
        public DbSet<prRelationalPriceGroups> prRelationalPriceGroups { get; set; }
        public DbSet<prRequisitionAttribute> prRequisitionAttribute { get; set; }
        public DbSet<prRequisitionConfirmationRuleDepartments> prRequisitionConfirmationRuleDepartments { get; set; }
        public DbSet<prRequisitionConfirmationRuleStep> prRequisitionConfirmationRuleStep { get; set; }
        public DbSet<prRequisitionConfirmationRuleStepUser> prRequisitionConfirmationRuleStepUser { get; set; }
        public DbSet<prRequisitionCurrAcc> prRequisitionCurrAcc { get; set; }
        public DbSet<prRequisitionLimit> prRequisitionLimit { get; set; }
        public DbSet<prResponsibilityAreaPostalAddress> prResponsibilityAreaPostalAddress { get; set; }
        public DbSet<prRetailCustomerSegmentationFilters> prRetailCustomerSegmentationFilters { get; set; }
        public DbSet<prRetailCustomerSegmentationSQL> prRetailCustomerSegmentationSQL { get; set; }
        public DbSet<prReturnReasonAvailableProcess> prReturnReasonAvailableProcess { get; set; }
        public DbSet<prRoleMember> prRoleMember { get; set; }
        public DbSet<prRollNotes> prRollNotes { get; set; }
        public DbSet<prRoundsmanResponsibilityArea> prRoundsmanResponsibilityArea { get; set; }
        public DbSet<prSection> prSection { get; set; }
        public DbSet<prServiceAvailableProductLevel> prServiceAvailableProductLevel { get; set; }
        public DbSet<prServiceAvailableSupportType> prServiceAvailableSupportType { get; set; }
        public DbSet<prStoreBankAccCodesForPayment> prStoreBankAccCodesForPayment { get; set; }
        public DbSet<prStoreBankPOSAccounts> prStoreBankPOSAccounts { get; set; }
        public DbSet<prStoreBankPOSGLAccs> prStoreBankPOSGLAccs { get; set; }
        public DbSet<prStoreCapacity> prStoreCapacity { get; set; }
        public DbSet<prStoreCashAcc> prStoreCashAcc { get; set; }
        public DbSet<prStoreCustomerGLAccount> prStoreCustomerGLAccount { get; set; }
        public DbSet<prStoreProperties> prStoreProperties { get; set; }
        public DbSet<prStoreSpecialDay> prStoreSpecialDay { get; set; }
        public DbSet<prStoreStatus> prStoreStatus { get; set; }
        public DbSet<prStoreVendor> prStoreVendor { get; set; }
        public DbSet<prStoreWorkingHours> prStoreWorkingHours { get; set; }
        public DbSet<prSubCurrAcc> prSubCurrAcc { get; set; }
        public DbSet<prSubCurrAccAttribute> prSubCurrAccAttribute { get; set; }
        public DbSet<prSubCurrAccDefault> prSubCurrAccDefault { get; set; }
        public DbSet<prSubCurrAccOnlineBank> prSubCurrAccOnlineBank { get; set; }
        public DbSet<prSubCurrAccSalesperson> prSubCurrAccSalesperson { get; set; }
        public DbSet<prTechnicalResponsibleAvailableRequisition> prTechnicalResponsibleAvailableRequisition { get; set; }
        public DbSet<prTimePeriodDay> prTimePeriodDay { get; set; }
        public DbSet<prTransferPlanResultViewCustomization> prTransferPlanResultViewCustomization { get; set; }
        public DbSet<prTransferPlanRuleScript> prTransferPlanRuleScript { get; set; }
        public DbSet<prTransferPlanTemplateParameterValue> prTransferPlanTemplateParameterValue { get; set; }
        public DbSet<prUBBDeclaredItems> prUBBDeclaredItems { get; set; }
        public DbSet<prUniFreeTenderTypeMapping> prUniFreeTenderTypeMapping { get; set; }
        public DbSet<prUTSDeclaredItems> prUTSDeclaredItems { get; set; }
        public DbSet<prV3ToMdmIDMap> prV3ToMdmIDMap { get; set; }
        public DbSet<prVatGLAccs> prVatGLAccs { get; set; }
        public DbSet<prVehicleDrivers> prVehicleDrivers { get; set; }
        public DbSet<prVendorPaymentPlanGrAtt> prVendorPaymentPlanGrAtt { get; set; }
        public DbSet<prWarehouseChannelTemplateContent> prWarehouseChannelTemplateContent { get; set; }
        public DbSet<prWarehouseMapLocation> prWarehouseMapLocation { get; set; }
        public DbSet<prWarehousePostalAddress> prWarehousePostalAddress { get; set; }
        public DbSet<prWarehouseProcessFlowRules> prWarehouseProcessFlowRules { get; set; }
        public DbSet<prWarehouseResponsibilityArea> prWarehouseResponsibilityArea { get; set; }
        public DbSet<prWithHoldingTaxAvailableDovRates> prWithHoldingTaxAvailableDovRates { get; set; }
        public DbSet<prWorkPlaceATAttribute> prWorkPlaceATAttribute { get; set; }
        public DbSet<prWorkPlaceFTAttribute> prWorkPlaceFTAttribute { get; set; }
        public DbSet<prWorkPlaceGLAccs> prWorkPlaceGLAccs { get; set; }
        public DbSet<prWorkPlaceOptimalEmployment> prWorkPlaceOptimalEmployment { get; set; }
        public DbSet<prWorkPlaceSecondment> prWorkPlaceSecondment { get; set; }
        public DbSet<prWorkplaceSGKLogonInfo> prWorkplaceSGKLogonInfo { get; set; }

        // Other Tables
        public DbSet<rpAirConnUSB> rpAirConnUSB { get; set; }
        public DbSet<rpAirConnUSB_CashIn> rpAirConnUSB_CashIn { get; set; }
        public DbSet<rpAirConnUSB_CashOut> rpAirConnUSB_CashOut { get; set; }
        public DbSet<rpAirConnUSB_Correction> rpAirConnUSB_Correction { get; set; }
        public DbSet<rpAirConnUSB_GetControlTapeHeader> rpAirConnUSB_GetControlTapeHeader { get; set; }
        public DbSet<rpAirConnUSB_GetControlTapeLine> rpAirConnUSB_GetControlTapeLine { get; set; }
        public DbSet<rpAirConnUSB_GetInfo> rpAirConnUSB_GetInfo { get; set; }
        public DbSet<rpAirConnUSB_Invoice> rpAirConnUSB_Invoice { get; set; }
        public DbSet<rpAirConnUSB_PeriodicZReport> rpAirConnUSB_PeriodicZReport { get; set; }
        public DbSet<rpAirConnUSB_XReport> rpAirConnUSB_XReport { get; set; }
        public DbSet<rpAirConnUSB_ZReport> rpAirConnUSB_ZReport { get; set; }
        public DbSet<rpBrowsedProduct> rpBrowsedProduct { get; set; }
        public DbSet<rpCompareTransactionHeader> rpCompareTransactionHeader { get; set; }
        public DbSet<rpCompareTransactionLine> rpCompareTransactionLine { get; set; }
        public DbSet<rpCompareTransactionSourceFiles> rpCompareTransactionSourceFiles { get; set; }
        public DbSet<rpCompareTransactionTargetFiles> rpCompareTransactionTargetFiles { get; set; }
        public DbSet<rpEArchiveIntegratorControl> rpEArchiveIntegratorControl { get; set; }
        public DbSet<rpEuromessageCampaignConversations> rpEuromessageCampaignConversations { get; set; }
        public DbSet<rpEuromessageCampaignDeliveryStatusDetail> rpEuromessageCampaignDeliveryStatusDetail { get; set; }
        public DbSet<rpEuromessageCampaigns> rpEuromessageCampaigns { get; set; }
        public DbSet<rpEuromessageUnsubscriberDetails> rpEuromessageUnsubscriberDetails { get; set; }
        public DbSet<rpExportData> rpExportData { get; set; }
        public DbSet<rpExternalItemFileHeader> rpExternalItemFileHeader { get; set; }
        public DbSet<rpExternalItemFileLine> rpExternalItemFileLine { get; set; }
        public DbSet<rpGrandLedgerDetail> rpGrandLedgerDetail { get; set; }
        public DbSet<rpGrandLedgerTotals> rpGrandLedgerTotals { get; set; }
        public DbSet<rpItemLastDimensions> rpItemLastDimensions { get; set; }
        public DbSet<rpJournalLedgerDetail> rpJournalLedgerDetail { get; set; }
        public DbSet<rpMobildevIVTContactReconciliation> rpMobildevIVTContactReconciliation { get; set; }
        public DbSet<rpMobildevIVTEmailReconciliation> rpMobildevIVTEmailReconciliation { get; set; }
        public DbSet<rpMobilDevIVTLiteEmailReconciliation> rpMobilDevIVTLiteEmailReconciliation { get; set; }
        public DbSet<rpMobilDevIVTLiteMsisdnReconciliation> rpMobilDevIVTLiteMsisdnReconciliation { get; set; }
        public DbSet<rpMobildevIVTReconciliation> rpMobildevIVTReconciliation { get; set; }
        public DbSet<rpNegativeInventoryStockID> rpNegativeInventoryStockID { get; set; }
        public DbSet<rpOnlineBankFuturePosIncomeByOperationAndDueDate> rpOnlineBankFuturePosIncomeByOperationAndDueDate { get; set; }
        public DbSet<rpOnlineBankFuturePosIncomeByReturnDate> rpOnlineBankFuturePosIncomeByReturnDate { get; set; }
        public DbSet<rpOrderDeliveryAssignmentCollectedItems> rpOrderDeliveryAssignmentCollectedItems { get; set; }
        public DbSet<rpProductDatamatrixLabel> rpProductDatamatrixLabel { get; set; }
        public DbSet<rpProductLabel> rpProductLabel { get; set; }
        public DbSet<rpProductLabelRollNumber> rpProductLabelRollNumber { get; set; }
        public DbSet<rpProposalLineConfirmationHistory> rpProposalLineConfirmationHistory { get; set; }
        public DbSet<rpPurchaseRequisitionConfirmationHistory> rpPurchaseRequisitionConfirmationHistory { get; set; }
        public DbSet<rpPurchaseRequisitionProposalConfirmationHistory> rpPurchaseRequisitionProposalConfirmationHistory { get; set; }
        public DbSet<rpRegisteredEmailForPayrollSendEvidence> rpRegisteredEmailForPayrollSendEvidence { get; set; }
        public DbSet<rpRegisteredEmailForPayrollSendStatus> rpRegisteredEmailForPayrollSendStatus { get; set; }
        public DbSet<rpSelectedProduct> rpSelectedProduct { get; set; }
        public DbSet<rpSelectedProductInvoice> rpSelectedProductInvoice { get; set; }
        public DbSet<rpSelectedProductOrder> rpSelectedProductOrder { get; set; }
        public DbSet<rpSubjectToEInvoice> rpSubjectToEInvoice { get; set; }
        public DbSet<rpTransferApproved> rpTransferApproved { get; set; }
        public DbSet<rpTuratelACLBlackListReconciliation> rpTuratelACLBlackListReconciliation { get; set; }
        public DbSet<rpTuratelACLWhiteListReconciliation> rpTuratelACLWhiteListReconciliation { get; set; }
        public DbSet<rpTuratelADMAuthorizationReconciliation> rpTuratelADMAuthorizationReconciliation { get; set; }
        public DbSet<rpTuratelADMCommunicationReconciliation> rpTuratelADMCommunicationReconciliation { get; set; }

        // Other Tables
        public DbSet<srCashSerialNumber> srCashSerialNumber { get; set; }
        public DbSet<srChequesSerialNumber> srChequesSerialNumber { get; set; }
        public DbSet<srCodeNumberCheque> srCodeNumberCheque { get; set; }
        public DbSet<srCodeNumberCurrAcc> srCodeNumberCurrAcc { get; set; }
        public DbSet<srCodeNumberGiftCard> srCodeNumberGiftCard { get; set; }
        public DbSet<srCodeNumberItem> srCodeNumberItem { get; set; }
        public DbSet<srCodeNumberLetterOfGuarantee> srCodeNumberLetterOfGuarantee { get; set; }
        public DbSet<srCodeNumberWarehouse> srCodeNumberWarehouse { get; set; }
        public DbSet<srCurrAccListNumber> srCurrAccListNumber { get; set; }
        public DbSet<srCustomerConversationFormNumber> srCustomerConversationFormNumber { get; set; }
        public DbSet<srDistanceSaleBankPaymentNumber> srDistanceSaleBankPaymentNumber { get; set; }
        public DbSet<srEArchiveSerialNumber> srEArchiveSerialNumber { get; set; }
        public DbSet<srEInvoiceSerialNumber> srEInvoiceSerialNumber { get; set; }
        public DbSet<srEShipmentSerialNumber> srEShipmentSerialNumber { get; set; }
        public DbSet<srExpenseInvoiceDocumentNumber> srExpenseInvoiceDocumentNumber { get; set; }
        public DbSet<srFormNumberCommunication> srFormNumberCommunication { get; set; }
        public DbSet<srOnlineInstallmentBankPayment> srOnlineInstallmentBankPayment { get; set; }
        public DbSet<srOpticalProtocolNumber> srOpticalProtocolNumber { get; set; }
        public DbSet<srPayrollDocumentNumber> srPayrollDocumentNumber { get; set; }
        public DbSet<srRefNumberAdjustCost> srRefNumberAdjustCost { get; set; }
        public DbSet<srRefNumberAgentReservation> srRefNumberAgentReservation { get; set; }
        public DbSet<srRefNumberAllocation> srRefNumberAllocation { get; set; }
        public DbSet<srRefNumberBadDebt> srRefNumberBadDebt { get; set; }
        public DbSet<srRefNumberBankCredit> srRefNumberBankCredit { get; set; }
        public DbSet<srRefNumberBankPaymentInstruction> srRefNumberBankPaymentInstruction { get; set; }
        public DbSet<srRefNumberBankPaymentList> srRefNumberBankPaymentList { get; set; }
        public DbSet<srRefNumberBankTrans> srRefNumberBankTrans { get; set; }
        public DbSet<srRefNumberCashTrans> srRefNumberCashTrans { get; set; }
        public DbSet<srRefNumberChequeTrans> srRefNumberChequeTrans { get; set; }
        public DbSet<srRefNumberConfirmationForm> srRefNumberConfirmationForm { get; set; }
        public DbSet<srRefNumberContract> srRefNumberContract { get; set; }
        public DbSet<srRefNumberCreditCardPayment> srRefNumberCreditCardPayment { get; set; }
        public DbSet<srRefNumberDebit> srRefNumberDebit { get; set; }
        public DbSet<srRefNumberDepartmentReceipt> srRefNumberDepartmentReceipt { get; set; }
        public DbSet<srRefNumberDeviceDocument> srRefNumberDeviceDocument { get; set; }
        public DbSet<srRefNumberDiscountVoucher> srRefNumberDiscountVoucher { get; set; }
        public DbSet<srRefNumberExpenseAccrual> srRefNumberExpenseAccrual { get; set; }
        public DbSet<srRefNumberExpenseSlip> srRefNumberExpenseSlip { get; set; }
        public DbSet<srRefNumberGiftCardPayment> srRefNumberGiftCardPayment { get; set; }
        public DbSet<srRefNumberIncentive> srRefNumberIncentive { get; set; }
        public DbSet<srRefNumberInnerOrder> srRefNumberInnerOrder { get; set; }
        public DbSet<srRefNumberInnerProcess> srRefNumberInnerProcess { get; set; }
        public DbSet<srRefNumberItemTest> srRefNumberItemTest { get; set; }
        public DbSet<srRefNumberJournal> srRefNumberJournal { get; set; }
        public DbSet<srRefNumberOtherPayment> srRefNumberOtherPayment { get; set; }
        public DbSet<srRefNumberPayment> srRefNumberPayment { get; set; }
        public DbSet<srRefNumberPriceList> srRefNumberPriceList { get; set; }
        public DbSet<srRefNumberProcessFlow> srRefNumberProcessFlow { get; set; }
        public DbSet<srRefNumberPurchaseRequisition> srRefNumberPurchaseRequisition { get; set; }
        public DbSet<srRefNumberReportedSale> srRefNumberReportedSale { get; set; }
        public DbSet<srRefNumberSalesPlan> srRefNumberSalesPlan { get; set; }
        public DbSet<srRefNumberSupportRequest> srRefNumberSupportRequest { get; set; }
        public DbSet<srRefNumberTaxIncurred> srRefNumberTaxIncurred { get; set; }
        public DbSet<srRefNumberTransferPlan> srRefNumberTransferPlan { get; set; }
        public DbSet<srRefNumberVehicleLoading> srRefNumberVehicleLoading { get; set; }
        public DbSet<srRefNumberVehicleUnLoading> srRefNumberVehicleUnLoading { get; set; }
        public DbSet<srRefNumberVendorPriceList> srRefNumberVendorPriceList { get; set; }
        public DbSet<srRefNumberVirement> srRefNumberVirement { get; set; }
        public DbSet<srSerialNumber> srSerialNumber { get; set; }

        // Other Tables
        public DbSet<stDispOrder> stDispOrder { get; set; }
        public DbSet<stInnerOrder> stInnerOrder { get; set; }
        public DbSet<stItemRollNumber> stItemRollNumber { get; set; }
        public DbSet<stItemRollNumberPicking> stItemRollNumberPicking { get; set; }
        public DbSet<stItemSerialNumber> stItemSerialNumber { get; set; }
        public DbSet<stOrder> stOrder { get; set; }
        public DbSet<stOrderAsn> stOrderAsn { get; set; }
        public DbSet<stPicking> stPicking { get; set; }
        public DbSet<stProductAvailableInventory> stProductAvailableInventory { get; set; }
        public DbSet<stProductFirstIncomingDate> stProductFirstIncomingDate { get; set; }
        public DbSet<stProductRemainingInOrder> stProductRemainingInOrder { get; set; }
        public DbSet<stProductRemainingOutOrder> stProductRemainingOutOrder { get; set; }
        public DbSet<stProductRemainingReserve> stProductRemainingReserve { get; set; }
        public DbSet<stProductSalesLastPeriod> stProductSalesLastPeriod { get; set; }
        public DbSet<stProductSalesWeekly> stProductSalesWeekly { get; set; }
        public DbSet<stProductTransferNotApproved> stProductTransferNotApproved { get; set; }
        public DbSet<stPurchaseOrder> stPurchaseOrder { get; set; }
        public DbSet<stReportedSale> stReportedSale { get; set; }
        public DbSet<stReserve> stReserve { get; set; }
        public DbSet<stShipment> stShipment { get; set; }
        public DbSet<stToleranceInnerOrder> stToleranceInnerOrder { get; set; }
        public DbSet<stToleranceOrder> stToleranceOrder { get; set; }

        // Extension Tables
        public DbSet<tpAgentContractDeservedDebit> tpAgentContractDeservedDebit { get; set; }
        public DbSet<tpAgentContractVehicleDebit> tpAgentContractVehicleDebit { get; set; }
        public DbSet<tpAgentContractVisitFrequencyDebit> tpAgentContractVisitFrequencyDebit { get; set; }
        public DbSet<tpAgentPerformanceBonusDebit> tpAgentPerformanceBonusDebit { get; set; }
        public DbSet<tpAgentPerformanceDebit> tpAgentPerformanceDebit { get; set; }
        public DbSet<tpAgentReservationActualPax> tpAgentReservationActualPax { get; set; }
        public DbSet<tpAgentReservationReasonForNotShopping> tpAgentReservationReasonForNotShopping { get; set; }
        public DbSet<tpAllocationATAttribute> tpAllocationATAttribute { get; set; }
        public DbSet<tpAllocationITAttribute> tpAllocationITAttribute { get; set; }
        public DbSet<tpBadDebtLawyerHistory> tpBadDebtLawyerHistory { get; set; }
        public DbSet<tpBankATAttribute> tpBankATAttribute { get; set; }
        public DbSet<tpBankCreditATAttribute> tpBankCreditATAttribute { get; set; }
        public DbSet<tpBankCreditFTAttribute> tpBankCreditFTAttribute { get; set; }
        public DbSet<tpBankCreditRelatedCheques> tpBankCreditRelatedCheques { get; set; }
        public DbSet<tpBankCreditRelatedExportFiles> tpBankCreditRelatedExportFiles { get; set; }
        public DbSet<tpBankCreditRotativeInterestRates> tpBankCreditRotativeInterestRates { get; set; }
        public DbSet<tpBankFTAttribute> tpBankFTAttribute { get; set; }
        public DbSet<tpBankHeaderOnlineBankIntegration> tpBankHeaderOnlineBankIntegration { get; set; }
        public DbSet<tpBankMT940> tpBankMT940 { get; set; }
        public DbSet<tpBankPaymentInstructionATAttribute> tpBankPaymentInstructionATAttribute { get; set; }
        public DbSet<tpBankPaymentInstructionFTAttribute> tpBankPaymentInstructionFTAttribute { get; set; }
        public DbSet<tpBankPaymentListATAttribute> tpBankPaymentListATAttribute { get; set; }
        public DbSet<tpBankPaymentListFTAttribute> tpBankPaymentListFTAttribute { get; set; }
        public DbSet<tpBulutTahsilatCreditCardPayment> tpBulutTahsilatCreditCardPayment { get; set; }
        public DbSet<tpCanceledEArchiveInvoice> tpCanceledEArchiveInvoice { get; set; }
        public DbSet<tpCanceledUTSDeclaration> tpCanceledUTSDeclaration { get; set; }
        public DbSet<tpCashATAttribute> tpCashATAttribute { get; set; }
        public DbSet<tpCashFTAttribute> tpCashFTAttribute { get; set; }
        public DbSet<tpCashRegisterInfo> tpCashRegisterInfo { get; set; }
        public DbSet<tpChequeATAttribute> tpChequeATAttribute { get; set; }
        public DbSet<tpChequeFTAttribute> tpChequeFTAttribute { get; set; }
        public DbSet<tpCompanyCreditCardPaymentDueDate> tpCompanyCreditCardPaymentDueDate { get; set; }
        public DbSet<tpContractATAttribute> tpContractATAttribute { get; set; }
        public DbSet<tpContractITAttribute> tpContractITAttribute { get; set; }
        public DbSet<tpCreditCardBulutTahsilatVPOSReturn> tpCreditCardBulutTahsilatVPOSReturn { get; set; }
        public DbSet<tpCreditCardPaymentATAttribute> tpCreditCardPaymentATAttribute { get; set; }
        public DbSet<tpCreditCardPaymentDueDate> tpCreditCardPaymentDueDate { get; set; }
        public DbSet<tpCreditCardPaymentFTAttribute> tpCreditCardPaymentFTAttribute { get; set; }
        public DbSet<tpCreditCardPaymentHeaderOnlineBankIntegration> tpCreditCardPaymentHeaderOnlineBankIntegration { get; set; }
        public DbSet<tpCurrAccBookATAttribute> tpCurrAccBookATAttribute { get; set; }
        public DbSet<tpCurrAccBookFTAttribute> tpCurrAccBookFTAttribute { get; set; }
        public DbSet<tpCustomerOnlinePaymentCorrelations> tpCustomerOnlinePaymentCorrelations { get; set; }
        public DbSet<tpDebitATAttribute> tpDebitATAttribute { get; set; }
        public DbSet<tpDebitFTAttribute> tpDebitFTAttribute { get; set; }
        public DbSet<tpDeletedFiscalInvoice> tpDeletedFiscalInvoice { get; set; }
        public DbSet<tpDispOrderHeaderExtension> tpDispOrderHeaderExtension { get; set; }
        public DbSet<tpDistanceSaleBankPayment> tpDistanceSaleBankPayment { get; set; }
        public DbSet<tpEArchieveIntegratorInfo> tpEArchieveIntegratorInfo { get; set; }
        public DbSet<tpEArchiveInvoiceConfirmation> tpEArchiveInvoiceConfirmation { get; set; }
        public DbSet<tpExpenseAccrualATAttribute> tpExpenseAccrualATAttribute { get; set; }
        public DbSet<tpExpenseAccrualFTAttribute> tpExpenseAccrualFTAttribute { get; set; }
        public DbSet<tpExpenseInvoiceConfirmation> tpExpenseInvoiceConfirmation { get; set; }
        public DbSet<tpExpenseSlipATAttribute> tpExpenseSlipATAttribute { get; set; }
        public DbSet<tpExpenseSlipFTAttribute> tpExpenseSlipFTAttribute { get; set; }
        public DbSet<tpExpenseSlipTaxLine> tpExpenseSlipTaxLine { get; set; }
        public DbSet<tpExportSaleRealisition> tpExportSaleRealisition { get; set; }
        public DbSet<tpGiftCardPaymentATAttribute> tpGiftCardPaymentATAttribute { get; set; }
        public DbSet<tpGiftCardPaymentFTAttribute> tpGiftCardPaymentFTAttribute { get; set; }
        public DbSet<tpInnerCustomsTransferImportInvoiceLine> tpInnerCustomsTransferImportInvoiceLine { get; set; }
        public DbSet<tpInnerHeaderExtension> tpInnerHeaderExtension { get; set; }
        public DbSet<tpInnerITAttribute> tpInnerITAttribute { get; set; }
        public DbSet<tpInnerLineDocument> tpInnerLineDocument { get; set; }
        public DbSet<tpInnerLinePurchaseInvoiceLine> tpInnerLinePurchaseInvoiceLine { get; set; }
        public DbSet<tpInnerOrderITAttribute> tpInnerOrderITAttribute { get; set; }
        public DbSet<tpInnerTransportModeDetail> tpInnerTransportModeDetail { get; set; }
        public DbSet<tpInnerVehicleDrivers> tpInnerVehicleDrivers { get; set; }
        public DbSet<tpInStockDeclarationInfo> tpInStockDeclarationInfo { get; set; }
        public DbSet<tpInvoiceadditionalDeliveryProcessesDistance> tpInvoiceadditionalDeliveryProcessesDistance { get; set; }
        public DbSet<tpInvoiceATAttribute> tpInvoiceATAttribute { get; set; }
        public DbSet<tpInvoiceCancelDBSBankIntegration> tpInvoiceCancelDBSBankIntegration { get; set; }
        public DbSet<tpInvoiceDiscountOffer> tpInvoiceDiscountOffer { get; set; }
        public DbSet<tpInvoiceDiscountOfferContributor> tpInvoiceDiscountOfferContributor { get; set; }
        public DbSet<tpInvoiceEArchieveXML> tpInvoiceEArchieveXML { get; set; }
        public DbSet<tpInvoiceEInvoiceXML> tpInvoiceEInvoiceXML { get; set; }
        public DbSet<tpInvoiceExchangeDifferencePaidCheque> tpInvoiceExchangeDifferencePaidCheque { get; set; }
        public DbSet<tpInvoiceFTAttribute> tpInvoiceFTAttribute { get; set; }
        public DbSet<tpInvoiceHeaderExtension> tpInvoiceHeaderExtension { get; set; }
        public DbSet<tpInvoiceHeaderSalesPerson> tpInvoiceHeaderSalesPerson { get; set; }
        public DbSet<tpInvoiceITAttribute> tpInvoiceITAttribute { get; set; }
        public DbSet<tpInvoiceLineAgentPerformance> tpInvoiceLineAgentPerformance { get; set; }
        public DbSet<tpInvoiceLineExpenseAccrual> tpInvoiceLineExpenseAccrual { get; set; }
        public DbSet<tpInvoiceLineExtension> tpInvoiceLineExtension { get; set; }
        public DbSet<tpInvoiceLineOpticalProductInfo> tpInvoiceLineOpticalProductInfo { get; set; }
        public DbSet<tpInvoiceLinePickingDetails> tpInvoiceLinePickingDetails { get; set; }
        public DbSet<tpInvoiceOpticalContribution> tpInvoiceOpticalContribution { get; set; }
        public DbSet<tpInvoicePassportAndBoardingInfo> tpInvoicePassportAndBoardingInfo { get; set; }
        public DbSet<tpInvoicePostalAddress> tpInvoicePostalAddress { get; set; }
        public DbSet<tpInvoiceSaleReturnHistory> tpInvoiceSaleReturnHistory { get; set; }
        public DbSet<tpInvoiceSGKExtensions> tpInvoiceSGKExtensions { get; set; }
        public DbSet<tpInvoiceSourceInfo> tpInvoiceSourceInfo { get; set; }
        public DbSet<tpInvoiceTransportModeDetail> tpInvoiceTransportModeDetail { get; set; }
        public DbSet<tpInvoiceUBLExtensions> tpInvoiceUBLExtensions { get; set; }
        public DbSet<tpInvoiceUnAcceptableExpenseLine> tpInvoiceUnAcceptableExpenseLine { get; set; }
        public DbSet<tpJournalATAttribute> tpJournalATAttribute { get; set; }
        public DbSet<tpJournalFTAttribute> tpJournalFTAttribute { get; set; }
        public DbSet<tpJournalIntegrationStatus> tpJournalIntegrationStatus { get; set; }
        public DbSet<tpJournalLineExtension> tpJournalLineExtension { get; set; }
        public DbSet<tpJournalTaxIncurred> tpJournalTaxIncurred { get; set; }
        public DbSet<tpJournalZNum> tpJournalZNum { get; set; }
        public DbSet<tpJournalZNumDetail> tpJournalZNumDetail { get; set; }
        public DbSet<tpOnlineBankPosPaymentList> tpOnlineBankPosPaymentList { get; set; }
        public DbSet<tpOnlineInstallmentBankPayment> tpOnlineInstallmentBankPayment { get; set; }
        public DbSet<tpOrderATAttribute> tpOrderATAttribute { get; set; }
        public DbSet<tpOrderCancelDetail> tpOrderCancelDetail { get; set; }
        public DbSet<tpOrderCancelDetailHeader> tpOrderCancelDetailHeader { get; set; }
        public DbSet<tpOrderCanceled> tpOrderCanceled { get; set; }
        public DbSet<tpOrderCancelReturnTransactions> tpOrderCancelReturnTransactions { get; set; }
        public DbSet<tpOrderCashRegisterInfo> tpOrderCashRegisterInfo { get; set; }
        public DbSet<tpOrderContractContext> tpOrderContractContext { get; set; }
        public DbSet<tpOrderDeliveryDetail> tpOrderDeliveryDetail { get; set; }
        public DbSet<tpOrderDiscountOffer> tpOrderDiscountOffer { get; set; }
        public DbSet<tpOrderDiscountOfferContributor> tpOrderDiscountOfferContributor { get; set; }
        public DbSet<tpOrderDistanceSalesCorrelations> tpOrderDistanceSalesCorrelations { get; set; }
        public DbSet<tpOrderDistanceSalesSMS> tpOrderDistanceSalesSMS { get; set; }
        public DbSet<tpOrderFTAttribute> tpOrderFTAttribute { get; set; }
        public DbSet<tpOrderHeaderExtension> tpOrderHeaderExtension { get; set; }
        public DbSet<tpOrderITAttribute> tpOrderITAttribute { get; set; }
        public DbSet<tpOrderLineExtension> tpOrderLineExtension { get; set; }
        public DbSet<tpOrderLineSerialNumber> tpOrderLineSerialNumber { get; set; }
        public DbSet<tpOrderOpticalProductCustomProcess> tpOrderOpticalProductCustomProcess { get; set; }
        public DbSet<tpOrderOTAttribute> tpOrderOTAttribute { get; set; }
        public DbSet<tpOrderPostalAddress> tpOrderPostalAddress { get; set; }
        public DbSet<tpOrdersViaInternetInfo> tpOrdersViaInternetInfo { get; set; }
        public DbSet<tpOtherPaymentATAttribute> tpOtherPaymentATAttribute { get; set; }
        public DbSet<tpOtherPaymentFTAttribute> tpOtherPaymentFTAttribute { get; set; }
        public DbSet<tpOutStockDeclarationInfo> tpOutStockDeclarationInfo { get; set; }
        public DbSet<tpPaymentATAttribute> tpPaymentATAttribute { get; set; }
        public DbSet<tpPaymentBadDebtLawyer> tpPaymentBadDebtLawyer { get; set; }
        public DbSet<tpPaymentBulutTahsilatMapping> tpPaymentBulutTahsilatMapping { get; set; }
        public DbSet<tpPaymentFTAttribute> tpPaymentFTAttribute { get; set; }
        public DbSet<tpPaymentPaynetMapping> tpPaymentPaynetMapping { get; set; }
        public DbSet<tpPaymentRegisterInfo> tpPaymentRegisterInfo { get; set; }
        public DbSet<tpPaymentReturn> tpPaymentReturn { get; set; }
        public DbSet<tpPaynetCreditCardPayment> tpPaynetCreditCardPayment { get; set; }
        public DbSet<tpPickingFromSectionTransfer> tpPickingFromSectionTransfer { get; set; }
        public DbSet<tpProposalATAttribute> tpProposalATAttribute { get; set; }
        public DbSet<tpProposalDiscountOffer> tpProposalDiscountOffer { get; set; }
        public DbSet<tpProposalDiscountOfferContributor> tpProposalDiscountOfferContributor { get; set; }
        public DbSet<tpProposalFTAttribute> tpProposalFTAttribute { get; set; }
        public DbSet<tpProposalITAttribute> tpProposalITAttribute { get; set; }
        public DbSet<tpProposalLineConfirmation> tpProposalLineConfirmation { get; set; }
        public DbSet<tpProposalLineConfirmationStatus> tpProposalLineConfirmationStatus { get; set; }
        public DbSet<tpProposalLineRevision> tpProposalLineRevision { get; set; }
        public DbSet<tpPurchaseRequisitionATAttribute> tpPurchaseRequisitionATAttribute { get; set; }
        public DbSet<tpPurchaseRequisitionClosedByInventory> tpPurchaseRequisitionClosedByInventory { get; set; }
        public DbSet<tpPurchaseRequisitionConfirmation> tpPurchaseRequisitionConfirmation { get; set; }
        public DbSet<tpPurchaseRequisitionItemAttributeInfo> tpPurchaseRequisitionItemAttributeInfo { get; set; }
        public DbSet<tpPurchaseRequisitionItemInfo> tpPurchaseRequisitionItemInfo { get; set; }
        public DbSet<tpPurchaseRequisitionProposal> tpPurchaseRequisitionProposal { get; set; }
        public DbSet<tpPurchaseRequisitionProposalATAttribute> tpPurchaseRequisitionProposalATAttribute { get; set; }
        public DbSet<tpPurchaseRequisitionProposalConfirmation> tpPurchaseRequisitionProposalConfirmation { get; set; }
        public DbSet<tpPurchaseRequisitionProposalRevision> tpPurchaseRequisitionProposalRevision { get; set; }
        public DbSet<tpPurchaseRequisitionReceiveInfo> tpPurchaseRequisitionReceiveInfo { get; set; }
        public DbSet<tpPurchaseRequisitionRevision> tpPurchaseRequisitionRevision { get; set; }
        public DbSet<tpPurchaseRequisitionTechnicalNotes> tpPurchaseRequisitionTechnicalNotes { get; set; }
        public DbSet<tpPurchaseRequisitionTrace> tpPurchaseRequisitionTrace { get; set; }
        public DbSet<tpSalesViaInternetInfo> tpSalesViaInternetInfo { get; set; }
        public DbSet<tpShipmentHeaderExtension> tpShipmentHeaderExtension { get; set; }
        public DbSet<tpShipmentITAttribute> tpShipmentITAttribute { get; set; }
        public DbSet<tpShipmentLinePickingDetails> tpShipmentLinePickingDetails { get; set; }
        public DbSet<tpShipmentReturn> tpShipmentReturn { get; set; }
        public DbSet<tpShipmentTransportModeDetail> tpShipmentTransportModeDetail { get; set; }
        public DbSet<tpShipmentUBLExtensions> tpShipmentUBLExtensions { get; set; }
        public DbSet<tpShipmentVehicleDrivers> tpShipmentVehicleDrivers { get; set; }
        public DbSet<tpSMSPoolLineExtension> tpSMSPoolLineExtension { get; set; }
        public DbSet<tpStockCross> tpStockCross { get; set; }
        public DbSet<tpStockITAttribute> tpStockITAttribute { get; set; }
        public DbSet<tpSupportRequestConfirmation> tpSupportRequestConfirmation { get; set; }
        public DbSet<tpSupportRequestDecisionLetter> tpSupportRequestDecisionLetter { get; set; }
        public DbSet<tpSupportRequestInformation> tpSupportRequestInformation { get; set; }
        public DbSet<tpSupportResolve> tpSupportResolve { get; set; }
        public DbSet<tpSupportResolveMaterial> tpSupportResolveMaterial { get; set; }
        public DbSet<tpSupportStatusHistory> tpSupportStatusHistory { get; set; }
        public DbSet<tpTransferPlanATAttribute> tpTransferPlanATAttribute { get; set; }
        public DbSet<tpTransferPlanITAttribute> tpTransferPlanITAttribute { get; set; }
        public DbSet<tpTsmCashRegisterInfo> tpTsmCashRegisterInfo { get; set; }
        public DbSet<tpVehicleLoadingDriver> tpVehicleLoadingDriver { get; set; }
        public DbSet<tpVehicleLoadingLineDeliveryStatus> tpVehicleLoadingLineDeliveryStatus { get; set; }
        public DbSet<tpVehicleLoadingRoundsman> tpVehicleLoadingRoundsman { get; set; }
        public DbSet<tpVirementATAttribute> tpVirementATAttribute { get; set; }
        public DbSet<tpVirementFTAttribute> tpVirementFTAttribute { get; set; }

        // Transaction Tables
        public DbSet<trAdjustCostBankLine> trAdjustCostBankLine { get; set; }
        public DbSet<trAdjustCostExpenseInvoiceLine> trAdjustCostExpenseInvoiceLine { get; set; }
        public DbSet<trAdjustCostExpenseSlipLine> trAdjustCostExpenseSlipLine { get; set; }
        public DbSet<trAdjustCostHeader> trAdjustCostHeader { get; set; }
        public DbSet<trAdjustCostInner> trAdjustCostInner { get; set; }
        public DbSet<trAdjustCostInnerLine> trAdjustCostInnerLine { get; set; }
        public DbSet<trAdjustCostInventory> trAdjustCostInventory { get; set; }
        public DbSet<trAdjustCostInventoryLine> trAdjustCostInventoryLine { get; set; }
        public DbSet<trAdjustCostInvoice> trAdjustCostInvoice { get; set; }
        public DbSet<trAdjustCostInvoiceLine> trAdjustCostInvoiceLine { get; set; }
        public DbSet<trAdjustCostOrder> trAdjustCostOrder { get; set; }
        public DbSet<trAdjustCostOrderLine> trAdjustCostOrderLine { get; set; }
        public DbSet<trAgentContractDeservedLine> trAgentContractDeservedLine { get; set; }
        public DbSet<trAgentContractHeader> trAgentContractHeader { get; set; }
        public DbSet<trAgentContractPeriodicalLine> trAgentContractPeriodicalLine { get; set; }
        public DbSet<trAgentContractSpecialLine> trAgentContractSpecialLine { get; set; }
        public DbSet<trAgentContractStandartLine> trAgentContractStandartLine { get; set; }
        public DbSet<trAgentContractVehicle> trAgentContractVehicle { get; set; }
        public DbSet<trAgentContractVisitFrequencyLine> trAgentContractVisitFrequencyLine { get; set; }
        public DbSet<trAgentPerformanceBonusHeader> trAgentPerformanceBonusHeader { get; set; }
        public DbSet<trAgentPerformanceBonusLine> trAgentPerformanceBonusLine { get; set; }
        public DbSet<trAgentReservationHeader> trAgentReservationHeader { get; set; }
        public DbSet<trAgentReservationSalesPerson> trAgentReservationSalesPerson { get; set; }
        public DbSet<trAgentReservationVehicleDetail> trAgentReservationVehicleDetail { get; set; }
        public DbSet<trAllocation> trAllocation { get; set; }
        public DbSet<trAllocationChannel> trAllocationChannel { get; set; }
        public DbSet<trAllocationData_DefR1> trAllocationData_DefR1 { get; set; }
        public DbSet<trAllocationData_DefR2> trAllocationData_DefR2 { get; set; }
        public DbSet<trAllocationData_M> trAllocationData_M { get; set; }
        public DbSet<trAllocationParameterValue> trAllocationParameterValue { get; set; }
        public DbSet<trAllocationProduct> trAllocationProduct { get; set; }
        public DbSet<trAllocationProductQty> trAllocationProductQty { get; set; }
        public DbSet<trBadDebtLetter> trBadDebtLetter { get; set; }
        public DbSet<trBadDebtLetterPrint> trBadDebtLetterPrint { get; set; }
        public DbSet<trBadDebtTransAddExpenseDebits> trBadDebtTransAddExpenseDebits { get; set; }
        public DbSet<trBadDebtTransHeader> trBadDebtTransHeader { get; set; }
        public DbSet<trBadDebtTransLine> trBadDebtTransLine { get; set; }
        public DbSet<trBadDebtTransLineAddExpense> trBadDebtTransLineAddExpense { get; set; }
        public DbSet<trBadDebtTransLineInstalment> trBadDebtTransLineInstalment { get; set; }
        public DbSet<trBadDebtTransLineResult> trBadDebtTransLineResult { get; set; }
        public DbSet<trBankCreditHeader> trBankCreditHeader { get; set; }
        public DbSet<trBankCreditLine> trBankCreditLine { get; set; }
        public DbSet<trBankCreditLineCurrency> trBankCreditLineCurrency { get; set; }
        public DbSet<trBankCreditPaymentPlan> trBankCreditPaymentPlan { get; set; }
        public DbSet<trBankHeader> trBankHeader { get; set; }
        public DbSet<trBankLine> trBankLine { get; set; }
        public DbSet<trBankLineAdditionalCharge> trBankLineAdditionalCharge { get; set; }
        public DbSet<trBankLineCostCenterRates> trBankLineCostCenterRates { get; set; }
        public DbSet<trBankLineCurrency> trBankLineCurrency { get; set; }
        public DbSet<trBankPaymentInstructionHeader> trBankPaymentInstructionHeader { get; set; }
        public DbSet<trBankPaymentInstructionLine> trBankPaymentInstructionLine { get; set; }
        public DbSet<trBankPaymentListHeader> trBankPaymentListHeader { get; set; }
        public DbSet<trBankPaymentListLine> trBankPaymentListLine { get; set; }
        public DbSet<trBudget> trBudget { get; set; }
        public DbSet<trCashHeader> trCashHeader { get; set; }
        public DbSet<trCashLine> trCashLine { get; set; }
        public DbSet<trCashLineCostCenterRates> trCashLineCostCenterRates { get; set; }
        public DbSet<trCashLineCurrency> trCashLineCurrency { get; set; }
        public DbSet<trChequeHeader> trChequeHeader { get; set; }
        public DbSet<trChequeLine> trChequeLine { get; set; }
        public DbSet<trChequeLineCurrency> trChequeLineCurrency { get; set; }
        public DbSet<trContract> trContract { get; set; }
        public DbSet<trContractProduct> trContractProduct { get; set; }
        public DbSet<trCostCenterDistributions> trCostCenterDistributions { get; set; }
        public DbSet<trCostOfGoodsSoldHeader> trCostOfGoodsSoldHeader { get; set; }
        public DbSet<trCostOfGoodsSoldLine> trCostOfGoodsSoldLine { get; set; }
        public DbSet<trCountrySpecialDay> trCountrySpecialDay { get; set; }
        public DbSet<trCreditCardPaymentHeader> trCreditCardPaymentHeader { get; set; }
        public DbSet<trCreditCardPaymentLine> trCreditCardPaymentLine { get; set; }
        public DbSet<trCreditCardPaymentLineCurrency> trCreditCardPaymentLineCurrency { get; set; }
        public DbSet<trCurrAccBook> trCurrAccBook { get; set; }
        public DbSet<trCurrAccBookCurrency> trCurrAccBookCurrency { get; set; }
        public DbSet<trCurrAccReconciliationEMailNotification> trCurrAccReconciliationEMailNotification { get; set; }
        public DbSet<trCurrAccReconciliationReport> trCurrAccReconciliationReport { get; set; }
        public DbSet<trCurrAccReconciliationReportConfirmation> trCurrAccReconciliationReportConfirmation { get; set; }
        public DbSet<trDebitHeader> trDebitHeader { get; set; }
        public DbSet<trDebitLine> trDebitLine { get; set; }
        public DbSet<trDebitLineCurrency> trDebitLineCurrency { get; set; }
        public DbSet<trDepartmentReceiptHeader> trDepartmentReceiptHeader { get; set; }
        public DbSet<trDepartmentReceiptLine> trDepartmentReceiptLine { get; set; }
        public DbSet<trDispOrderHeader> trDispOrderHeader { get; set; }
        public DbSet<trDispOrderLine> trDispOrderLine { get; set; }
        public DbSet<trEmployeeDebit> trEmployeeDebit { get; set; }
        public DbSet<trEmployeeDebitCurrency> trEmployeeDebitCurrency { get; set; }
        public DbSet<trEndOfPeriodInventory> trEndOfPeriodInventory { get; set; }
        public DbSet<trExchangeRateHeader> trExchangeRateHeader { get; set; }
        public DbSet<trExchangeRateLine> trExchangeRateLine { get; set; }
        public DbSet<trExpenseAccrualHeader> trExpenseAccrualHeader { get; set; }
        public DbSet<trExpenseAccrualInflationAdjustmentLine> trExpenseAccrualInflationAdjustmentLine { get; set; }
        public DbSet<trExpenseAccrualLine> trExpenseAccrualLine { get; set; }
        public DbSet<trExpenseAccrualLineCostCenterRates> trExpenseAccrualLineCostCenterRates { get; set; }
        public DbSet<trExpenseAccrualLineCurrency> trExpenseAccrualLineCurrency { get; set; }
        public DbSet<trExpenseSlipHeader> trExpenseSlipHeader { get; set; }
        public DbSet<trExpenseSlipLine> trExpenseSlipLine { get; set; }
        public DbSet<trExpenseSlipLineCostCenterRates> trExpenseSlipLineCostCenterRates { get; set; }
        public DbSet<trExpenseSlipLineCurrency> trExpenseSlipLineCurrency { get; set; }
        public DbSet<trFixedAssetBookHeader> trFixedAssetBookHeader { get; set; }
        public DbSet<trFixedAssetBookLine> trFixedAssetBookLine { get; set; }
        public DbSet<trFixedAssetBookLinePeriodDepreciationExpenseDetail> trFixedAssetBookLinePeriodDepreciationExpenseDetail { get; set; }
        public DbSet<trForthcomingItems> trForthcomingItems { get; set; }
        public DbSet<trForthcomingOrders> trForthcomingOrders { get; set; }
        public DbSet<trGiftCardPaymentHeader> trGiftCardPaymentHeader { get; set; }
        public DbSet<trGiftCardPaymentLine> trGiftCardPaymentLine { get; set; }
        public DbSet<trGiftCardPaymentLineCurrency> trGiftCardPaymentLineCurrency { get; set; }
        public DbSet<trIncentiveHeader> trIncentiveHeader { get; set; }
        public DbSet<trIncentiveLine> trIncentiveLine { get; set; }
        public DbSet<trInnerHeader> trInnerHeader { get; set; }
        public DbSet<trInnerLine> trInnerLine { get; set; }
        public DbSet<trInnerLineBOM> trInnerLineBOM { get; set; }
        public DbSet<trInnerLineCostCenterRates> trInnerLineCostCenterRates { get; set; }
        public DbSet<trInnerLineGiftCard> trInnerLineGiftCard { get; set; }
        public DbSet<trInnerLineInventoryTransfer> trInnerLineInventoryTransfer { get; set; }
        public DbSet<trInnerLineSum> trInnerLineSum { get; set; }
        public DbSet<trInnerLineSumDetail> trInnerLineSumDetail { get; set; }
        public DbSet<trInnerOrderHeader> trInnerOrderHeader { get; set; }
        public DbSet<trInnerOrderLine> trInnerOrderLine { get; set; }
        public DbSet<trInnerOrderLineSum> trInnerOrderLineSum { get; set; }
        public DbSet<trInnerOrderLineSumDetail> trInnerOrderLineSumDetail { get; set; }
        public DbSet<trInvoiceHeader> trInvoiceHeader { get; set; }
        public DbSet<trInvoiceLine> trInvoiceLine { get; set; }
        public DbSet<trInvoiceLineBOM> trInvoiceLineBOM { get; set; }
        public DbSet<trInvoiceLineCostCenterRates> trInvoiceLineCostCenterRates { get; set; }
        public DbSet<trInvoiceLineCurrency> trInvoiceLineCurrency { get; set; }
        public DbSet<trInvoiceLineGiftCard> trInvoiceLineGiftCard { get; set; }
        public DbSet<trInvoiceLineLinkedProduct> trInvoiceLineLinkedProduct { get; set; }
        public DbSet<trInvoiceLineReportedSales> trInvoiceLineReportedSales { get; set; }
        public DbSet<trInvoiceLineSubsequentDeliveryOrders> trInvoiceLineSubsequentDeliveryOrders { get; set; }
        public DbSet<trInvoiceLineSum> trInvoiceLineSum { get; set; }
        public DbSet<trInvoiceLineSumDetail> trInvoiceLineSumDetail { get; set; }
        public DbSet<trItemTestHeader> trItemTestHeader { get; set; }
        public DbSet<trItemTestLine> trItemTestLine { get; set; }
        public DbSet<trJournalHeader> trJournalHeader { get; set; }
        public DbSet<trJournalInflationAdjustmentHeader> trJournalInflationAdjustmentHeader { get; set; }
        public DbSet<trJournalInflationAdjustmentLine> trJournalInflationAdjustmentLine { get; set; }
        public DbSet<trJournalLedgerEntryNumber> trJournalLedgerEntryNumber { get; set; }
        public DbSet<trJournalLine> trJournalLine { get; set; }
        public DbSet<trJournalLineCostCenterRates> trJournalLineCostCenterRates { get; set; }
        public DbSet<trJournalLineCurrency> trJournalLineCurrency { get; set; }
        public DbSet<trMessageBox> trMessageBox { get; set; }
        public DbSet<trOrderAdvancePayments> trOrderAdvancePayments { get; set; }
        public DbSet<trOrderAsnHeader> trOrderAsnHeader { get; set; }
        public DbSet<trOrderAsnLine> trOrderAsnLine { get; set; }
        public DbSet<trOrderAsnLineSum> trOrderAsnLineSum { get; set; }
        public DbSet<trOrderAsnLineSumDetail> trOrderAsnLineSumDetail { get; set; }
        public DbSet<trOrderAuditorSurvey> trOrderAuditorSurvey { get; set; }
        public DbSet<trOrderHeader> trOrderHeader { get; set; }
        public DbSet<trOrderLine> trOrderLine { get; set; }
        public DbSet<trOrderLineBOM> trOrderLineBOM { get; set; }
        public DbSet<trOrderLineCurrency> trOrderLineCurrency { get; set; }
        public DbSet<trOrderLineLinkedProduct> trOrderLineLinkedProduct { get; set; }
        public DbSet<trOrderLineSum> trOrderLineSum { get; set; }
        public DbSet<trOrderLineSumDetail> trOrderLineSumDetail { get; set; }
        public DbSet<trOrderOpticalProduct> trOrderOpticalProduct { get; set; }
        public DbSet<trOrderOpticalProductLine> trOrderOpticalProductLine { get; set; }
        public DbSet<trOrderPaymentPlan> trOrderPaymentPlan { get; set; }
        public DbSet<trOrderSurvey> trOrderSurvey { get; set; }
        public DbSet<trOtherPaymentHeader> trOtherPaymentHeader { get; set; }
        public DbSet<trOtherPaymentLine> trOtherPaymentLine { get; set; }
        public DbSet<trOtherPaymentLineCurrency> trOtherPaymentLineCurrency { get; set; }
        public DbSet<trPaymentHeader> trPaymentHeader { get; set; }
        public DbSet<trPaymentLine> trPaymentLine { get; set; }
        public DbSet<trPaymentLineCurrency> trPaymentLineCurrency { get; set; }
        public DbSet<trPayrollHeader> trPayrollHeader { get; set; }
        public DbSet<trPayrollLine> trPayrollLine { get; set; }
        public DbSet<trPayrollLineDeduction> trPayrollLineDeduction { get; set; }
        public DbSet<trPayrollLineGarnishment> trPayrollLineGarnishment { get; set; }
        public DbSet<trPayrollLineTally> trPayrollLineTally { get; set; }
        public DbSet<trPayrollTerminationSeveranceDetail> trPayrollTerminationSeveranceDetail { get; set; }
        public DbSet<trPickingHeader> trPickingHeader { get; set; }
        public DbSet<trPickingLine> trPickingLine { get; set; }
        public DbSet<trPriceListHeader> trPriceListHeader { get; set; }
        public DbSet<trPriceListLine> trPriceListLine { get; set; }
        public DbSet<trProposalHeader> trProposalHeader { get; set; }
        public DbSet<trProposalLine> trProposalLine { get; set; }
        public DbSet<trProposalLineCurrency> trProposalLineCurrency { get; set; }
        public DbSet<trProposalLineSum> trProposalLineSum { get; set; }
        public DbSet<trProposalLineSumDetail> trProposalLineSumDetail { get; set; }
        public DbSet<trPurchaseRequisitionConfirmationEMailNotification> trPurchaseRequisitionConfirmationEMailNotification { get; set; }
        public DbSet<trPurchaseRequisitionHeader> trPurchaseRequisitionHeader { get; set; }
        public DbSet<trPurchaseRequisitionLine> trPurchaseRequisitionLine { get; set; }
        public DbSet<trPurchaseRequisitionProposalConfirmationEMailNotification> trPurchaseRequisitionProposalConfirmationEMailNotification { get; set; }
        public DbSet<trPurchaseRequisitionProposalConfirmationEMailNotificationDetail> trPurchaseRequisitionProposalConfirmationEMailNotificationDetail { get; set; }
        public DbSet<trReportedSaleHeader> trReportedSaleHeader { get; set; }
        public DbSet<trReportedSaleLine> trReportedSaleLine { get; set; }
        public DbSet<trReserveHeader> trReserveHeader { get; set; }
        public DbSet<trReserveLine> trReserveLine { get; set; }
        public DbSet<trReserveTransfer> trReserveTransfer { get; set; }
        public DbSet<trReturnedForthcomingItems> trReturnedForthcomingItems { get; set; }
        public DbSet<trSalesPlan> trSalesPlan { get; set; }
        public DbSet<trSalesPlanChannel> trSalesPlanChannel { get; set; }
        public DbSet<trSalesPlanProduct> trSalesPlanProduct { get; set; }
        public DbSet<trSalesPlanProductQty> trSalesPlanProductQty { get; set; }
        public DbSet<trShipmentHeader> trShipmentHeader { get; set; }
        public DbSet<trShipmentLine> trShipmentLine { get; set; }
        public DbSet<trShipmentLineBOM> trShipmentLineBOM { get; set; }
        public DbSet<trShipmentLineGiftCard> trShipmentLineGiftCard { get; set; }
        public DbSet<trShipmentLineSum> trShipmentLineSum { get; set; }
        public DbSet<trShipmentLineSumDetail> trShipmentLineSumDetail { get; set; }
        public DbSet<trSMSPoolHeader> trSMSPoolHeader { get; set; }
        public DbSet<trSMSPoolLine> trSMSPoolLine { get; set; }
        public DbSet<trSMSPoolMessage> trSMSPoolMessage { get; set; }
        public DbSet<trStock> trStock { get; set; }
        public DbSet<trStoreVisitors> trStoreVisitors { get; set; }
        public DbSet<trSupportRequestHeader> trSupportRequestHeader { get; set; }
        public DbSet<trSupportRequestLine> trSupportRequestLine { get; set; }
        public DbSet<trSupportRequestSurvey> trSupportRequestSurvey { get; set; }
        public DbSet<trSurveyAnswerHeader> trSurveyAnswerHeader { get; set; }
        public DbSet<trSurveyAnswerLine> trSurveyAnswerLine { get; set; }
        public DbSet<trTaxIncurredHeader> trTaxIncurredHeader { get; set; }
        public DbSet<trTaxIncurredLine> trTaxIncurredLine { get; set; }
        public DbSet<trTFRSInvoiceAdjustment> trTFRSInvoiceAdjustment { get; set; }
        public DbSet<trTransferPlan> trTransferPlan { get; set; }
        public DbSet<trTransferPlanChannel> trTransferPlanChannel { get; set; }
        public DbSet<trTransferPlanData_DefT1> trTransferPlanData_DefT1 { get; set; }
        public DbSet<trTransferPlanData_DefT2> trTransferPlanData_DefT2 { get; set; }
        public DbSet<trTransferPlanData_DefT3> trTransferPlanData_DefT3 { get; set; }
        public DbSet<trTransferPlanData_ITR> trTransferPlanData_ITR { get; set; }
        public DbSet<trTransferPlanParameterValue> trTransferPlanParameterValue { get; set; }
        public DbSet<trTransferPlanProduct> trTransferPlanProduct { get; set; }
        public DbSet<trTransferPlanProductQty> trTransferPlanProductQty { get; set; }
        public DbSet<trVehicleLoadingHeader> trVehicleLoadingHeader { get; set; }
        public DbSet<trVehicleLoadingLine> trVehicleLoadingLine { get; set; }
        public DbSet<trVehicleUnLoadingHeader> trVehicleUnLoadingHeader { get; set; }
        public DbSet<trVehicleUnLoadingLine> trVehicleUnLoadingLine { get; set; }
        public DbSet<trVendorPriceListHeader> trVendorPriceListHeader { get; set; }
        public DbSet<trVendorPriceListLine> trVendorPriceListLine { get; set; }
        public DbSet<trVirementHeader> trVirementHeader { get; set; }
        public DbSet<trVirementLine> trVirementLine { get; set; }

        // Other Tables
        public DbSet<xlIlceler> xlIlceler { get; set; }
        public DbSet<xlIller> xlIller { get; set; }
        public DbSet<xlUrun> xlUrun { get; set; }
        public DbSet<xlVergiDaireleri> xlVergiDaireleri { get; set; }

        // Other Tables
        public DbSet<zpBasefyCheckOutCancellation> zpBasefyCheckOutCancellation { get; set; }
        public DbSet<zpBasefyCheckOutNew> zpBasefyCheckOutNew { get; set; }
        public DbSet<zpBasefyCheckOutRefundOrder> zpBasefyCheckOutRefundOrder { get; set; }
        public DbSet<zpBasefyCheckOutUsePoint> zpBasefyCheckOutUsePoint { get; set; }
        public DbSet<zpBasefyUserSearch> zpBasefyUserSearch { get; set; }
        public DbSet<zpBulutTahsilatCreditCardPaymentEventLog> zpBulutTahsilatCreditCardPaymentEventLog { get; set; }
        public DbSet<zpBulutTahsilatCreditCardVPOSCancelPaymentList> zpBulutTahsilatCreditCardVPOSCancelPaymentList { get; set; }
        public DbSet<zpBulutTahsilatCreditCardVPOSPaymentList> zpBulutTahsilatCreditCardVPOSPaymentList { get; set; }
        public DbSet<zpBulutTahsilatCreditCardVPOSReturnLog> zpBulutTahsilatCreditCardVPOSReturnLog { get; set; }
        public DbSet<zpBulutTahsilatCustomerOnlinePayment> zpBulutTahsilatCustomerOnlinePayment { get; set; }
        public DbSet<zpBulutTahsilatDistanceSalePayment> zpBulutTahsilatDistanceSalePayment { get; set; }
        public DbSet<zpBulutTahsilatRetailCustomerBankPaymentList> zpBulutTahsilatRetailCustomerBankPaymentList { get; set; }
        public DbSet<zpChippinProcessedPayment> zpChippinProcessedPayment { get; set; }
        public DbSet<zpChippinServiceLog> zpChippinServiceLog { get; set; }
        public DbSet<zpCOMOCancelPayment> zpCOMOCancelPayment { get; set; }
        public DbSet<zpCOMOCancelPurchase> zpCOMOCancelPurchase { get; set; }
        public DbSet<zpCOMODoPayment> zpCOMODoPayment { get; set; }
        public DbSet<zpCOMOGetBenefits> zpCOMOGetBenefits { get; set; }
        public DbSet<zpCOMOGetMemberDetails> zpCOMOGetMemberDetails { get; set; }
        public DbSet<zpCOMOSubmitPurchase> zpCOMOSubmitPurchase { get; set; }
        public DbSet<zpCOMOVoidPurchase> zpCOMOVoidPurchase { get; set; }
        public DbSet<zpCustomsShoppingHistory> zpCustomsShoppingHistory { get; set; }
        public DbSet<zpDmsCancelByProduct> zpDmsCancelByProduct { get; set; }
        public DbSet<zpDmsCancelByProductItem> zpDmsCancelByProductItem { get; set; }
        public DbSet<zpDmsCancelByProductPayment> zpDmsCancelByProductPayment { get; set; }
        public DbSet<zpDmsGetCustomerByCode> zpDmsGetCustomerByCode { get; set; }
        public DbSet<zpDmsGetCustomerByCodeBenefits> zpDmsGetCustomerByCodeBenefits { get; set; }
        public DbSet<zpDmsRegisterPaidCheck> zpDmsRegisterPaidCheck { get; set; }
        public DbSet<zpDmsRegisterPaidCheckItem> zpDmsRegisterPaidCheckItem { get; set; }
        public DbSet<zpDmsRegisterPaidCheckItemCampaign> zpDmsRegisterPaidCheckItemCampaign { get; set; }
        public DbSet<zpDmsRegisterPaidCheckItemProduct> zpDmsRegisterPaidCheckItemProduct { get; set; }
        public DbSet<zpDmsRegisterPaidCheckPayment> zpDmsRegisterPaidCheckPayment { get; set; }
        public DbSet<zpFastPayProcessedPayment> zpFastPayProcessedPayment { get; set; }
        public DbSet<zpFinanceCompanyServiceLog> zpFinanceCompanyServiceLog { get; set; }
        public DbSet<zpGetirCarsiOrderInfo> zpGetirCarsiOrderInfo { get; set; }
        public DbSet<zpGetirCarsiServiceLog> zpGetirCarsiServiceLog { get; set; }
        public DbSet<zpGlobalBlueConfiguration> zpGlobalBlueConfiguration { get; set; }
        public DbSet<zpGlobalBlueLastDocument> zpGlobalBlueLastDocument { get; set; }
        public DbSet<zpGlobalBlueServiceLog> zpGlobalBlueServiceLog { get; set; }
        public DbSet<zpGlobalBlueTransaction> zpGlobalBlueTransaction { get; set; }
        public DbSet<zpGlobalBlueWebServiceLog> zpGlobalBlueWebServiceLog { get; set; }
        public DbSet<zpHopiCancelCoinTransaction> zpHopiCancelCoinTransaction { get; set; }
        public DbSet<zpHopiCancelReturnTransaction> zpHopiCancelReturnTransaction { get; set; }
        public DbSet<zpHopiCompleteCoinTransaction> zpHopiCompleteCoinTransaction { get; set; }
        public DbSet<zpHopiCompleteReturnTransaction> zpHopiCompleteReturnTransaction { get; set; }
        public DbSet<zpHopiGetHopiUserInfo> zpHopiGetHopiUserInfo { get; set; }
        public DbSet<zpHopiGetHopiUserInfoCampaignSummary> zpHopiGetHopiUserInfoCampaignSummary { get; set; }
        public DbSet<zpHopiNotifyCheckOut> zpHopiNotifyCheckOut { get; set; }
        public DbSet<zpHopiNotifyCheckOutCampaignFreePaymentDetail> zpHopiNotifyCheckOutCampaignFreePaymentDetail { get; set; }
        public DbSet<zpHopiNotifyCheckOutPaymentDetail> zpHopiNotifyCheckOutPaymentDetail { get; set; }
        public DbSet<zpHopiNotifyCheckOutSubTotalDetail> zpHopiNotifyCheckOutSubTotalDetail { get; set; }
        public DbSet<zpHopiNotifyCheckOutTransactionInfo> zpHopiNotifyCheckOutTransactionInfo { get; set; }
        public DbSet<zpHopiNotifyCheckOutUsedCampaignDetail> zpHopiNotifyCheckOutUsedCampaignDetail { get; set; }
        public DbSet<zpHopiNotifyCheckOutUsedCoinDetail> zpHopiNotifyCheckOutUsedCoinDetail { get; set; }
        public DbSet<zpHopiPayProcessedPayment> zpHopiPayProcessedPayment { get; set; }
        public DbSet<zpHopiPayServiceLog> zpHopiPayServiceLog { get; set; }
        public DbSet<zpHopiRefundCoin> zpHopiRefundCoin { get; set; }
        public DbSet<zpHopiServiceLog> zpHopiServiceLog { get; set; }
        public DbSet<zpHopiStartCoinTransaction> zpHopiStartCoinTransaction { get; set; }
        public DbSet<zpHopiStartReturnTransaction> zpHopiStartReturnTransaction { get; set; }
        public DbSet<zpHopiStartReturnTransactionReturnCampaignDetail> zpHopiStartReturnTransactionReturnCampaignDetail { get; set; }
        public DbSet<zpHopiStartReturnTransactionReturnTransactionInfo> zpHopiStartReturnTransactionReturnTransactionInfo { get; set; }
        public DbSet<zpHopiUsedCampaignDetailAmountDetail> zpHopiUsedCampaignDetailAmountDetail { get; set; }
        public DbSet<zpHopiUsedCampaignDetailBenefitDetail> zpHopiUsedCampaignDetailBenefitDetail { get; set; }
        public DbSet<zpIyzicoProcessedPayment> zpIyzicoProcessedPayment { get; set; }
        public DbSet<zpJoyRefundTransaction> zpJoyRefundTransaction { get; set; }
        public DbSet<zpMacellanSuperappTransactionInfo> zpMacellanSuperappTransactionInfo { get; set; }
        public DbSet<zpMobilDevWebHookService> zpMobilDevWebHookService { get; set; }
        public DbSet<zpMobilDevWebHookServiceLog> zpMobilDevWebHookServiceLog { get; set; }
        public DbSet<zpN2AnimaProcessedPayment> zpN2AnimaProcessedPayment { get; set; }
        public DbSet<zpOnlineBankCreditCardPaymentTransaction> zpOnlineBankCreditCardPaymentTransaction { get; set; }
        public DbSet<zpOnlineBankServiceErrorLog> zpOnlineBankServiceErrorLog { get; set; }
        public DbSet<zpOnlineBankServiceFinrotaErrorLog> zpOnlineBankServiceFinrotaErrorLog { get; set; }
        public DbSet<zpOnlineBankServiceFinrotaLog> zpOnlineBankServiceFinrotaLog { get; set; }
        public DbSet<zpOnlineBankServiceLog> zpOnlineBankServiceLog { get; set; }
        public DbSet<zpOnlineBankTransaction> zpOnlineBankTransaction { get; set; }
        public DbSet<zpOnlineBankTransactionFinrota> zpOnlineBankTransactionFinrota { get; set; }
        public DbSet<zpOnlineDBSWebServiceLog> zpOnlineDBSWebServiceLog { get; set; }
        public DbSet<zpParoAlisverisBaslat> zpParoAlisverisBaslat { get; set; }
        public DbSet<zpParoAlisverisBitti> zpParoAlisverisBitti { get; set; }
        public DbSet<zpParoAlisverisIptal> zpParoAlisverisIptal { get; set; }
        public DbSet<zpParoDuyuru> zpParoDuyuru { get; set; }
        public DbSet<zpParoIndirim> zpParoIndirim { get; set; }
        public DbSet<zpParoPuan> zpParoPuan { get; set; }
        public DbSet<zpParoPuanIade> zpParoPuanIade { get; set; }
        public DbSet<zpParoUyeKontrol> zpParoUyeKontrol { get; set; }
        public DbSet<zpPaynetCreditCardPaymentEventLog> zpPaynetCreditCardPaymentEventLog { get; set; }
        public DbSet<zpPaynetCreditCardPaymentLine> zpPaynetCreditCardPaymentLine { get; set; }
        public DbSet<zpPaynetDistanceSalePayment> zpPaynetDistanceSalePayment { get; set; }
        public DbSet<zpPaynetDistanceSalePaymentURL> zpPaynetDistanceSalePaymentURL { get; set; }
        public DbSet<zpPaynetProcessedPayment> zpPaynetProcessedPayment { get; set; }
        public DbSet<zpTaxFreePointServiceLog> zpTaxFreePointServiceLog { get; set; }
        public DbSet<zpTaxFreeZoneTransaction> zpTaxFreeZoneTransaction { get; set; }
        public DbSet<zpTuratelWebHookServiceLog> zpTuratelWebHookServiceLog { get; set; }
        public DbSet<zpUmicoTransaction> zpUmicoTransaction { get; set; }
        public DbSet<zpUTSForthcomingShipment> zpUTSForthcomingShipment { get; set; }
        public DbSet<zpUTSWebServisHareketBildirim> zpUTSWebServisHareketBildirim { get; set; }
        public DbSet<zpUTSWebServisIptalBildirim> zpUTSWebServisIptalBildirim { get; set; }
        public DbSet<zpUTSWebServisResponseLog> zpUTSWebServisResponseLog { get; set; }
        public DbSet<zpVodafoneAcService> zpVodafoneAcService { get; set; }
        public DbSet<zpWeArePlanetTaxFreeServiceLog> zpWeArePlanetTaxFreeServiceLog { get; set; }
        public DbSet<zpWeArePlanetTaxFreeTransaction> zpWeArePlanetTaxFreeTransaction { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

 // Configure relationships for dfAirportExchangeRateWidgetParameters
            modelBuilder.Entity<dfAirportExchangeRateWidgetParameters>(entity =>
            {
                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAirportExchangeRateWidgetParameters_cdExchangeType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.BaseCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAirportExchangeRateWidgetParameters_cdCurrency_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAirportExchangeRateWidgetParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAirportExchangeRateWidgetParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAirportExchangeRateWidgetParameters_cdPOSTerminal_FK");

            });

            // Configure relationships for dfAttTypesForMarketPlaceCategory
            modelBuilder.Entity<dfAttTypesForMarketPlaceCategory>(entity =>
            {
                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAttTypesForMarketPlaceCategory_bsMarketPlace_FK");

            });

            // Configure relationships for dfAvailableTaxTypesOnPos
            modelBuilder.Entity<dfAvailableTaxTypesOnPos>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAvailableTaxTypesOnPos_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAvailableTaxTypesOnPos_cdCurrAcc_FK");

                entity.HasOne(d => d.bsTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.TaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfAvailableTaxTypesOnPos_bsTaxType_FK");

            });

            // Configure relationships for dfBankCreditOfficialForm
            modelBuilder.Entity<dfBankCreditOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankCreditOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfBankDefATAttribute
            modelBuilder.Entity<dfBankDefATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankDefATAttribute_cdCompany_FK");

                entity.HasOne(d => d.bsBankTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BankTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankDefATAttribute_bsBankTransType_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankDefATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for dfBankOfficialForm
            modelBuilder.Entity<dfBankOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsBankTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BankTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankOfficialForm_bsBankTransType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfBankPaymentInstructionOfficialForm
            modelBuilder.Entity<dfBankPaymentInstructionOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPaymentInstructionOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfBankPaymentListOfficialForm
            modelBuilder.Entity<dfBankPaymentListOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPaymentListOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfBankPOSReturnsRule
            modelBuilder.Entity<dfBankPOSReturnsRule>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPOSReturnsRule_cdBank_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPOSReturnsRule_cdCompany_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPOSReturnsRule_cdCreditCardType_FK");

            });

            // Configure relationships for dfBankPOSReturnsTermRule
            modelBuilder.Entity<dfBankPOSReturnsTermRule>(entity =>
            {
                entity.HasOne(d => d.dfBankPOSReturnsRule)
                    .WithMany()
                    .HasForeignKey(d => d.BankPOSReturnRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBankPOSReturnsTermRule_dfBankPOSReturnsRule_FK");

            });

            // Configure relationships for dfBasefyStore
            modelBuilder.Entity<dfBasefyStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBasefyStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBasefyStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfBulkMailServiceProviderAccount
            modelBuilder.Entity<dfBulkMailServiceProviderAccount>(entity =>
            {
                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulkMailServiceProviderAccount_cdCompanyBrand_FK");

                entity.HasOne(d => d.bsBulkMailServiceProvider)
                    .WithMany()
                    .HasForeignKey(d => d.BulkMailServiceProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulkMailServiceProviderAccount_bsBulkMailServiceProvider_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulkMailServiceProviderAccount_cdCompany_FK");

            });

            // Configure relationships for dfBulutTahsilatVPosCompany
            modelBuilder.Entity<dfBulutTahsilatVPosCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulutTahsilatVPosCompany_cdCompany_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulutTahsilatVPosCompany_cdCreditCardType_FK");

            });

            // Configure relationships for dfBulutTahsilatVPosOffice
            modelBuilder.Entity<dfBulutTahsilatVPosOffice>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulutTahsilatVPosOffice_cdCreditCardType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulutTahsilatVPosOffice_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfBulutTahsilatVPosOffice_cdOffice_FK");

            });

            // Configure relationships for dfCarriageExpenseCodes
            modelBuilder.Entity<dfCarriageExpenseCodes>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCarriageExpenseCodes_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCarriageExpenseCodes_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCarriageExpenseCodes_cdItem_FK");

            });

            // Configure relationships for dfCashDefATAttribute
            modelBuilder.Entity<dfCashDefATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashDefATAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.bsCashTransType)
                    .WithMany()
                    .HasForeignKey(d => d.CashTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashDefATAttribute_bsCashTransType_FK");

            });

            // Configure relationships for dfCashOfficialForm
            modelBuilder.Entity<dfCashOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashOfficialForm_cdOffice_FK");

                entity.HasOne(d => d.bsCashTransType)
                    .WithMany()
                    .HasForeignKey(d => d.CashTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCashOfficialForm_bsCashTransType_FK");

            });

            // Configure relationships for dfChequeDefATAttribute
            modelBuilder.Entity<dfChequeDefATAttribute>(entity =>
            {
                entity.HasOne(d => d.bsChequeType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeDefATAttribute_bsChequeType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeDefATAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeDefATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for dfChequeOfficialForm
            modelBuilder.Entity<dfChequeOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsChequeType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeOfficialForm_bsChequeType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeOfficialForm_cdOffice_FK");

                entity.HasOne(d => d.bsChequeTransType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChequeOfficialForm_bsChequeTransType_FK");

            });

            // Configure relationships for dfChippin
            modelBuilder.Entity<dfChippin>(entity =>
            {
                entity.HasOne(d => d.cdPresentCardType)
                    .WithMany()
                    .HasForeignKey(d => d.PresentCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChippin_cdPresentCardType_FK");

            });

            // Configure relationships for dfChippinPOSTerminal
            modelBuilder.Entity<dfChippinPOSTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChippinPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChippinPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfChippinPOSTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfCommunicationForm
            modelBuilder.Entity<dfCommunicationForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCommunicationForm_cdOffice_FK");

            });

            // Configure relationships for dfCOMOPOSTerminal
            modelBuilder.Entity<dfCOMOPOSTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCOMOPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCOMOPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCOMOPOSTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfCOMOStore
            modelBuilder.Entity<dfCOMOStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCOMOStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCOMOStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfCompanyClosedPeriod
            modelBuilder.Entity<dfCompanyClosedPeriod>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyClosedPeriod_cdCompany_FK");

            });

            // Configure relationships for dfCompanyCostOfGoodsSold
            modelBuilder.Entity<dfCompanyCostOfGoodsSold>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCostOfGoodsSold_cdCompany_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCostOfGoodsSold_bsItemType_FK");

                entity.HasOne(d => d.bsCostingVariantLevel)
                    .WithMany()
                    .HasForeignKey(d => d.CostingVariantLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCostOfGoodsSold_bsCostingVariantLevel_FK");

                entity.HasOne(d => d.bsCostingMethod)
                    .WithMany()
                    .HasForeignKey(d => d.CostingMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCostOfGoodsSold_bsCostingMethod_FK");

                entity.HasOne(d => d.bsCostingLevel)
                    .WithMany()
                    .HasForeignKey(d => d.CostingLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCostOfGoodsSold_bsCostingLevel_FK");

            });

            // Configure relationships for dfCompanyCurrAccSize
            modelBuilder.Entity<dfCompanyCurrAccSize>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCurrAccSize_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyCurrAccSize_bsCurrAccType_FK");

            });

            // Configure relationships for dfCompanyDeductionDefault
            modelBuilder.Entity<dfCompanyDeductionDefault>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDeductionDefault_cdCompany_FK");

                entity.HasOne(d => d.cdDeduction)
                    .WithMany()
                    .HasForeignKey(d => d.DeductionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDeductionDefault_cdDeduction_FK");

            });

            // Configure relationships for dfCompanyDefault
            modelBuilder.Entity<dfCompanyDefault>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdCountry_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdConfirmationFormType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdCompany_FK");

                entity.HasOne(d => d.cdInactivationReason)
                    .WithMany()
                    .HasForeignKey(d => d.InactivationReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdInactivationReason_FK");

                entity.HasOne(d => d.bsBulkMailServiceProvider)
                    .WithMany()
                    .HasForeignKey(d => d.BulkMailServiceProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_bsBulkMailServiceProvider_FK");

                entity.HasOne(d => d.cdFinanceCompanyWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdFinanceCompanyWebService_FK");

                entity.HasOne(d => d.cdFinanceCompanyWebService)
                    .WithMany()
                    .HasForeignKey(d => d.FinanceCompanyWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdFinanceCompanyWebService_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdCity_FK");

                entity.HasOne(d => d.bsMMSBusinessPartner)
                    .WithMany()
                    .HasForeignKey(d => d.MMSBusinessPartnerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_bsMMSBusinessPartner_FK");

                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.PermissionMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdState_FK");

                entity.HasOne(d => d.cdEShipmentWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EShipmentWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEShipmentWebService_FK");

                entity.HasOne(d => d.cdEShipmentWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEShipmentWebService_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdDistrict_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdStreet_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdTaxOffice_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEArchiveWebService_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EArchiveWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEArchiveWebService_FK");

                entity.HasOne(d => d.cdAddressShareCompanyWebService)
                    .WithMany()
                    .HasForeignKey(d => d.AddressShareCompanyWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdAddressShareCompanyWebService_FK");

                entity.HasOne(d => d.cdEMailService)
                    .WithMany()
                    .HasForeignKey(d => d.EMailServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEMailService_FK");

                entity.HasOne(d => d.cdEMailService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdEMailService_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.HRDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDefault_cdJobDepartment_FK");

            });

            // Configure relationships for dfCompanyDigitalMarketingServiceAdress
            modelBuilder.Entity<dfCompanyDigitalMarketingServiceAdress>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDigitalMarketingServiceAdress_cdCompany_FK");

                entity.HasOne(d => d.cdDigitalMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.DigitalMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDigitalMarketingServiceAdress_cdDigitalMarketingService_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDigitalMarketingServiceAdress_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyDigitalMarketingServiceAdress_cdCurrAcc_FK");

            });

            // Configure relationships for dfCompanyEarningsDefault
            modelBuilder.Entity<dfCompanyEarningsDefault>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEarningsDefault_cdCompany_FK");

                entity.HasOne(d => d.cdEarnings)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEarningsDefault_cdEarnings_FK");

            });

            // Configure relationships for dfCompanyEarningsMonthly
            modelBuilder.Entity<dfCompanyEarningsMonthly>(entity =>
            {
                entity.HasOne(d => d.dfCompanyEarningsDefault)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEarningsMonthly_dfCompanyEarningsDefault_FK");

                entity.HasOne(d => d.dfCompanyEarningsDefault)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEarningsMonthly_dfCompanyEarningsDefault_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEarningsMonthly_cdCompany_FK");

            });

            // Configure relationships for dfCompanyEmailDefault
            modelBuilder.Entity<dfCompanyEmailDefault>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEmailDefault_cdCompany_FK");

                entity.HasOne(d => d.bsEmailType)
                    .WithMany()
                    .HasForeignKey(d => d.EMailTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyEmailDefault_bsEmailType_FK");

            });

            // Configure relationships for dfCompanyFolder
            modelBuilder.Entity<dfCompanyFolder>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyFolder_cdCompany_FK");

                entity.HasOne(d => d.bsFolder)
                    .WithMany()
                    .HasForeignKey(d => d.FolderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyFolder_bsFolder_FK");

            });

            // Configure relationships for dfCompanyLockTransaction
            modelBuilder.Entity<dfCompanyLockTransaction>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyLockTransaction_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyLockTransaction_bsApplication_FK");

            });

            // Configure relationships for dfCompanyLoyaltyProgram
            modelBuilder.Entity<dfCompanyLoyaltyProgram>(entity =>
            {
                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyLoyaltyProgram_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyLoyaltyProgram_cdLoyaltyProgram_FK");

            });

            // Configure relationships for dfCompanyMarkup
            modelBuilder.Entity<dfCompanyMarkup>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyMarkup_cdCompany_FK");

                entity.HasOne(d => d.cdDiscountType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyMarkup_cdDiscountType_FK");

            });

            // Configure relationships for dfCompanyPriceGroup
            modelBuilder.Entity<dfCompanyPriceGroup>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyPriceGroup_cdCompany_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyPriceGroup_cdPriceGroup_FK");

            });

            // Configure relationships for dfCompanyProcessLockTransaction
            modelBuilder.Entity<dfCompanyProcessLockTransaction>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyProcessLockTransaction_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyProcessLockTransaction_bsProcess_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCompanyProcessLockTransaction_bsApplication_FK");

            });

            // Configure relationships for dfConsStoreDistributionWarehouse
            modelBuilder.Entity<dfConsStoreDistributionWarehouse>(entity =>
            {
                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfConsStoreDistributionWarehouse_dfConsignmentStore_FK");

                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfConsStoreDistributionWarehouse_dfConsignmentStore_FK");

                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfConsStoreDistributionWarehouse_dfConsignmentStore_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfConsStoreDistributionWarehouse_cdWarehouse_FK");

            });

            // Configure relationships for dfCreditableConfirmation
            modelBuilder.Entity<dfCreditableConfirmation>(entity =>
            {
                entity.HasOne(d => d.cdSurvey)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCreditableConfirmation_cdSurvey_FK");

            });

            // Configure relationships for dfCreditCardPaymentDefATAttribute
            modelBuilder.Entity<dfCreditCardPaymentDefATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCreditCardPaymentDefATAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCreditCardPaymentDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCreditCardPaymentDefATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for dfCreditCardPaymentOfficialForm
            modelBuilder.Entity<dfCreditCardPaymentOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCreditCardPaymentOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfCurrAccProductLotLevels
            modelBuilder.Entity<dfCurrAccProductLotLevels>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCurrAccProductLotLevels_cdCompany_FK");

            });

            // Configure relationships for dfCustomizedDiscountEngineCompany
            modelBuilder.Entity<dfCustomizedDiscountEngineCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCustomizedDiscountEngineCompany_cdCompany_FK");

            });

            // Configure relationships for dfCustomsCompany
            modelBuilder.Entity<dfCustomsCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCustomsCompany_cdCompany_FK");

            });

            // Configure relationships for dfCustomsStore
            modelBuilder.Entity<dfCustomsStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCustomsStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfCustomsStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfDebitOfficialForm
            modelBuilder.Entity<dfDebitOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDebitOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfDepartmentReceiptOfficialForm
            modelBuilder.Entity<dfDepartmentReceiptOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDepartmentReceiptOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfDMSCompany
            modelBuilder.Entity<dfDMSCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSCompany_cdCompany_FK");

            });

            // Configure relationships for dfDMSPOSTerminal
            modelBuilder.Entity<dfDMSPOSTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSPOSTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfDMSStore
            modelBuilder.Entity<dfDMSStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDMSStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfDomesticPPI
            modelBuilder.Entity<dfDomesticPPI>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDomesticPPI_cdCompany_FK");

            });

            // Configure relationships for dfDufryCompany
            modelBuilder.Entity<dfDufryCompany>(entity =>
            {
                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.FTPExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDufryCompany_cdExchangeType_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.FTPExchangeTypeCodeForDomesticStore)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDufryCompany_cdExchangeType_FK");

            });

            // Configure relationships for dfDufryStore
            modelBuilder.Entity<dfDufryStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDufryStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfDufryStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfEArchiveOfficialForm
            modelBuilder.Entity<dfEArchiveOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveOfficialForm_bsProcess_FK");

                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveOfficialForm_bsProcessFlow_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfEArchiveWebServiceParameters
            modelBuilder.Entity<dfEArchiveWebServiceParameters>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveWebServiceParameters_cdCompany_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveWebServiceParameters_cdEArchiveWebService_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EArchiveWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEArchiveWebServiceParameters_cdEArchiveWebService_FK");

            });

            // Configure relationships for dfEInvoiceOfficialForm
            modelBuilder.Entity<dfEInvoiceOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceOfficialForm_bsProcessFlow_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceOfficialForm_bsProcess_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfEInvoiceWebServiceParameters
            modelBuilder.Entity<dfEInvoiceWebServiceParameters>(entity =>
            {
                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceWebServiceParameters_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceWebServiceParameters_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEInvoiceWebServiceParameters_cdCompany_FK");

            });

            // Configure relationships for dfEShipmentOfficialForm
            modelBuilder.Entity<dfEShipmentOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentOfficialForm_bsProcess_FK");

                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentOfficialForm_bsProcessFlow_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfEShipmentWebServiceParameters
            modelBuilder.Entity<dfEShipmentWebServiceParameters>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentWebServiceParameters_cdCompany_FK");

                entity.HasOne(d => d.cdEShipmentWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentWebServiceParameters_cdEShipmentWebService_FK");

                entity.HasOne(d => d.cdEShipmentWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EShipmentWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfEShipmentWebServiceParameters_cdEShipmentWebService_FK");

            });

            // Configure relationships for dfExpenseSlipForm
            modelBuilder.Entity<dfExpenseSlipForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfExpenseSlipForm_cdOffice_FK");

                entity.HasOne(d => d.bsExpenseSlipType)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfExpenseSlipForm_bsExpenseSlipType_FK");

            });

            // Configure relationships for dffastPayCompany
            modelBuilder.Entity<dffastPayCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayCompany_cdCompany_FK");

            });

            // Configure relationships for dffastPayPosTerminal
            modelBuilder.Entity<dffastPayPosTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayPosTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayPosTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayPosTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dffastPayStore
            modelBuilder.Entity<dffastPayStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dffastPayStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfGetirCarsiCompany
            modelBuilder.Entity<dfGetirCarsiCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGetirCarsiCompany_cdCompany_FK");

            });

            // Configure relationships for dfGetirCarsiOrderCancelReasonConvert
            modelBuilder.Entity<dfGetirCarsiOrderCancelReasonConvert>(entity =>
            {
                entity.HasOne(d => d.cdOrderCancelReason)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGetirCarsiOrderCancelReasonConvert_cdOrderCancelReason_FK");

            });

            // Configure relationships for dfGetirCarsiStore
            modelBuilder.Entity<dfGetirCarsiStore>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGetirCarsiStore_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGetirCarsiStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGetirCarsiStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfGLClosedYear
            modelBuilder.Entity<dfGLClosedYear>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGLClosedYear_cdCompany_FK");

            });

            // Configure relationships for dfGlobalBlueCompany
            modelBuilder.Entity<dfGlobalBlueCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalBlueCompany_cdCompany_FK");

            });

            // Configure relationships for dfGlobalDataMatrix
            modelBuilder.Entity<dfGlobalDataMatrix>(entity =>
            {
                entity.HasOne(d => d.dfGlobalDefault)
                    .WithMany()
                    .HasForeignKey(d => d.GlobalDefaultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDataMatrix_dfGlobalDefault_FK");

            });

            // Configure relationships for dfGlobalDefault
            modelBuilder.Entity<dfGlobalDefault>(entity =>
            {
                entity.HasOne(d => d.bsPolicyCustomerPayment)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyCustomerPayment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyCustomerPayment_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdExchangeType_FK");

                entity.HasOne(d => d.cdDiscountPointType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountPointTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdDiscountPointType_FK");

                entity.HasOne(d => d.bsPolicyCustomerSharing)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyReatilCustomerShopping)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyCustomerSharing_FK");

                entity.HasOne(d => d.bsPolicyCustomerSharing)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyCustomerShopping)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyCustomerSharing_FK");

                entity.HasOne(d => d.bsPolicyCustomerSharing)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyEmployeeShopping)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyCustomerSharing_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdCurrency_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdDataLanguage_FK");

                entity.HasOne(d => d.cdIndustry)
                    .WithMany()
                    .HasForeignKey(d => d.IndustryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdIndustry_FK");

                entity.HasOne(d => d.bsPolicyCustomerEdit)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyRetailCustomerEdit)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyCustomerEdit_FK");

                entity.HasOne(d => d.bsItemDimType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDimTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsItemDimType_FK");

                entity.HasOne(d => d.bsPolicyVendorSharing)
                    .WithMany()
                    .HasForeignKey(d => d.PolicyVendorSharing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_bsPolicyVendorSharing_FK");

                entity.HasOne(d => d.cdDiscountVoucherType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountVoucherTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdDiscountVoucherType_FK");

                entity.HasOne(d => d.cdDiscountVoucherType)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnDiscountVoucherTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalDefault_cdDiscountVoucherType_FK");

            });

            // Configure relationships for dfGlobalFolder
            modelBuilder.Entity<dfGlobalFolder>(entity =>
            {
                entity.HasOne(d => d.dfGlobalDefault)
                    .WithMany()
                    .HasForeignKey(d => d.GlobalDefaultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalFolder_dfGlobalDefault_FK");

                entity.HasOne(d => d.bsFolder)
                    .WithMany()
                    .HasForeignKey(d => d.FolderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalFolder_bsFolder_FK");

            });

            // Configure relationships for dfGlobalItemSize
            modelBuilder.Entity<dfGlobalItemSize>(entity =>
            {
                entity.HasOne(d => d.dfGlobalDefault)
                    .WithMany()
                    .HasForeignKey(d => d.GlobalDefaultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalItemSize_dfGlobalDefault_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalItemSize_bsItemType_FK");

            });

            // Configure relationships for dfGlobalMernisUser
            modelBuilder.Entity<dfGlobalMernisUser>(entity =>
            {
                entity.HasOne(d => d.dfGlobalDefault)
                    .WithMany()
                    .HasForeignKey(d => d.GlobalDefaultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfGlobalMernisUser_dfGlobalDefault_FK");

            });

            // Configure relationships for dfHopiCompany
            modelBuilder.Entity<dfHopiCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfHopiCompany_cdCompany_FK");

            });

            // Configure relationships for dfHopiStore
            modelBuilder.Entity<dfHopiStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfHopiStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfHopiStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfIGACompany
            modelBuilder.Entity<dfIGACompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIGACompany_cdCompany_FK");

            });

            // Configure relationships for dfIGAPosTerminal
            modelBuilder.Entity<dfIGAPosTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIGAPosTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIGAPosTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIGAPosTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfIncomeTaxRelief
            modelBuilder.Entity<dfIncomeTaxRelief>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIncomeTaxRelief_cdCompany_FK");

                entity.HasOne(d => d.cdEmployeeTaxStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTaxStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIncomeTaxRelief_cdEmployeeTaxStatus_FK");

            });

            // Configure relationships for dfInnerOrderProcessOfficialForm
            modelBuilder.Entity<dfInnerOrderProcessOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInnerOrderProcessOfficialForm_cdOffice_FK");

                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInnerOrderProcessOfficialForm_bsInnerProcess_FK");

            });

            // Configure relationships for dfInnerProcessOfficialForm
            modelBuilder.Entity<dfInnerProcessOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInnerProcessOfficialForm_bsInnerProcess_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInnerProcessOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfInstallmentCountRulesBracket
            modelBuilder.Entity<dfInstallmentCountRulesBracket>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInstallmentCountRulesBracket_cdCompany_FK");

            });

            // Configure relationships for dfInsuaranceExpenseCodes
            modelBuilder.Entity<dfInsuaranceExpenseCodes>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInsuaranceExpenseCodes_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInsuaranceExpenseCodes_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfInsuaranceExpenseCodes_cdItem_FK");

            });

            // Configure relationships for dfItemDimensionNames
            modelBuilder.Entity<dfItemDimensionNames>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfItemDimensionNames_cdDataLanguage_FK");

            });

            // Configure relationships for dfItemTestOfficialForm
            modelBuilder.Entity<dfItemTestOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfItemTestOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfIyzicoCompany
            modelBuilder.Entity<dfIyzicoCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfIyzicoCompany_cdCompany_FK");

            });

            // Configure relationships for dfJournalDefATAttribute
            modelBuilder.Entity<dfJournalDefATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalDefATAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdJournalTypeSub)
                    .WithMany()
                    .HasForeignKey(d => d.JournalTypeSubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalDefATAttribute_cdJournalTypeSub_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalDefATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalDefATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for dfJournalOfficialForm
            modelBuilder.Entity<dfJournalOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdJournalTypeSub)
                    .WithMany()
                    .HasForeignKey(d => d.JournalTypeSubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalOfficialForm_cdJournalTypeSub_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJournalOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfJoyRefundCompany
            modelBuilder.Entity<dfJoyRefundCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJoyRefundCompany_cdCompany_FK");

            });

            // Configure relationships for dfJoyRefundStore
            modelBuilder.Entity<dfJoyRefundStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJoyRefundStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfJoyRefundStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfMacellanSuperappCompany
            modelBuilder.Entity<dfMacellanSuperappCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMacellanSuperappCompany_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.DepositItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMacellanSuperappCompany_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.DepositItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMacellanSuperappCompany_cdItem_FK");

            });

            // Configure relationships for dfMarketPlaceParameters
            modelBuilder.Entity<dfMarketPlaceParameters>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMarketPlaceParameters_cdCompany_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMarketPlaceParameters_bsMarketPlace_FK");

            });

            // Configure relationships for dfMedulaStoreLogonInfo
            modelBuilder.Entity<dfMedulaStoreLogonInfo>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMedulaStoreLogonInfo_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMedulaStoreLogonInfo_cdCurrAcc_FK");

            });

            // Configure relationships for dfMobilDevCompanyBrandCollectorID
            modelBuilder.Entity<dfMobilDevCompanyBrandCollectorID>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevCompanyBrandCollectorID_cdCompany_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevCompanyBrandCollectorID_cdCompanyBrand_FK");

            });

            // Configure relationships for dfMobilDevCompanyThirdPartyCollectorID
            modelBuilder.Entity<dfMobilDevCompanyThirdPartyCollectorID>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevCompanyThirdPartyCollectorID_cdCompany_FK");

            });

            // Configure relationships for dfMobildevStoreCollectorID
            modelBuilder.Entity<dfMobildevStoreCollectorID>(entity =>
            {
                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.PermissionMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobildevStoreCollectorID_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobildevStoreCollectorID_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobildevStoreCollectorID_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobildevStoreCollectorID_cdCurrAcc_FK");

            });

            // Configure relationships for dfMobilDevStoreCompanyBrandCollectorID
            modelBuilder.Entity<dfMobilDevStoreCompanyBrandCollectorID>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevStoreCompanyBrandCollectorID_cdCompany_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevStoreCompanyBrandCollectorID_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevStoreCompanyBrandCollectorID_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilDevStoreCompanyBrandCollectorID_cdCurrAcc_FK");

            });

            // Configure relationships for dfMobilRevenueUser
            modelBuilder.Entity<dfMobilRevenueUser>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUser_cdCompany_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUser_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUser_dfUserPosition_FK");

            });

            // Configure relationships for dfMobilRevenueUserSalesPoint
            modelBuilder.Entity<dfMobilRevenueUserSalesPoint>(entity =>
            {
                entity.HasOne(d => d.dfMobilRevenueUser)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_dfMobilRevenueUser_FK");

                entity.HasOne(d => d.dfMobilRevenueUser)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_dfMobilRevenueUser_FK");

                entity.HasOne(d => d.dfMobilRevenueUser)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_dfMobilRevenueUser_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMobilRevenueUserSalesPoint_cdCurrAcc_FK");

            });

            // Configure relationships for dfMonthlyTurnoverTarget
            modelBuilder.Entity<dfMonthlyTurnoverTarget>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdCompany_FK");

                entity.HasOne(d => d.cdTurnoverTargetType)
                    .WithMany()
                    .HasForeignKey(d => d.TurnoverTargetTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdTurnoverTargetType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfMonthlyTurnoverTarget_cdCurrAcc_FK");

            });

            // Configure relationships for dfOfficeCreditCardType
            modelBuilder.Entity<dfOfficeCreditCardType>(entity =>
            {
                entity.HasOne(d => d.dfOfficeDefault)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeCreditCardType_dfOfficeDefault_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeCreditCardType_cdCreditCardType_FK");

            });

            // Configure relationships for dfOfficeDefault
            modelBuilder.Entity<dfOfficeDefault>(entity =>
            {
                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdState_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdCity_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdOffice_FK");

                entity.HasOne(d => d.bsBulkMailServiceProvider)
                    .WithMany()
                    .HasForeignKey(d => d.BulkMailServiceProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_bsBulkMailServiceProvider_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdCountry_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdExchangeType_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.SendAdvertConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdConfirmationFormType_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdStreet_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdCurrency_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdDistrict_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LocalDataLanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdDataLanguage_FK");

                entity.HasOne(d => d.bsTaxFreeRefundCompany)
                    .WithMany()
                    .HasForeignKey(d => d.TaxFreeRefundCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_bsTaxFreeRefundCompany_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeDefault_cdPriceGroup_FK");

            });

            // Configure relationships for dfOfficeEArchiveStartDate
            modelBuilder.Entity<dfOfficeEArchiveStartDate>(entity =>
            {
                entity.HasOne(d => d.dfOfficeDefault)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeEArchiveStartDate_dfOfficeDefault_FK");

            });

            // Configure relationships for dfOfficeNotAvailableProcess
            modelBuilder.Entity<dfOfficeNotAvailableProcess>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeNotAvailableProcess_bsProcess_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfficeNotAvailableProcess_cdOffice_FK");

            });

            // Configure relationships for dfOfflinePosTerminalParameters
            modelBuilder.Entity<dfOfflinePosTerminalParameters>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfflinePosTerminalParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfflinePosTerminalParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOfflinePosTerminalParameters_cdPOSTerminal_FK");

            });

            // Configure relationships for dfOnlineBankWebServiceParameters
            modelBuilder.Entity<dfOnlineBankWebServiceParameters>(entity =>
            {
                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineBankWebServiceParameters_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineBankWebServiceParameters_cdOnlineBankWebService_FK");

            });

            // Configure relationships for dfOnlineDistributor
            modelBuilder.Entity<dfOnlineDistributor>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineDistributor_cdWarehouse_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineDistributor_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineDistributor_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineDistributor_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineDistributor_cdCurrAcc_FK");

            });

            // Configure relationships for dfOnlineInstallmentPaymentBankAccs
            modelBuilder.Entity<dfOnlineInstallmentPaymentBankAccs>(entity =>
            {
                entity.HasOne(d => d.dfOnlineInstallmentPaymentParameters)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineInstallmentPaymentBankAccs_dfOnlineInstallmentPaymentParameters_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineInstallmentPaymentBankAccs_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineInstallmentPaymentBankAccs_cdCurrAcc_FK");

            });

            // Configure relationships for dfOnlineInstallmentPaymentParameters
            modelBuilder.Entity<dfOnlineInstallmentPaymentParameters>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineInstallmentPaymentParameters_cdCompany_FK");

            });

            // Configure relationships for dfOnlineSalesandPaymentBankAccs
            modelBuilder.Entity<dfOnlineSalesandPaymentBankAccs>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentBankAccs_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentBankAccs_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentBankAccs_cdCurrAcc_FK");

            });

            // Configure relationships for dfOnlineSalesandPaymentParameters
            modelBuilder.Entity<dfOnlineSalesandPaymentParameters>(entity =>
            {
                entity.HasOne(d => d.bsInternetPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentParameters_bsInternetPaymentType_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentParameters_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentParameters_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentParameters_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdOrderCancelReason)
                    .WithMany()
                    .HasForeignKey(d => d.AutoCancelReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesandPaymentParameters_cdOrderCancelReason_FK");

            });

            // Configure relationships for dfOnlineSalesAndPaymentParametersForConnection
            modelBuilder.Entity<dfOnlineSalesAndPaymentParametersForConnection>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesAndPaymentParametersForConnection_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOnlineSalesAndPaymentParametersForConnection_cdOffice_FK");

            });

            // Configure relationships for dfOtherPaymentOfficialForm
            modelBuilder.Entity<dfOtherPaymentOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOtherPaymentOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfOtpServiceCompany
            modelBuilder.Entity<dfOtpServiceCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfOtpServiceCompany_cdCompany_FK");

            });

            // Configure relationships for dfPAROCompany
            modelBuilder.Entity<dfPAROCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROCompany_cdCompany_FK");

            });

            // Configure relationships for dfPAROPOSTerminal
            modelBuilder.Entity<dfPAROPOSTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROPOSTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfPAROStore
            modelBuilder.Entity<dfPAROStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPAROStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfPaxEftPosCompany
            modelBuilder.Entity<dfPaxEftPosCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaxEftPosCompany_cdCompany_FK");

            });

            // Configure relationships for dfPaymentOfficialForm
            modelBuilder.Entity<dfPaymentOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaymentOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfPaynetBankIDConvert
            modelBuilder.Entity<dfPaynetBankIDConvert>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetBankIDConvert_cdCreditCardType_FK");

            });

            // Configure relationships for dfPaynetCompany
            modelBuilder.Entity<dfPaynetCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetCompany_cdCompany_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.PaynetBankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetCompany_cdBank_FK");

            });

            // Configure relationships for dfPaynetPaymentPlan
            modelBuilder.Entity<dfPaynetPaymentPlan>(entity =>
            {
                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetPaymentPlan_cdPaymentPlan_FK");

            });

            // Configure relationships for dfPaynetStore
            modelBuilder.Entity<dfPaynetStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPaynetStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfPayrollDefault
            modelBuilder.Entity<dfPayrollDefault>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPayrollDefault_cdCompany_FK");

                entity.HasOne(d => d.cdDeduction)
                    .WithMany()
                    .HasForeignKey(d => d.CPIDeductionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPayrollDefault_cdDeduction_FK");

            });

            // Configure relationships for dfPayrollForm
            modelBuilder.Entity<dfPayrollForm>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPayrollForm_cdCompany_FK");

            });

            // Configure relationships for dfPDCCurrAcc
            modelBuilder.Entity<dfPDCCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAcc_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAcc_bsCurrAccType_FK");

            });

            // Configure relationships for dfPDCCurrAccAttribute
            modelBuilder.Entity<dfPDCCurrAccAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAccAttributeType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccAttribute_cdCurrAccAttributeType_FK");

                entity.HasOne(d => d.cdCurrAccAttributeType)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccAttribute_cdCurrAccAttributeType_FK");

            });

            // Configure relationships for dfPDCCurrAccCommunication
            modelBuilder.Entity<dfPDCCurrAccCommunication>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccCommunication_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccCommunication_bsCurrAccType_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccCommunication_cdCommunicationType_FK");

            });

            // Configure relationships for dfPDCCurrAccContact
            modelBuilder.Entity<dfPDCCurrAccContact>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccContact_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccContact_bsCurrAccType_FK");

            });

            // Configure relationships for dfPDCCurrAccPersonalInfo
            modelBuilder.Entity<dfPDCCurrAccPersonalInfo>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccPersonalInfo_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccPersonalInfo_bsCurrAccType_FK");

            });

            // Configure relationships for dfPDCCurrAccPostalAddress
            modelBuilder.Entity<dfPDCCurrAccPostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccPostalAddress_cdCompany_FK");

                entity.HasOne(d => d.cdAddressType)
                    .WithMany()
                    .HasForeignKey(d => d.PostalAddressTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccPostalAddress_cdAddressType_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCurrAccPostalAddress_bsCurrAccType_FK");

            });

            // Configure relationships for dfPDCCustomerCompanyBrandAttribute
            modelBuilder.Entity<dfPDCCustomerCompanyBrandAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCustomerCompanyBrandAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAccAttributeType)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCustomerCompanyBrandAttribute_cdCurrAccAttributeType_FK");

                entity.HasOne(d => d.cdCurrAccAttributeType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCCustomerCompanyBrandAttribute_cdCurrAccAttributeType_FK");

            });

            // Configure relationships for dfPDCElements
            modelBuilder.Entity<dfPDCElements>(entity =>
            {
                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCElements_bsCurrAccType_FK");

            });

            // Configure relationships for dfPDCQuery
            modelBuilder.Entity<dfPDCQuery>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPDCQuery_cdCompany_FK");

            });

            // Configure relationships for dfPeriodicalAllocationRule
            modelBuilder.Entity<dfPeriodicalAllocationRule>(entity =>
            {
                entity.HasOne(d => d.cdAllocationTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalAllocationRule_cdAllocationTemplate_FK");

                entity.HasOne(d => d.cdAllocationTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalAllocationRule_cdAllocationTemplate_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalAllocationRule_cdCompany_FK");

            });

            // Configure relationships for dfPeriodicalSMSRule
            modelBuilder.Entity<dfPeriodicalSMSRule>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalSMSRule_cdCompany_FK");

                entity.HasOne(d => d.cdMessageReason)
                    .WithMany()
                    .HasForeignKey(d => d.MessageReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalSMSRule_cdMessageReason_FK");

            });

            // Configure relationships for dfPeriodicalTransferPlanRule
            modelBuilder.Entity<dfPeriodicalTransferPlanRule>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalTransferPlanRule_cdCompany_FK");

                entity.HasOne(d => d.cdTransferPlanTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalTransferPlanRule_cdTransferPlanTemplate_FK");

                entity.HasOne(d => d.cdTransferPlanTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPeriodicalTransferPlanRule_cdTransferPlanTemplate_FK");

            });

            // Configure relationships for dfPlanetPaymentCompany
            modelBuilder.Entity<dfPlanetPaymentCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPlanetPaymentCompany_cdCompany_FK");

            });

            // Configure relationships for dfPlanetPaymentStore
            modelBuilder.Entity<dfPlanetPaymentStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPlanetPaymentStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPlanetPaymentStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfPosCustomerScreenLayout
            modelBuilder.Entity<dfPosCustomerScreenLayout>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenLayout_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenLayout_cdCurrAcc_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenLayout_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenLayout_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenLayout_cdPOSTerminal_FK");

            });

            // Configure relationships for dfPosCustomerScreenWidgetParameters
            modelBuilder.Entity<dfPosCustomerScreenWidgetParameters>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenWidgetParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenWidgetParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenWidgetParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenWidgetParameters_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosCustomerScreenWidgetParameters_cdCurrAcc_FK");

            });

            // Configure relationships for dfPosDeviceParameters
            modelBuilder.Entity<dfPosDeviceParameters>(entity =>
            {
                entity.HasOne(d => d.bsDevice)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosDeviceParameters_bsDevice_FK");

                entity.HasOne(d => d.bsDeviceType)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosDeviceParameters_bsDeviceType_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosDeviceParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosDeviceParameters_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosDeviceParameters_cdPOSTerminal_FK");

            });

            // Configure relationships for dfPosNewCustomer
            modelBuilder.Entity<dfPosNewCustomer>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosNewCustomer_dfStoreDefault_FK");

            });

            // Configure relationships for dfPosNewCustomerActions
            modelBuilder.Entity<dfPosNewCustomerActions>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosNewCustomerActions_dfStoreDefault_FK");

            });

            // Configure relationships for dfPosNewCustomerField
            modelBuilder.Entity<dfPosNewCustomerField>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosNewCustomerField_dfStoreDefault_FK");

            });

            // Configure relationships for dfPosOrderOpticalProductField
            modelBuilder.Entity<dfPosOrderOpticalProductField>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosOrderOpticalProductField_dfStoreDefault_FK");

                entity.HasOne(d => d.bsProductType)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosOrderOpticalProductField_bsProductType_FK");

            });

            // Configure relationships for dfPosUI
            modelBuilder.Entity<dfPosUI>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUI_dfStoreDefault_FK");

            });

            // Configure relationships for dfPosUIDesc
            modelBuilder.Entity<dfPosUIDesc>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUIDesc_cdDataLanguage_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.PosUICode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUIDesc_dfPosUI_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUIDesc_dfPosUI_FK");

            });

            // Configure relationships for dfPosUISetting
            modelBuilder.Entity<dfPosUISetting>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUISetting_dfStoreDefault_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.PosUICode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUISetting_dfPosUI_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPosUISetting_dfPosUI_FK");

            });

            // Configure relationships for dfPriceListForm
            modelBuilder.Entity<dfPriceListForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPriceListForm_cdOffice_FK");

            });

            // Configure relationships for dfProcessOfficialForm
            modelBuilder.Entity<dfProcessOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProcessOfficialForm_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProcessOfficialForm_bsProcess_FK");

                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProcessOfficialForm_bsProcessFlow_FK");

            });

            // Configure relationships for dfProductHierarchy
            modelBuilder.Entity<dfProductHierarchy>(entity =>
            {
                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode01)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode02)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode03)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode04)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode05)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode06)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode07)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode08)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode09)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

                entity.HasOne(d => d.cdProductHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyLevelCode10)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchy_cdProductHierarchyLevel_FK");

            });

            // Configure relationships for dfProductHierarchyAttribute
            modelBuilder.Entity<dfProductHierarchyAttribute>(entity =>
            {
                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.dfProductHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyAttribute_dfProductHierarchy_FK");

            });

            // Configure relationships for dfProductHierarchyColorSet
            modelBuilder.Entity<dfProductHierarchyColorSet>(entity =>
            {
                entity.HasOne(d => d.dfProductHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyColorSet_dfProductHierarchy_FK");

                entity.HasOne(d => d.cdProductColorSet)
                    .WithMany()
                    .HasForeignKey(d => d.ProductColorSetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyColorSet_cdProductColorSet_FK");

            });

            // Configure relationships for dfProductHierarchyDefault
            modelBuilder.Entity<dfProductHierarchyDefault>(entity =>
            {
                entity.HasOne(d => d.dfProductHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_dfProductHierarchy_FK");

                entity.HasOne(d => d.cdItemTextileCareTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTextileCareTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemTextileCareTemplate_FK");

                entity.HasOne(d => d.cdItemVendorGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemVendorGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemVendorGr_FK");

                entity.HasOne(d => d.cdCareWarningTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CareWarningTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdCareWarningTemplate_FK");

                entity.HasOne(d => d.cdItemAccountGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemAccountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemAccountGr_FK");

                entity.HasOne(d => d.cdPromotionGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PromotionGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdPromotionGroup_FK");

                entity.HasOne(d => d.bsProductType)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_bsProductType_FK");

                entity.HasOne(d => d.cdItemDiscountGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDiscountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemDiscountGr_FK");

                entity.HasOne(d => d.cdItemPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemPaymentPlanGr_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdCustomsTariffNumber)
                    .WithMany()
                    .HasForeignKey(d => d.CustomsTariffNumberCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdCustomsTariffNumber_FK");

                entity.HasOne(d => d.cdItemTaxGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTaxGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDefault_cdItemTaxGr_FK");

            });

            // Configure relationships for dfProductHierarchyDimSet
            modelBuilder.Entity<dfProductHierarchyDimSet>(entity =>
            {
                entity.HasOne(d => d.cdProductDimSet)
                    .WithMany()
                    .HasForeignKey(d => d.ProductDimSetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDimSet_cdProductDimSet_FK");

                entity.HasOne(d => d.dfProductHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.ProductHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyDimSet_dfProductHierarchy_FK");

            });

            // Configure relationships for dfProductHierarchyLevelNames
            modelBuilder.Entity<dfProductHierarchyLevelNames>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductHierarchyLevelNames_cdDataLanguage_FK");

            });

            // Configure relationships for dfProductsForOfficeBasedSerialNumberTracking
            modelBuilder.Entity<dfProductsForOfficeBasedSerialNumberTracking>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductsForOfficeBasedSerialNumberTracking_cdOffice_FK");

            });

            // Configure relationships for dfProductsForSerialNumberTrackingOnCustomer
            modelBuilder.Entity<dfProductsForSerialNumberTrackingOnCustomer>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductsForSerialNumberTrackingOnCustomer_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfProductsForSerialNumberTrackingOnCustomer_cdCurrAcc_FK");

            });

            // Configure relationships for dfPurchaseRequisitionOfficialForm
            modelBuilder.Entity<dfPurchaseRequisitionOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPurchaseRequisitionOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfPurchaseRequisitionProposalOfficialForm
            modelBuilder.Entity<dfPurchaseRequisitionProposalOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfPurchaseRequisitionProposalOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfReSendSMSForCustomerRelationship
            modelBuilder.Entity<dfReSendSMSForCustomerRelationship>(entity =>
            {
                entity.HasOne(d => d.cdScheduleReSendSMSForCustomerRelationship)
                    .WithMany()
                    .HasForeignKey(d => d.ScheduleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfReSendSMSForCustomerRelationship_cdScheduleReSendSMSForCustomerRelationship_FK");

            });

            // Configure relationships for dfRetailCustomerConditionalRequiredFields
            modelBuilder.Entity<dfRetailCustomerConditionalRequiredFields>(entity =>
            {
                entity.HasOne(d => d.cdConditionType)
                    .WithMany()
                    .HasForeignKey(d => d.ConditionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfRetailCustomerConditionalRequiredFields_cdConditionType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfRetailCustomerConditionalRequiredFields_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfRetailCustomerConditionalRequiredFields_cdCurrAcc_FK");

            });

            // Configure relationships for dfRomaniaGoosfrabaeInvoiceOffice
            modelBuilder.Entity<dfRomaniaGoosfrabaeInvoiceOffice>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfRomaniaGoosfrabaeInvoiceOffice_cdOffice_FK");

            });

            // Configure relationships for dfRomaniaGoosfrabaeShipmentOffice
            modelBuilder.Entity<dfRomaniaGoosfrabaeShipmentOffice>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfRomaniaGoosfrabaeShipmentOffice_cdOffice_FK");

            });

            // Configure relationships for dfSMSForCustomerRelationship
            modelBuilder.Entity<dfSMSForCustomerRelationship>(entity =>
            {
                entity.HasOne(d => d.cdCurrAccList)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccListCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSMSForCustomerRelationship_cdCurrAccList_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSMSForCustomerRelationship_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdScheduleSMSForCustomerRelationship)
                    .WithMany()
                    .HasForeignKey(d => d.ScheduleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSMSForCustomerRelationship_cdScheduleSMSForCustomerRelationship_FK");

                entity.HasOne(d => d.cdSMSJobType)
                    .WithMany()
                    .HasForeignKey(d => d.SMSJobTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSMSForCustomerRelationship_cdSMSJobType_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSMSForCustomerRelationship_bsCurrAccType_FK");

            });

            // Configure relationships for dfSocialInsuranceRates
            modelBuilder.Entity<dfSocialInsuranceRates>(entity =>
            {
                entity.HasOne(d => d.cdEmployeeSocialInsuranceStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeSocialInsuranceStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSocialInsuranceRates_cdEmployeeSocialInsuranceStatus_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSocialInsuranceRates_cdCompany_FK");

            });

            // Configure relationships for dfStoreConsStore
            modelBuilder.Entity<dfStoreConsStore>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreConsStore_dfStoreDefault_FK");

                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreConsStore_dfConsignmentStore_FK");

                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreConsStore_dfConsignmentStore_FK");

                entity.HasOne(d => d.dfConsignmentStore)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreConsStore_dfConsignmentStore_FK");

            });

            // Configure relationships for dfStoreCreditableConfirmation
            modelBuilder.Entity<dfStoreCreditableConfirmation>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreCreditableConfirmation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreCreditableConfirmation_cdCurrAcc_FK");

            });

            // Configure relationships for dfStoreDefault
            modelBuilder.Entity<dfStoreDefault>(entity =>
            {
                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDefault_cdVehicle_FK");

                entity.HasOne(d => d.bsPresentCardActivationType)
                    .WithMany()
                    .HasForeignKey(d => d.PresentCardActivationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDefault_bsPresentCardActivationType_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCodeForLoyaltyProgram)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDefault_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDefault_cdShipmentMethod_FK");

            });

            // Configure relationships for dfStoreDeliveryWarehouse
            modelBuilder.Entity<dfStoreDeliveryWarehouse>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDeliveryWarehouse_dfStoreDefault_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDeliveryWarehouse_cdWarehouse_FK");

            });

            // Configure relationships for dfStoreDigitalMarketingService
            modelBuilder.Entity<dfStoreDigitalMarketingService>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDigitalMarketingService_dfStoreDefault_FK");

                entity.HasOne(d => d.cdPresentCardType)
                    .WithMany()
                    .HasForeignKey(d => d.PresentCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDigitalMarketingService_cdPresentCardType_FK");

                entity.HasOne(d => d.cdDigitalMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.DigitalMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDigitalMarketingService_cdDigitalMarketingService_FK");

            });

            // Configure relationships for dfStoreDistributionWarehouse
            modelBuilder.Entity<dfStoreDistributionWarehouse>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDistributionWarehouse_dfStoreDefault_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreDistributionWarehouse_cdWarehouse_FK");

            });

            // Configure relationships for dfStoreFolder
            modelBuilder.Entity<dfStoreFolder>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreFolder_dfStoreDefault_FK");

                entity.HasOne(d => d.bsFolder)
                    .WithMany()
                    .HasForeignKey(d => d.FolderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreFolder_bsFolder_FK");

            });

            // Configure relationships for dfStoreForeignCurrency
            modelBuilder.Entity<dfStoreForeignCurrency>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreForeignCurrency_dfStoreDefault_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreForeignCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreForeignCurrency_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreForeignCurrency_cdCurrAcc_FK");

            });

            // Configure relationships for dfStoreHierarchy
            modelBuilder.Entity<dfStoreHierarchy>(entity =>
            {
                entity.HasOne(d => d.cdStoreHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreHierarchyLevelCode01)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchy_cdStoreHierarchyLevel_FK");

                entity.HasOne(d => d.cdStoreHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreHierarchyLevelCode02)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchy_cdStoreHierarchyLevel_FK");

                entity.HasOne(d => d.cdStoreHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreHierarchyLevelCode03)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchy_cdStoreHierarchyLevel_FK");

                entity.HasOne(d => d.cdStoreHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreHierarchyLevelCode04)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchy_cdStoreHierarchyLevel_FK");

                entity.HasOne(d => d.cdStoreHierarchyLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreHierarchyLevelCode05)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchy_cdStoreHierarchyLevel_FK");

            });

            // Configure relationships for dfStoreHierarchyLevelNames
            modelBuilder.Entity<dfStoreHierarchyLevelNames>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreHierarchyLevelNames_cdDataLanguage_FK");

            });

            // Configure relationships for dfStoreLabelTypes
            modelBuilder.Entity<dfStoreLabelTypes>(entity =>
            {
                entity.HasOne(d => d.cdLabelType)
                    .WithMany()
                    .HasForeignKey(d => d.LabelTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreLabelTypes_cdLabelType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreLabelTypes_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreLabelTypes_cdCurrAcc_FK");

            });

            // Configure relationships for dfStoreProductInformation
            modelBuilder.Entity<dfStoreProductInformation>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreProductInformation_dfStoreDefault_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreProductInformation_cdPriceGroup_FK");

            });

            // Configure relationships for dfStoreSupportWarehouse
            modelBuilder.Entity<dfStoreSupportWarehouse>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreSupportWarehouse_dfStoreDefault_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreSupportWarehouse_cdWarehouse_FK");

            });

            // Configure relationships for dfStoreTotalDiscountAuthority
            modelBuilder.Entity<dfStoreTotalDiscountAuthority>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreTotalDiscountAuthority_dfStoreDefault_FK");

                entity.HasOne(d => d.cdDiscountReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreTotalDiscountAuthority_cdDiscountReason_FK");

            });

            // Configure relationships for dfStoreTransferStore
            modelBuilder.Entity<dfStoreTransferStore>(entity =>
            {
                entity.HasOne(d => d.dfStoreDefault)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreTransferStore_dfStoreDefault_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreTransferStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfStoreTransferStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfSupportRequestOfficialForm
            modelBuilder.Entity<dfSupportRequestOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSupportRequestOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfSupportRequestSurveyDefault
            modelBuilder.Entity<dfSupportRequestSurveyDefault>(entity =>
            {
                entity.HasOne(d => d.cdSurvey)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSupportRequestSurveyDefault_cdSurvey_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfSupportRequestSurveyDefault_bsCurrAccType_FK");

            });

            // Configure relationships for dfTaxFreePointCompany
            modelBuilder.Entity<dfTaxFreePointCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreePointCompany_cdCompany_FK");

            });

            // Configure relationships for dfTaxFreeRefundRate
            modelBuilder.Entity<dfTaxFreeRefundRate>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreeRefundRate_cdCountry_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreeRefundRate_cdCurrency_FK");

            });

            // Configure relationships for dfTaxFreeZoneCompany
            modelBuilder.Entity<dfTaxFreeZoneCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreeZoneCompany_cdCompany_FK");

            });

            // Configure relationships for dfTaxFreeZoneStore
            modelBuilder.Entity<dfTaxFreeZoneStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreeZoneStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTaxFreeZoneStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfTransactionDefFTAttribute
            modelBuilder.Entity<dfTransactionDefFTAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTransactionDefFTAttribute_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTransactionDefFTAttribute_bsApplication_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTransactionDefFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfTransactionDefFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for dfUmicoPOSTerminal
            modelBuilder.Entity<dfUmicoPOSTerminal>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUmicoPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUmicoPOSTerminal_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUmicoPOSTerminal_cdPOSTerminal_FK");

            });

            // Configure relationships for dfUnifreeCompany
            modelBuilder.Entity<dfUnifreeCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUnifreeCompany_cdCompany_FK");

                entity.HasOne(d => d.cdBarcodeType)
                    .WithMany()
                    .HasForeignKey(d => d.BarcodeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUnifreeCompany_cdBarcodeType_FK");

            });

            // Configure relationships for dfUnifreeStore
            modelBuilder.Entity<dfUnifreeStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUnifreeStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUnifreeStore_cdCurrAcc_FK");

            });

            // Configure relationships for dfUserAllowedOffice
            modelBuilder.Entity<dfUserAllowedOffice>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedOffice_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedOffice_cdCompany_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedOffice_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedOffice_dfUserPosition_FK");

            });

            // Configure relationships for dfUserAllowedStore
            modelBuilder.Entity<dfUserAllowedStore>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedStore_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedStore_cdCurrAcc_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedStore_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedStore_dfUserPosition_FK");

            });

            // Configure relationships for dfUserAllowedWarehouse
            modelBuilder.Entity<dfUserAllowedWarehouse>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedWarehouse_cdWarehouse_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedWarehouse_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserAllowedWarehouse_dfUserPosition_FK");

            });

            // Configure relationships for dfUserPosition
            modelBuilder.Entity<dfUserPosition>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdWarehouse_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosition_cdCurrAcc_FK");

            });

            // Configure relationships for dfUserPosUISettings
            modelBuilder.Entity<dfUserPosUISettings>(entity =>
            {
                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosUISettings_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosUISettings_dfUserPosition_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosUISettings_dfPosUI_FK");

                entity.HasOne(d => d.dfPosUI)
                    .WithMany()
                    .HasForeignKey(d => d.PosUICode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUserPosUISettings_dfPosUI_FK");

            });

            // Configure relationships for dfUTSWebServiceToken
            modelBuilder.Entity<dfUTSWebServiceToken>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUTSWebServiceToken_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUTSWebServiceToken_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUTSWebServiceToken_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfUTSWebServiceToken_cdCurrAcc_FK");

            });

            // Configure relationships for dfVehicleLoadingOfficialForm
            modelBuilder.Entity<dfVehicleLoadingOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfVehicleLoadingOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfVehicleUnLoadingOfficialForm
            modelBuilder.Entity<dfVehicleUnLoadingOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfVehicleUnLoadingOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfVendorPriceListForm
            modelBuilder.Entity<dfVendorPriceListForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfVendorPriceListForm_cdOffice_FK");

            });

            // Configure relationships for dfVirementOfficialForm
            modelBuilder.Entity<dfVirementOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfVirementOfficialForm_cdOffice_FK");

            });

            // Configure relationships for dfWeArePlanetTaxFreeCompany
            modelBuilder.Entity<dfWeArePlanetTaxFreeCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfWeArePlanetTaxFreeCompany_cdCompany_FK");

            });

            // Configure relationships for dfWeArePlanetTaxFreeStore
            modelBuilder.Entity<dfWeArePlanetTaxFreeStore>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfWeArePlanetTaxFreeStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("dfWeArePlanetTaxFreeStore_cdCurrAcc_FK");

            });

            // Configure relationships for e_InboxShipmentBuyerCustomerParty
            modelBuilder.Entity<e_InboxShipmentBuyerCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentBuyerCustomerParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentCarrierParty
            modelBuilder.Entity<e_InboxShipmentCarrierParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentCarrierParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentDeliveryCustomerParty
            modelBuilder.Entity<e_InboxShipmentDeliveryCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentDeliveryCustomerParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentDespatchSupplierParty
            modelBuilder.Entity<e_InboxShipmentDespatchSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentDespatchSupplierParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentDrivers
            modelBuilder.Entity<e_InboxShipmentDrivers>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentDrivers_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentHeader
            modelBuilder.Entity<e_InboxShipmentHeader>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.InboxShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentHeader_e_InboxShipmentStatus_FK");

            });

            // Configure relationships for e_InboxShipmentLine
            modelBuilder.Entity<e_InboxShipmentLine>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLine_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentLineV3Items
            modelBuilder.Entity<e_InboxShipmentLineV3Items>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_prItemVariant_FK");

                entity.HasOne(d => d.e_InboxShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.InboxShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentLineV3Items_e_InboxShipmentLine_FK");

            });

            // Configure relationships for e_InboxShipmentOriginatorCustomerParty
            modelBuilder.Entity<e_InboxShipmentOriginatorCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentOriginatorCustomerParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentResponseDeliveryCustomerParty
            modelBuilder.Entity<e_InboxShipmentResponseDeliveryCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentResponseDeliveryCustomerParty_e_InboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_InboxShipmentResponseDespatchSupplierParty
            modelBuilder.Entity<e_InboxShipmentResponseDespatchSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentResponseDespatchSupplierParty_e_InboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_InboxShipmentResponseHeader
            modelBuilder.Entity<e_InboxShipmentResponseHeader>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.InboxShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentResponseHeader_e_InboxShipmentStatus_FK");

            });

            // Configure relationships for e_InboxShipmentResponseLine
            modelBuilder.Entity<e_InboxShipmentResponseLine>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentResponseLine_e_InboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_InboxShipmentSellerSupplierParty
            modelBuilder.Entity<e_InboxShipmentSellerSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentSellerSupplierParty_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_InboxShipmentTransportDetails
            modelBuilder.Entity<e_InboxShipmentTransportDetails>(entity =>
            {
                entity.HasOne(d => d.e_InboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_InboxShipmentTransportDetails_e_InboxShipmentHeader_FK");

            });

            // Configure relationships for e_LastShipmentAskDate
            modelBuilder.Entity<e_LastShipmentAskDate>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_LastShipmentAskDate_cdCompany_FK");

            });

            // Configure relationships for e_OutboxShipmentBuyerCustomerParty
            modelBuilder.Entity<e_OutboxShipmentBuyerCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentBuyerCustomerParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentCarrierParty
            modelBuilder.Entity<e_OutboxShipmentCarrierParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentCarrierParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentDeliveryCustomerParty
            modelBuilder.Entity<e_OutboxShipmentDeliveryCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentDeliveryCustomerParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentDespatchSupplierParty
            modelBuilder.Entity<e_OutboxShipmentDespatchSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentDespatchSupplierParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentDrivers
            modelBuilder.Entity<e_OutboxShipmentDrivers>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentDrivers_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentHeader
            modelBuilder.Entity<e_OutboxShipmentHeader>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.OutboxShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentHeader_e_OutboxShipmentStatus_FK");

            });

            // Configure relationships for e_OutboxShipmentLine
            modelBuilder.Entity<e_OutboxShipmentLine>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentLine_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentOrder
            modelBuilder.Entity<e_OutboxShipmentOrder>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentOrder_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentOriginatorCustomerParty
            modelBuilder.Entity<e_OutboxShipmentOriginatorCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentOriginatorCustomerParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentResponseDeliveryCustomerParty
            modelBuilder.Entity<e_OutboxShipmentResponseDeliveryCustomerParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentResponseDeliveryCustomerParty_e_OutboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentResponseDespatchSupplierParty
            modelBuilder.Entity<e_OutboxShipmentResponseDespatchSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentResponseDespatchSupplierParty_e_OutboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentResponseHeader
            modelBuilder.Entity<e_OutboxShipmentResponseHeader>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.OutboxShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentResponseHeader_e_OutboxShipmentStatus_FK");

            });

            // Configure relationships for e_OutboxShipmentResponseLine
            modelBuilder.Entity<e_OutboxShipmentResponseLine>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentResponseHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentResponseLine_e_OutboxShipmentResponseHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentSellerSupplierParty
            modelBuilder.Entity<e_OutboxShipmentSellerSupplierParty>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentSellerSupplierParty_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentTransportDetails
            modelBuilder.Entity<e_OutboxShipmentTransportDetails>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentTransportDetails_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for e_OutboxShipmentUBLExtensions
            modelBuilder.Entity<e_OutboxShipmentUBLExtensions>(entity =>
            {
                entity.HasOne(d => d.e_OutboxShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.UUID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("e_OutboxShipmentUBLExtensions_e_OutboxShipmentHeader_FK");

            });

            // Configure relationships for hrEmployeeAGI
            modelBuilder.Entity<hrEmployeeAGI>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeAGI_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeAGI_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeAGI_hrEmployeePayrollProfile_FK");

            });

            // Configure relationships for hrEmployeeJobTitle
            modelBuilder.Entity<hrEmployeeJobTitle>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeJobTitle_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeJobTitle_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeJobTitle_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeJobTitle_cdJobTitle_FK");

            });

            // Configure relationships for hrEmployeeMonthlySum
            modelBuilder.Entity<hrEmployeeMonthlySum>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySum_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySum_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySum_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdMissingWorkReason)
                    .WithMany()
                    .HasForeignKey(d => d.MissingWorkReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySum_cdMissingWorkReason_FK");

            });

            // Configure relationships for hrEmployeeMonthlySumDetail
            modelBuilder.Entity<hrEmployeeMonthlySumDetail>(entity =>
            {
                entity.HasOne(d => d.cdMissingWorkReason)
                    .WithMany()
                    .HasForeignKey(d => d.MissingWorkReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_cdMissingWorkReason_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdEarnings)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_cdEarnings_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeMonthlySumDetail_cdJobDepartment_FK");

            });

            // Configure relationships for hrEmployeeOrganizationChart
            modelBuilder.Entity<hrEmployeeOrganizationChart>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeOrganizationChart_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeOrganizationChart_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeOrganizationChart_cdCurrAcc_FK");

            });

            // Configure relationships for hrEmployeePayrollProfile
            modelBuilder.Entity<hrEmployeePayrollProfile>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdCompany_FK");

                entity.HasOne(d => d.bsSGKMission)
                    .WithMany()
                    .HasForeignKey(d => d.SGKMissionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_bsSGKMission_FK");

                entity.HasOne(d => d.cdLegalResignation)
                    .WithMany()
                    .HasForeignKey(d => d.LegalResignationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdLegalResignation_FK");

                entity.HasOne(d => d.cdLegalResignationLocal)
                    .WithMany()
                    .HasForeignKey(d => d.LegalResignationLocalCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdLegalResignationLocal_FK");

                entity.HasOne(d => d.bsSGKInsuaranceType)
                    .WithMany()
                    .HasForeignKey(d => d.SGKInsuaranceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_bsSGKInsuaranceType_FK");

                entity.HasOne(d => d.bsEmployeeSpecialType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeSpecialTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_bsEmployeeSpecialType_FK");

                entity.HasOne(d => d.cdEmployeeTaxStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTaxStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdEmployeeTaxStatus_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeEarningsGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeDebitGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeWorkAdvanceGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTaxRefundGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SeveranceGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.TerminationGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdGLAcc_FK");

                entity.HasOne(d => d.cdJobType)
                    .WithMany()
                    .HasForeignKey(d => d.JobTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdJobType_FK");

                entity.HasOne(d => d.cdEmployeeSocialInsuranceStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeSocialInsuranceStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdEmployeeSocialInsuranceStatus_FK");

                entity.HasOne(d => d.cdSGKProfession)
                    .WithMany()
                    .HasForeignKey(d => d.SGKProfessionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdSGKProfession_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdCurrAcc_FK");

                entity.HasOne(d => d.cdEmploymentLaw)
                    .WithMany()
                    .HasForeignKey(d => d.EmploymentLawCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdEmploymentLaw_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdCurrAcc_FK");

                entity.HasOne(d => d.cdResignation)
                    .WithMany()
                    .HasForeignKey(d => d.ResignationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePayrollProfile_cdResignation_FK");

            });

            // Configure relationships for hrEmployeePrivateInsurance
            modelBuilder.Entity<hrEmployeePrivateInsurance>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePrivateInsurance_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePrivateInsurance_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePrivateInsurance_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdPrivateInsurance)
                    .WithMany()
                    .HasForeignKey(d => d.PrivateInsuranceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeePrivateInsurance_cdPrivateInsurance_FK");

            });

            // Configure relationships for hrEmployeeSGKBorrowing
            modelBuilder.Entity<hrEmployeeSGKBorrowing>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeSGKBorrowing_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeSGKBorrowing_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeSGKBorrowing_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdSGKBorrowingType)
                    .WithMany()
                    .HasForeignKey(d => d.SGKBorrowingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeSGKBorrowing_cdSGKBorrowingType_FK");

            });

            // Configure relationships for hrEmployeeWage
            modelBuilder.Entity<hrEmployeeWage>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWage_cdCurrency_FK");

                entity.HasOne(d => d.bsPayType)
                    .WithMany()
                    .HasForeignKey(d => d.PayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWage_bsPayType_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWage_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWage_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWage_hrEmployeePayrollProfile_FK");

            });

            // Configure relationships for hrEmployeeWorkPlace
            modelBuilder.Entity<hrEmployeeWorkPlace>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_cdWorkPlace_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrEmployeeWorkPlace_cdJobDepartment_FK");

            });

            // Configure relationships for hrJobInterview
            modelBuilder.Entity<hrJobInterview>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdDataLanguage_FK");

                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdJobPosition_FK");

                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.JobPositionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdJobPosition_FK");

                entity.HasOne(d => d.cdJobInterviewResult)
                    .WithMany()
                    .HasForeignKey(d => d.JobInterviewResultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdJobInterviewResult_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterview_cdCurrAcc_FK");

            });

            // Configure relationships for hrJobInterviewResults
            modelBuilder.Entity<hrJobInterviewResults>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdCompany_FK");

                entity.HasOne(d => d.cdJobInterviewResult)
                    .WithMany()
                    .HasForeignKey(d => d.LastJobInterviewResultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdJobInterviewResult_FK");

                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.JobPositionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdJobPosition_FK");

                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdJobPosition_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdCommunicationType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobInterviewResults_cdCurrAcc_FK");

            });

            // Configure relationships for hrJobPositionCandidate
            modelBuilder.Entity<hrJobPositionCandidate>(entity =>
            {
                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.JobPositionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobPositionCandidate_cdJobPosition_FK");

                entity.HasOne(d => d.cdJobPosition)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobPositionCandidate_cdJobPosition_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobPositionCandidate_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobPositionCandidate_cdCurrAcc_FK");

            });

            // Configure relationships for hrJobTitleOrganizationChart
            modelBuilder.Entity<hrJobTitleOrganizationChart>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobTitleOrganizationChart_cdCompany_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrJobTitleOrganizationChart_cdJobTitle_FK");

            });

            // Configure relationships for hrSGKEmployeeJobEndDeclaration
            modelBuilder.Entity<hrSGKEmployeeJobEndDeclaration>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobEndDeclaration_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobEndDeclaration_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobEndDeclaration_cdCurrAcc_FK");

            });

            // Configure relationships for hrSGKEmployeeJobStartDeclaration
            modelBuilder.Entity<hrSGKEmployeeJobStartDeclaration>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobStartDeclaration_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobStartDeclaration_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKEmployeeJobStartDeclaration_cdCurrAcc_FK");

            });

            // Configure relationships for hrSGKMonthlyDocument
            modelBuilder.Entity<hrSGKMonthlyDocument>(entity =>
            {
                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.ValidYear)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.ValidMonth)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.hrEmployeeMonthlySum)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_hrEmployeeMonthlySum_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_cdWorkPlace_FK");

                entity.HasOne(d => d.cdEmploymentLaw)
                    .WithMany()
                    .HasForeignKey(d => d.EmploymentLawCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocument_cdEmploymentLaw_FK");

            });

            // Configure relationships for hrSGKMonthlyDocumentDeclaration
            modelBuilder.Entity<hrSGKMonthlyDocumentDeclaration>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocumentDeclaration_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrSGKMonthlyDocumentDeclaration_cdWorkPlace_FK");

            });

            // Configure relationships for hrTestResult
            modelBuilder.Entity<hrTestResult>(entity =>
            {
                entity.HasOne(d => d.cdTest)
                    .WithMany()
                    .HasForeignKey(d => d.TestCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrTestResult_cdTest_FK");

                entity.HasOne(d => d.cdTest)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrTestResult_cdTest_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrTestResult_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrTestResult_cdCurrAcc_FK");

            });

            // Configure relationships for hrWageGarnishment
            modelBuilder.Entity<hrWageGarnishment>(entity =>
            {
                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.cdExecutionOffice)
                    .WithMany()
                    .HasForeignKey(d => d.ExecutionOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_cdExecutionOffice_FK");

                entity.HasOne(d => d.cdWageGarnishmentType)
                    .WithMany()
                    .HasForeignKey(d => d.WageGarnishmentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_cdWageGarnishmentType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hrWageGarnishment_cdCurrency_FK");

            });

            // Configure relationships for lgSMSForCustomerRelationshipNonFormattedCommunications
            modelBuilder.Entity<lgSMSForCustomerRelationshipNonFormattedCommunications>(entity =>
            {
                entity.HasOne(d => d.dfSMSForCustomerRelationship)
                    .WithMany()
                    .HasForeignKey(d => d.SMSForCustomerRelationshipID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lgSMSForCustomerRelationshipNonFormattedCommunications_dfSMSForCustomerRelationship_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lgSMSForCustomerRelationshipNonFormattedCommunications_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lgSMSForCustomerRelationshipNonFormattedCommunications_cdCommunicationType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lgSMSForCustomerRelationshipNonFormattedCommunications_cdCurrAcc_FK");

            });

            // Configure relationships for lgV3OfflinePOSSendStatusLog
            modelBuilder.Entity<lgV3OfflinePOSSendStatusLog>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("lgV3OfflinePOSSendStatusLog_bsApplication_FK");

            });

            // Configure relationships for prAllocationRuleScript
            modelBuilder.Entity<prAllocationRuleScript>(entity =>
            {
                entity.HasOne(d => d.bsAllocationRule)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAllocationRuleScript_bsAllocationRule_FK");

            });

            // Configure relationships for prAllocationTemplateParameterValue
            modelBuilder.Entity<prAllocationTemplateParameterValue>(entity =>
            {
                entity.HasOne(d => d.cdAllocationTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAllocationTemplateParameterValue_cdAllocationTemplate_FK");

                entity.HasOne(d => d.cdAllocationTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAllocationTemplateParameterValue_cdAllocationTemplate_FK");

            });

            // Configure relationships for prAmountRuleBracket
            modelBuilder.Entity<prAmountRuleBracket>(entity =>
            {
                entity.HasOne(d => d.cdAmountRule)
                    .WithMany()
                    .HasForeignKey(d => d.AmountRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAmountRuleBracket_cdAmountRule_FK");

            });

            // Configure relationships for prAvailableDeclarationPostTypes
            modelBuilder.Entity<prAvailableDeclarationPostTypes>(entity =>
            {
                entity.HasOne(d => d.bsDeclarationPostType)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationPostTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAvailableDeclarationPostTypes_bsDeclarationPostType_FK");

                entity.HasOne(d => d.bsDeclarationType)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prAvailableDeclarationPostTypes_bsDeclarationType_FK");

            });

            // Configure relationships for prBankAdditionalChargeTypeGLAccs
            modelBuilder.Entity<prBankAdditionalChargeTypeGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankAdditionalChargeTypeGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankAdditionalChargeTypeGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankAdditionalChargeTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankAdditionalChargeTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsBankAdditionalChargeType)
                    .WithMany()
                    .HasForeignKey(d => d.BankAdditionalChargeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankAdditionalChargeTypeGLAccs_bsBankAdditionalChargeType_FK");

            });

            // Configure relationships for prBankBranch
            modelBuilder.Entity<prBankBranch>(entity =>
            {
                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankBranch_cdDistrict_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankBranch_cdBank_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankBranch_cdState_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankBranch_cdCity_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankBranch_cdCountry_FK");

            });

            // Configure relationships for prBankPOSAccounts
            modelBuilder.Entity<prBankPOSAccounts>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSAccounts_cdGLType_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSAccounts_cdBank_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSAccounts_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSAccounts_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSAccounts_cdCurrAcc_FK");

            });

            // Configure relationships for prBankPOSGLAccs
            modelBuilder.Entity<prBankPOSGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_cdGLType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_prBankPOSAccounts_FK");

                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_prBankPOSAccounts_FK");

                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSGLAccs_prBankPOSAccounts_FK");

            });

            // Configure relationships for prBankPosID
            modelBuilder.Entity<prBankPosID>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPosID_cdBank_FK");

            });

            // Configure relationships for prBankPOSProviderConvert
            modelBuilder.Entity<prBankPOSProviderConvert>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSProviderConvert_cdBank_FK");

                entity.HasOne(d => d.bsBankPOSProvider)
                    .WithMany()
                    .HasForeignKey(d => d.BankPOSProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBankPOSProviderConvert_bsBankPOSProvider_FK");

            });

            // Configure relationships for prBOMContent
            modelBuilder.Entity<prBOMContent>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_prItemVariant_FK");

                entity.HasOne(d => d.cdBOM)
                    .WithMany()
                    .HasForeignKey(d => d.BOMCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_cdBOM_FK");

                entity.HasOne(d => d.cdBOM)
                    .WithMany()
                    .HasForeignKey(d => d.ContentBOMCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMContent_cdBOM_FK");

            });

            // Configure relationships for prBOMTemplateAttribute
            modelBuilder.Entity<prBOMTemplateAttribute>(entity =>
            {
                entity.HasOne(d => d.cdBOMTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.BOMTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateAttribute_cdBOMTemplate_FK");

                entity.HasOne(d => d.cdBOMTemplateAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateAttribute_cdBOMTemplateAttribute_FK");

                entity.HasOne(d => d.cdBOMTemplateAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateAttribute_cdBOMTemplateAttribute_FK");

            });

            // Configure relationships for prBOMTemplateContent
            modelBuilder.Entity<prBOMTemplateContent>(entity =>
            {
                entity.HasOne(d => d.cdBOMTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.BOMTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateContent_cdBOMTemplate_FK");

                entity.HasOne(d => d.cdBOMEntity)
                    .WithMany()
                    .HasForeignKey(d => d.ContentEntityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateContent_cdBOMEntity_FK");

            });

            // Configure relationships for prBOMTemplateItemConditionalFilter
            modelBuilder.Entity<prBOMTemplateItemConditionalFilter>(entity =>
            {
                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateContent_FK");

                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateContent_FK");

                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.ContentEntityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateContent_FK");

                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.SubContentEntityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateContent_FK");

                entity.HasOne(d => d.prBOMTemplateItemFilter)
                    .WithMany()
                    .HasForeignKey(d => d.FilterID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateItemFilter_FK");

                entity.HasOne(d => d.prBOMTemplateItemFilter)
                    .WithMany()
                    .HasForeignKey(d => d.SubFilterID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemConditionalFilter_prBOMTemplateItemFilter_FK");

            });

            // Configure relationships for prBOMTemplateItemFilter
            modelBuilder.Entity<prBOMTemplateItemFilter>(entity =>
            {
                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.ContentEntityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemFilter_prBOMTemplateContent_FK");

                entity.HasOne(d => d.prBOMTemplateContent)
                    .WithMany()
                    .HasForeignKey(d => d.BOMTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prBOMTemplateItemFilter_prBOMTemplateContent_FK");

            });

            // Configure relationships for prCareWarningTemplateAtt
            modelBuilder.Entity<prCareWarningTemplateAtt>(entity =>
            {
                entity.HasOne(d => d.cdCareWarningTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CareWarningTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCareWarningTemplateAtt_cdCareWarningTemplate_FK");

                entity.HasOne(d => d.cdCareWarning)
                    .WithMany()
                    .HasForeignKey(d => d.CareWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCareWarningTemplateAtt_cdCareWarning_FK");

            });

            // Configure relationships for prChannelTemplateCurrAcc
            modelBuilder.Entity<prChannelTemplateCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdChannelTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.ChannelTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChannelTemplateCurrAcc_cdChannelTemplate_FK");

                entity.HasOne(d => d.cdChannelTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChannelTemplateCurrAcc_cdChannelTemplate_FK");

                entity.HasOne(d => d.bsChannelType)
                    .WithMany()
                    .HasForeignKey(d => d.ChannelTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChannelTemplateCurrAcc_bsChannelType_FK");

            });

            // Configure relationships for prChequeAttribute
            modelBuilder.Entity<prChequeAttribute>(entity =>
            {
                entity.HasOne(d => d.cdChequeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdChequeAttribute_FK");

                entity.HasOne(d => d.cdChequeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdChequeAttribute_FK");

                entity.HasOne(d => d.cdChequeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdChequeAttribute_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.BankBranchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeAttribute_cdCheque_FK");

            });

            // Configure relationships for prChequeGLAccs
            modelBuilder.Entity<prChequeGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeGLAccs_cdOffice_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prChequeGLAccs_cdCurrency_FK");

            });

            // Configure relationships for prCityMapLocation
            modelBuilder.Entity<prCityMapLocation>(entity =>
            {
                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCityMapLocation_cdCity_FK");

            });

            // Configure relationships for prColorThemeAttribute
            modelBuilder.Entity<prColorThemeAttribute>(entity =>
            {
                entity.HasOne(d => d.cdColorThemeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prColorThemeAttribute_cdColorThemeAttribute_FK");

                entity.HasOne(d => d.cdColorThemeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prColorThemeAttribute_cdColorThemeAttribute_FK");

                entity.HasOne(d => d.cdColorTheme)
                    .WithMany()
                    .HasForeignKey(d => d.ColorThemeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prColorThemeAttribute_cdColorTheme_FK");

            });

            // Configure relationships for prCompanyCostCenter
            modelBuilder.Entity<prCompanyCostCenter>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCostCenter_cdCompany_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCostCenter_cdCostCenter_FK");

            });

            // Configure relationships for prCompanyCreditCardEarnedPoints
            modelBuilder.Entity<prCompanyCreditCardEarnedPoints>(entity =>
            {
                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEarnedPoints_cdCompanyCreditCard_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEarnedPoints_trInvoiceHeader_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEarnedPoints_trJournalHeader_FK");

            });

            // Configure relationships for prCompanyCreditCardEmployee
            modelBuilder.Entity<prCompanyCreditCardEmployee>(entity =>
            {
                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEmployee_cdCompanyCreditCard_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEmployee_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardEmployee_cdCurrAcc_FK");

            });

            // Configure relationships for prCompanyCreditCardExpense
            modelBuilder.Entity<prCompanyCreditCardExpense>(entity =>
            {
                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardExpense_cdCompanyCreditCard_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardExpense_cdCurrency_FK");

            });

            // Configure relationships for prCompanyCreditCardUsageFee
            modelBuilder.Entity<prCompanyCreditCardUsageFee>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardUsageFee_cdCurrency_FK");

                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyCreditCardUsageFee_cdCompanyCreditCard_FK");

            });

            // Configure relationships for prCompanyExpense
            modelBuilder.Entity<prCompanyExpense>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpense_cdItem_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpense_cdCompany_FK");

            });

            // Configure relationships for prCompanyExpenseInvoiceConfirmationRule
            modelBuilder.Entity<prCompanyExpenseInvoiceConfirmationRule>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpenseInvoiceConfirmationRule_cdCompany_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpenseInvoiceConfirmationRule_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.SpecifiedWorkplaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpenseInvoiceConfirmationRule_cdWorkPlace_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpenseInvoiceConfirmationRule_cdJobDepartment_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCodeOfSpecifiedWorkplace)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyExpenseInvoiceConfirmationRule_cdJobDepartment_FK");

            });

            // Configure relationships for prCompanyHierarchy
            modelBuilder.Entity<prCompanyHierarchy>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCompanyHierarchy_cdCompany_FK");

            });

            // Configure relationships for prConfirmationFormCommTypes
            modelBuilder.Entity<prConfirmationFormCommTypes>(entity =>
            {
                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationFormCommTypes_cdConfirmationFormType_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationFormCommTypes_cdCommunicationType_FK");

            });

            // Configure relationships for prConfirmationFormContent
            modelBuilder.Entity<prConfirmationFormContent>(entity =>
            {
                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationFormContent_cdConfirmationFormType_FK");

            });

            // Configure relationships for prConfirmationRequiredProductGroups
            modelBuilder.Entity<prConfirmationRequiredProductGroups>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRequiredProductGroups_cdCompany_FK");

            });

            // Configure relationships for prConfirmationRuleStep
            modelBuilder.Entity<prConfirmationRuleStep>(entity =>
            {
                entity.HasOne(d => d.cdConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStep_cdConfirmationRule_FK");

            });

            // Configure relationships for prConfirmationRuleStepUser
            modelBuilder.Entity<prConfirmationRuleStepUser>(entity =>
            {
                entity.HasOne(d => d.prConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStepUser_prConfirmationRuleStep_FK");

                entity.HasOne(d => d.prConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStepUser_prConfirmationRuleStep_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStepUser_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStepUser_cdWorkPlace_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConfirmationRuleStepUser_cdJobDepartment_FK");

            });

            // Configure relationships for prConsentSourceConvert
            modelBuilder.Entity<prConsentSourceConvert>(entity =>
            {
                entity.HasOne(d => d.bsConsentSource)
                    .WithMany()
                    .HasForeignKey(d => d.Source)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConsentSourceConvert_bsConsentSource_FK");

            });

            // Configure relationships for prConvertedJobCandidate
            modelBuilder.Entity<prConvertedJobCandidate>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedJobCandidate_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedJobCandidate_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedJobCandidate_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.JobCandidateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedJobCandidate_cdCurrAcc_FK");

            });

            // Configure relationships for prConvertedPotentialCustomer
            modelBuilder.Entity<prConvertedPotentialCustomer>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.PotentialCustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedPotentialCustomer_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedPotentialCustomer_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.PotentialCustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedPotentialCustomer_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prConvertedPotentialCustomer_cdCurrAcc_FK");

            });

            // Configure relationships for prCostCenterAttribute
            modelBuilder.Entity<prCostCenterAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCostCenterAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterAttribute_cdCostCenterAttribute_FK");

                entity.HasOne(d => d.cdCostCenterAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterAttribute_cdCostCenterAttribute_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterAttribute_cdCostCenter_FK");

            });

            // Configure relationships for prCostCenterCostDriver
            modelBuilder.Entity<prCostCenterCostDriver>(entity =>
            {
                entity.HasOne(d => d.cdExpensePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.ExpensePeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterCostDriver_cdExpensePeriod_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterCostDriver_prCostCenterHierarchy_FK");

            });

            // Configure relationships for prCostCenterHierarchy
            modelBuilder.Entity<prCostCenterHierarchy>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterHierarchy_cdCostCenter_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCostCenterHierarchy_cdCompany_FK");

            });

            // Configure relationships for prCountryCallingCode
            modelBuilder.Entity<prCountryCallingCode>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCountryCallingCode_cdCountry_FK");

            });

            // Configure relationships for prCountryPCTApplicablePaymentTypes
            modelBuilder.Entity<prCountryPCTApplicablePaymentTypes>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCountryPCTApplicablePaymentTypes_cdCountry_FK");

            });

            // Configure relationships for prCreditCardTypeBIN
            modelBuilder.Entity<prCreditCardTypeBIN>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeBIN_cdCreditCardType_FK");

            });

            // Configure relationships for prCreditCardTypeGLAccs
            modelBuilder.Entity<prCreditCardTypeGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_cdCreditCardType_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_cdBank_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_bsProcess_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardTypeGLAccs_bsPostAccType_FK");

            });

            // Configure relationships for prCreditCardValidity
            modelBuilder.Entity<prCreditCardValidity>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditCardValidity_cdBank_FK");

            });

            // Configure relationships for prCreditSurveyorResponsibilityArea
            modelBuilder.Entity<prCreditSurveyorResponsibilityArea>(entity =>
            {
                entity.HasOne(d => d.cdResponsibilityArea)
                    .WithMany()
                    .HasForeignKey(d => d.ResponsibilityAreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditSurveyorResponsibilityArea_cdResponsibilityArea_FK");

                entity.HasOne(d => d.cdCreditSurveyor)
                    .WithMany()
                    .HasForeignKey(d => d.CreditSurveyorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCreditSurveyorResponsibilityArea_cdCreditSurveyor_FK");

            });

            // Configure relationships for prCurrAccAttribute
            modelBuilder.Entity<prCurrAccAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAttribute_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAttribute_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAttribute_cdCurrAccAttribute_FK");

                entity.HasOne(d => d.cdCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAttribute_cdCurrAccAttribute_FK");

                entity.HasOne(d => d.cdCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAttribute_cdCurrAccAttribute_FK");

            });

            // Configure relationships for prCurrAccAvailableForeignCurrencyTrans
            modelBuilder.Entity<prCurrAccAvailableForeignCurrencyTrans>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAvailableForeignCurrencyTrans_cdCurrency_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAvailableForeignCurrencyTrans_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAvailableForeignCurrencyTrans_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccAvailableForeignCurrencyTrans_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccBadDebtStatus
            modelBuilder.Entity<prCurrAccBadDebtStatus>(entity =>
            {
                entity.HasOne(d => d.cdBadDebtReason)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBadDebtStatus_cdBadDebtReason_FK");

                entity.HasOne(d => d.bsDebtStatusType)
                    .WithMany()
                    .HasForeignKey(d => d.DebtStatusTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBadDebtStatus_bsDebtStatusType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBadDebtStatus_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBadDebtStatus_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccBankAccNo
            modelBuilder.Entity<prCurrAccBankAccNo>(entity =>
            {
                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_prBankBranch_FK");

                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankBranchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_prBankBranch_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccBankAccNo_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccCommunication
            modelBuilder.Entity<prCurrAccCommunication>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunication_prCurrAccContact_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunication_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunication_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunication_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunication_cdCommunicationType_FK");

            });

            // Configure relationships for prCurrAccCommunicationEnc
            modelBuilder.Entity<prCurrAccCommunicationEnc>(entity =>
            {
                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunicationEnc_prCurrAccCommunication_FK");

            });

            // Configure relationships for prCurrAccCommunicationFormatted
            modelBuilder.Entity<prCurrAccCommunicationFormatted>(entity =>
            {
                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCommunicationFormatted_prCurrAccCommunication_FK");

            });

            // Configure relationships for prCurrAccCompanyBrand
            modelBuilder.Entity<prCurrAccCompanyBrand>(entity =>
            {
                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccCompanyBrand_cdCompanyBrand_FK");

            });

            // Configure relationships for prCurrAccContact
            modelBuilder.Entity<prCurrAccContact>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_cdJobTitle_FK");

                entity.HasOne(d => d.cdContactType)
                    .WithMany()
                    .HasForeignKey(d => d.ContactTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_cdContactType_FK");

                entity.HasOne(d => d.cdTitle)
                    .WithMany()
                    .HasForeignKey(d => d.TitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccContact_cdTitle_FK");

            });

            // Configure relationships for prCurrAccDefault
            modelBuilder.Entity<prCurrAccDefault>(entity =>
            {
                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.PostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.EArchieveEMailCommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.EArchieveMobileCommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.OfficePhoneID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.HomePhoneID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.BusinessMobileID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.PersonalMobileID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.GuidedSalesNotificationEmailID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.GuidedSalesNotificationPhoneID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCurrAccContact_FK");

                entity.HasOne(d => d.prCustomerPresentCard)
                    .WithMany()
                    .HasForeignKey(d => d.CardNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prCustomerPresentCard_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccDefault_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccEInvoiceAlias
            modelBuilder.Entity<prCurrAccEInvoiceAlias>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceAlias_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceAlias_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceAlias_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccEInvoiceOfficialForm
            modelBuilder.Entity<prCurrAccEInvoiceOfficialForm>(entity =>
            {
                entity.HasOne(d => d.bsInvoiceType)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceOfficialForm_bsInvoiceType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceOfficialForm_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEInvoiceOfficialForm_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccEnc
            modelBuilder.Entity<prCurrAccEnc>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEnc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEnc_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccEShipmentAlias
            modelBuilder.Entity<prCurrAccEShipmentAlias>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEShipmentAlias_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEShipmentAlias_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccEShipmentOfficialForm
            modelBuilder.Entity<prCurrAccEShipmentOfficialForm>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEShipmentOfficialForm_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccEShipmentOfficialForm_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccExtendedProperties
            modelBuilder.Entity<prCurrAccExtendedProperties>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccExtendedProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccExtendedProperties_bsMarketPlace_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccExtendedProperties_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccGLAccount
            modelBuilder.Entity<prCurrAccGLAccount>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAdvanceGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceSalesGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_bsPostAccType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccGLAccount_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccInformation
            modelBuilder.Entity<prCurrAccInformation>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccInformation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccInformation_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccListContent
            modelBuilder.Entity<prCurrAccListContent>(entity =>
            {
                entity.HasOne(d => d.cdCurrAccList)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccListCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccListContent_cdCurrAccList_FK");

            });

            // Configure relationships for prCurrAccLotGrAtt
            modelBuilder.Entity<prCurrAccLotGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccLotGrAtt_cdLot_FK");

                entity.HasOne(d => d.cdCurrAccLotGr)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccLotGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccLotGrAtt_cdCurrAccLotGr_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccLotGrAtt_cdCompany_FK");

            });

            // Configure relationships for prCurrAccMapLocation
            modelBuilder.Entity<prCurrAccMapLocation>(entity =>
            {
                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.PostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccMapLocation_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccMapLocation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccMapLocation_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccNotes
            modelBuilder.Entity<prCurrAccNotes>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccNotes_cdDataLanguage_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccNotes_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccNotes_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccOnlineBank
            modelBuilder.Entity<prCurrAccOnlineBank>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdCostCenter_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdGLType_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdBankOpType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOnlineBank_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccOptInOptOutStatus
            modelBuilder.Entity<prCurrAccOptInOptOutStatus>(entity =>
            {
                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOptInOptOutStatus_cdConfirmationFormType_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOptInOptOutStatus_prCurrAccCommunication_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOptInOptOutStatus_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdConfirmationFormStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccOptInOptOutStatus_cdConfirmationFormStatus_FK");

            });

            // Configure relationships for prCurrAccPersonalDataConfirmation
            modelBuilder.Entity<prCurrAccPersonalDataConfirmation>(entity =>
            {
                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdPermissionMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.PermissionMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdPermissionMarketingService_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdOffice_FK");

                entity.HasOne(d => d.cdInactivationReason)
                    .WithMany()
                    .HasForeignKey(d => d.InactivationReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdInactivationReason_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdConfirmationFormType_FK");

                entity.HasOne(d => d.cdConfirmationFormStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdConfirmationFormStatus_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmation_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccPersonalDataConfirmationStatus
            modelBuilder.Entity<prCurrAccPersonalDataConfirmationStatus>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmationStatus_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalDataConfirmationStatus_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccPersonalInfo
            modelBuilder.Entity<prCurrAccPersonalInfo>(entity =>
            {
                entity.HasOne(d => d.cdMilitaryServiceStatus)
                    .WithMany()
                    .HasForeignKey(d => d.MilitaryServiceStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdMilitaryServiceStatus_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_prCurrAccContact_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.RegisteredCityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdCity_FK");

                entity.HasOne(d => d.bsGender)
                    .WithMany()
                    .HasForeignKey(d => d.GenderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_bsGender_FK");

                entity.HasOne(d => d.cdRecidivistType)
                    .WithMany()
                    .HasForeignKey(d => d.RecidivistTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdRecidivistType_FK");

                entity.HasOne(d => d.cdHandicapType)
                    .WithMany()
                    .HasForeignKey(d => d.HandicapTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdHandicapType_FK");

                entity.HasOne(d => d.cdMaladyType)
                    .WithMany()
                    .HasForeignKey(d => d.MaladyTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdMaladyType_FK");

                entity.HasOne(d => d.cdEducationStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EducationStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdEducationStatus_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.RegisteredDistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdDistrict_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdCurrency_FK");

                entity.HasOne(d => d.cdBloodType)
                    .WithMany()
                    .HasForeignKey(d => d.BloodTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdBloodType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPersonalInfo_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccPhoto
            modelBuilder.Entity<prCurrAccPhoto>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPhoto_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPhoto_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccPostalAddress
            modelBuilder.Entity<prCurrAccPostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdDistrict_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdTaxOffice_FK");

                entity.HasOne(d => d.cdAddressType)
                    .WithMany()
                    .HasForeignKey(d => d.AddressTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdAddressType_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdState_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdCity_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_prCurrAccContact_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdCountry_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccPostalAddress_prSubCurrAcc_FK");

            });

            // Configure relationships for prCurrAccReconciliationContact
            modelBuilder.Entity<prCurrAccReconciliationContact>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContact_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.MobilePhoneCommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContact_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.EMailCommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContact_prCurrAccCommunication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContact_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContact_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccReconciliationContactReports
            modelBuilder.Entity<prCurrAccReconciliationContactReports>(entity =>
            {
                entity.HasOne(d => d.prCurrAccReconciliationContact)
                    .WithMany()
                    .HasForeignKey(d => d.ReconciliationContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContactReports_prCurrAccReconciliationContact_FK");

                entity.HasOne(d => d.cdReconciliation)
                    .WithMany()
                    .HasForeignKey(d => d.ReconciliationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccReconciliationContactReports_cdReconciliation_FK");

            });

            // Configure relationships for prCurrAccUBLExtensions
            modelBuilder.Entity<prCurrAccUBLExtensions>(entity =>
            {
                entity.HasOne(d => d.bsUBLExtensions)
                    .WithMany()
                    .HasForeignKey(d => d.UBLExtensionField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUBLExtensions_bsUBLExtensions_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUBLExtensions_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUBLExtensions_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccUserWarning
            modelBuilder.Entity<prCurrAccUserWarning>(entity =>
            {
                entity.HasOne(d => d.cdStoreCRMGroup)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCRMGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUserWarning_cdStoreCRMGroup_FK");

                entity.HasOne(d => d.cdUserWarning)
                    .WithMany()
                    .HasForeignKey(d => d.UserWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUserWarning_cdUserWarning_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUserWarning_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUserWarning_cdCurrAcc_FK");

            });

            // Configure relationships for prCurrAccUTSInformation
            modelBuilder.Entity<prCurrAccUTSInformation>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUTSInformation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUTSInformation_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCurrAccUTSInformation_prSubCurrAcc_FK");

            });

            // Configure relationships for prCustomerCompanyBrandAttribute
            modelBuilder.Entity<prCustomerCompanyBrandAttribute>(entity =>
            {
                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCompanyBrandAttribute_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdCustomerAlertColor)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerAlertColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCompanyBrandAttribute_cdCustomerAlertColor_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCompanyBrandAttribute_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCompanyBrandAttribute_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerConversation
            modelBuilder.Entity<prCustomerConversation>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCompany_FK");

                entity.HasOne(d => d.cdCustomerConversationSubjectDetail)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationSubjectDetailCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCustomerConversationSubjectDetail_FK");

                entity.HasOne(d => d.cdCustomerConversationSubtitle)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationSubtitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCustomerConversationSubtitle_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdOffice_FK");

                entity.HasOne(d => d.cdCustomerConversationSubject)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationSubjectCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCustomerConversationSubject_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RelatedStoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RelatedStoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCustomerConversationResult)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationResultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversation_cdCustomerConversationResult_FK");

            });

            // Configure relationships for prCustomerConversationSubjectRelatedResult
            modelBuilder.Entity<prCustomerConversationSubjectRelatedResult>(entity =>
            {
                entity.HasOne(d => d.cdCustomerConversationSubject)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationSubjectCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversationSubjectRelatedResult_cdCustomerConversationSubject_FK");

                entity.HasOne(d => d.cdCustomerConversationResult)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerConversationResultCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerConversationSubjectRelatedResult_cdCustomerConversationResult_FK");

            });

            // Configure relationships for prCustomerCreditLimit
            modelBuilder.Entity<prCustomerCreditLimit>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCreditLimit_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCreditLimit_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerCreditLimit_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerDBSAccount
            modelBuilder.Entity<prCustomerDBSAccount>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdBank_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdCompany_FK");

                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineDBSWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdOnlineDBSWebService_FK");

                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdOnlineDBSWebService_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDBSAccount_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerDiscountGrAtt
            modelBuilder.Entity<prCustomerDiscountGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDiscountGrAtt_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDiscountGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdDiscountType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerDiscountGrAtt_cdDiscountType_FK");

            });

            // Configure relationships for prCustomerLoyaltyProgram
            modelBuilder.Entity<prCustomerLoyaltyProgram>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatusModifyReason)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusModifyReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdLoyaltyProgramStatusModifyReason_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdLoyaltyProgramLevel)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdLoyaltyProgramLevel_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgram_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerLoyaltyProgramHistory
            modelBuilder.Entity<prCustomerLoyaltyProgramHistory>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgramLevel)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdLoyaltyProgramLevel_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatusModifyReason)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusModifyReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdLoyaltyProgramStatusModifyReason_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerLoyaltyProgramHistory_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerMarkupGrAtt
            modelBuilder.Entity<prCustomerMarkupGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdCustomerMarkupGr)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerMarkupGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerMarkupGrAtt_cdCustomerMarkupGr_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerMarkupGrAtt_cdCompany_FK");

            });

            // Configure relationships for prCustomerOnlinePayment
            modelBuilder.Entity<prCustomerOnlinePayment>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerOnlinePayment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerOnlinePayment_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerOnlinePaymentContact
            modelBuilder.Entity<prCustomerOnlinePaymentContact>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerOnlinePaymentContact_prCurrAccContact_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerOnlinePaymentContact_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerOnlinePaymentContact_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerPaymentPlanGrAtt
            modelBuilder.Entity<prCustomerPaymentPlanGrAtt>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPaymentPlanGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPaymentPlanGrAtt_cdCompany_FK");

                entity.HasOne(d => d.cdCustomerPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPaymentPlanGrAtt_cdCustomerPaymentPlanGr_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPaymentPlanGrAtt_cdPaymentPlan_FK");

            });

            // Configure relationships for prCustomerPresentCard
            modelBuilder.Entity<prCustomerPresentCard>(entity =>
            {
                entity.HasOne(d => d.bsPresentCardActivationStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ActivationStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_bsPresentCardActivationStatus_FK");

                entity.HasOne(d => d.cdPresentCardType)
                    .WithMany()
                    .HasForeignKey(d => d.PresentCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdPresentCardType_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdConfirmationFormType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_prCurrAccContact_FK");

                entity.HasOne(d => d.cdInactivationReason)
                    .WithMany()
                    .HasForeignKey(d => d.InactivationReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdInactivationReason_FK");

                entity.HasOne(d => d.cdCustomerCRMGroup)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCRMGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdCustomerCRMGroup_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdCreditCardType_FK");

                entity.HasOne(d => d.cdConfirmationFormStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdConfirmationFormStatus_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerPresentCard_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerSalesperson
            modelBuilder.Entity<prCustomerSalesperson>(entity =>
            {
                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerSalesperson_cdSalesperson_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerSalesperson_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerSalesperson_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerStore
            modelBuilder.Entity<prCustomerStore>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerStore_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerStore_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerStore_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerVendorAccount
            modelBuilder.Entity<prCustomerVendorAccount>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVendorAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVendorAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVendorAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVendorAccount_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomerVerificationPassword
            modelBuilder.Entity<prCustomerVerificationPassword>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomerVerificationPassword_cdCurrAcc_FK");

            });

            // Configure relationships for prCustomProcessGroupAtt
            modelBuilder.Entity<prCustomProcessGroupAtt>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ServiceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomProcessGroupAtt_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomProcessGroupAtt_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomProcessGroupAtt_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomProcessGroupAtt_cdItem_FK");

                entity.HasOne(d => d.cdCustomProcessGroup)
                    .WithMany()
                    .HasForeignKey(d => d.CustomProcessGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prCustomProcessGroupAtt_cdCustomProcessGroup_FK");

            });

            // Configure relationships for prDataTransferCompanyParameter
            modelBuilder.Entity<prDataTransferCompanyParameter>(entity =>
            {
                entity.HasOne(d => d.cdDataTransferCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferCompanyParameter_cdDataTransferCompany_FK");

            });

            // Configure relationships for prDataTransferJobClients
            modelBuilder.Entity<prDataTransferJobClients>(entity =>
            {
                entity.HasOne(d => d.cdDataTransferCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferJobClients_cdDataTransferCompany_FK");

                entity.HasOne(d => d.cdDataTransferJob)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferJobID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferJobClients_cdDataTransferJob_FK");

            });

            // Configure relationships for prDataTransferJobSchedule
            modelBuilder.Entity<prDataTransferJobSchedule>(entity =>
            {
                entity.HasOne(d => d.cdDataTransferJob)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferJobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferJobSchedule_cdDataTransferJob_FK");

                entity.HasOne(d => d.cdDataTransferSchedule)
                    .WithMany()
                    .HasForeignKey(d => d.ScheduleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferJobSchedule_cdDataTransferSchedule_FK");

            });

            // Configure relationships for prDataTransferTemplateQuery
            modelBuilder.Entity<prDataTransferTemplateQuery>(entity =>
            {
                entity.HasOne(d => d.prDataTransferTemplateQueryFilter)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferTemplateQueryFilterID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferTemplateQuery_prDataTransferTemplateQueryFilter_FK");

                entity.HasOne(d => d.cdDataTransferTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.DataTransferTemplateID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferTemplateQuery_cdDataTransferTemplate_FK");

                entity.HasOne(d => d.bsSendingData)
                    .WithMany()
                    .HasForeignKey(d => d.TransferName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferTemplateQuery_bsSendingData_FK");

                entity.HasOne(d => d.bsSendingData)
                    .WithMany()
                    .HasForeignKey(d => d.ElementName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferTemplateQuery_bsSendingData_FK");

            });

            // Configure relationships for prDataTransferTemplateQueryFilter
            modelBuilder.Entity<prDataTransferTemplateQueryFilter>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDataTransferTemplateQueryFilter_cdDataLanguage_FK");

            });

            // Configure relationships for prDeclarationGLAccs
            modelBuilder.Entity<prDeclarationGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsDeclarationType)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationGLAccs_bsDeclarationType_FK");

                entity.HasOne(d => d.bsDeclarationPostType)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationPostTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationGLAccs_bsDeclarationPostType_FK");

            });

            // Configure relationships for prDeclarationTypeDetail
            modelBuilder.Entity<prDeclarationTypeDetail>(entity =>
            {
                entity.HasOne(d => d.bsDeclarationType)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationTypeDetail_bsDeclarationType_FK");

            });

            // Configure relationships for prDeclarationXML
            modelBuilder.Entity<prDeclarationXML>(entity =>
            {
                entity.HasOne(d => d.cdDeclaration)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationXML_cdDeclaration_FK");

                entity.HasOne(d => d.cdDeclaration)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationXML_cdDeclaration_FK");

                entity.HasOne(d => d.cdDeclaration)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeclarationXML_cdDeclaration_FK");

            });

            // Configure relationships for prDeliveryCompanyMarketPlaceMapping
            modelBuilder.Entity<prDeliveryCompanyMarketPlaceMapping>(entity =>
            {
                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeliveryCompanyMarketPlaceMapping_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeliveryCompanyMarketPlaceMapping_cdDeliveryCompany_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDeliveryCompanyMarketPlaceMapping_bsMarketPlace_FK");

            });

            // Configure relationships for prDigitalChannelStockConfiguration
            modelBuilder.Entity<prDigitalChannelStockConfiguration>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDigitalChannelStockConfiguration_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDigitalChannelStockConfiguration_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDigitalChannelStockConfiguration_cdCurrAcc_FK");

            });

            // Configure relationships for prDiscountOfferActiveLog
            modelBuilder.Entity<prDiscountOfferActiveLog>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferActiveLog_cdDiscountOffer_FK");

            });

            // Configure relationships for prDiscountOfferAttribute
            modelBuilder.Entity<prDiscountOfferAttribute>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferAttribute_cdDiscountOffer_FK");

                entity.HasOne(d => d.cdDiscountOfferAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferAttribute_cdDiscountOfferAttribute_FK");

                entity.HasOne(d => d.cdDiscountOfferAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferAttribute_cdDiscountOfferAttribute_FK");

            });

            // Configure relationships for prDiscountOfferDescription
            modelBuilder.Entity<prDiscountOfferDescription>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferDescription_cdDataLanguage_FK");

                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferDescription_cdDiscountOffer_FK");

            });

            // Configure relationships for prDiscountOfferNotes
            modelBuilder.Entity<prDiscountOfferNotes>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferNotes_cdDiscountOffer_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferNotes_cdDataLanguage_FK");

            });

            // Configure relationships for prDiscountOfferParameterValue
            modelBuilder.Entity<prDiscountOfferParameterValue>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferParameterValue_cdDiscountOffer_FK");

            });

            // Configure relationships for prDiscountOfferPassword
            modelBuilder.Entity<prDiscountOfferPassword>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferPassword_cdDiscountOffer_FK");

            });

            // Configure relationships for prDiscountOfferPaymentProvider
            modelBuilder.Entity<prDiscountOfferPaymentProvider>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferPaymentProvider_cdDiscountOffer_FK");

                entity.HasOne(d => d.bsDiscountOfferStage)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferStageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferPaymentProvider_bsDiscountOfferStage_FK");

                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferPaymentProvider_cdPaymentProvider_FK");

            });

            // Configure relationships for prDiscountOfferRules
            modelBuilder.Entity<prDiscountOfferRules>(entity =>
            {
                entity.HasOne(d => d.cdTimePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.TimePeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdTimePeriod_FK");

                entity.HasOne(d => d.cdAmountRule)
                    .WithMany()
                    .HasForeignKey(d => d.AmountRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdAmountRule_FK");

                entity.HasOne(d => d.cdCurrAccList)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccListCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdCurrAccList_FK");

                entity.HasOne(d => d.bsDiscountOfferStage)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferStageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_bsDiscountOfferStage_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdDiscountOffer_FK");

                entity.HasOne(d => d.cdItemList)
                    .WithMany()
                    .HasForeignKey(d => d.ItemListCodeForWinning)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdItemList_FK");

                entity.HasOne(d => d.cdItemList)
                    .WithMany()
                    .HasForeignKey(d => d.ItemListCodeForUsing)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdItemList_FK");

                entity.HasOne(d => d.cdDigitalMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.DigitalMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferRules_cdDigitalMarketingService_FK");

            });

            // Configure relationships for prDiscountOfferTurnoverTarget
            modelBuilder.Entity<prDiscountOfferTurnoverTarget>(entity =>
            {
                entity.HasOne(d => d.cdDiscountOffer)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountOfferCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferTurnoverTarget_cdDiscountOffer_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferTurnoverTarget_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountOfferTurnoverTarget_cdCurrAcc_FK");

            });

            // Configure relationships for prDiscountPoint
            modelBuilder.Entity<prDiscountPoint>(entity =>
            {
                entity.HasOne(d => d.cdPointModifyReason)
                    .WithMany()
                    .HasForeignKey(d => d.PointModifyReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPoint_cdPointModifyReason_FK");

                entity.HasOne(d => d.cdDiscountPointType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountPointTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPoint_cdDiscountPointType_FK");

                entity.HasOne(d => d.bsPointRecordType)
                    .WithMany()
                    .HasForeignKey(d => d.PointRecordTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPoint_bsPointRecordType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPoint_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPoint_cdCurrAcc_FK");

            });

            // Configure relationships for prDiscountPointTypeNotes
            modelBuilder.Entity<prDiscountPointTypeNotes>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPointTypeNotes_cdDataLanguage_FK");

                entity.HasOne(d => d.cdDiscountPointType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountPointTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountPointTypeNotes_cdDiscountPointType_FK");

            });

            // Configure relationships for prDiscountReasonSubReason
            modelBuilder.Entity<prDiscountReasonSubReason>(entity =>
            {
                entity.HasOne(d => d.cdDiscountReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountReasonSubReason_cdDiscountReason_FK");

                entity.HasOne(d => d.cdDiscountSubReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountSubReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountReasonSubReason_cdDiscountSubReason_FK");

            });

            // Configure relationships for prDiscountTypeGLAccs
            modelBuilder.Entity<prDiscountTypeGLAccs>(entity =>
            {
                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdDiscountType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_cdDiscountType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdItemAccountGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemAccountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_cdItemAccountGr_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountTypeGLAccs_bsProcess_FK");

            });

            // Configure relationships for prDiscountVoucherTypeNotes
            modelBuilder.Entity<prDiscountVoucherTypeNotes>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountVoucherTypeNotes_cdDataLanguage_FK");

                entity.HasOne(d => d.cdDiscountVoucherType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountVoucherTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDiscountVoucherTypeNotes_cdDiscountVoucherType_FK");

            });

            // Configure relationships for prDistrictMapLocation
            modelBuilder.Entity<prDistrictMapLocation>(entity =>
            {
                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDistrictMapLocation_cdDistrict_FK");

            });

            // Configure relationships for prDOVGLAccs
            modelBuilder.Entity<prDOVGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_bsProcess_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_cdDOV_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prDOVGLAccs_cdOffice_FK");

            });

            // Configure relationships for prEArchiveWebServiceCompany
            modelBuilder.Entity<prEArchiveWebServiceCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceCompany_cdCompany_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EArchiveWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceCompany_cdEArchiveWebService_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceCompany_cdEArchiveWebService_FK");

            });

            // Configure relationships for prEArchiveWebServiceOffice
            modelBuilder.Entity<prEArchiveWebServiceOffice>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceOffice_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceOffice_cdOffice_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceOffice_cdEArchiveWebService_FK");

                entity.HasOne(d => d.cdEArchiveWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EArchiveWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEArchiveWebServiceOffice_cdEArchiveWebService_FK");

            });

            // Configure relationships for prEasyStartupComments
            modelBuilder.Entity<prEasyStartupComments>(entity =>
            {
                entity.HasOne(d => d.bsEasyStartupSteps)
                    .WithMany()
                    .HasForeignKey(d => d.EasyStartupStepCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEasyStartupComments_bsEasyStartupSteps_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEasyStartupComments_cdDataLanguage_FK");

            });

            // Configure relationships for prEasyStartupNotes
            modelBuilder.Entity<prEasyStartupNotes>(entity =>
            {
                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEasyStartupNotes_cdDataLanguage_FK");

                entity.HasOne(d => d.bsEasyStartupSteps)
                    .WithMany()
                    .HasForeignKey(d => d.EasyStartupStepCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEasyStartupNotes_bsEasyStartupSteps_FK");

            });

            // Configure relationships for prEInvoiceWebServiceCompany
            modelBuilder.Entity<prEInvoiceWebServiceCompany>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceCompany_cdCompany_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceCompany_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceCompany_cdEInvoiceWebService_FK");

            });

            // Configure relationships for prEInvoiceWebServiceOffice
            modelBuilder.Entity<prEInvoiceWebServiceOffice>(entity =>
            {
                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceOffice_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdEInvoiceWebService)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceOffice_cdEInvoiceWebService_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceOffice_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEInvoiceWebServiceOffice_cdOffice_FK");

            });

            // Configure relationships for prEmployee7252Incentive
            modelBuilder.Entity<prEmployee7252Incentive>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployee7252Incentive_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployee7252Incentive_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeDocument
            modelBuilder.Entity<prEmployeeDocument>(entity =>
            {
                entity.HasOne(d => d.cdEmployeeDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeDocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeDocument_cdEmployeeDocumentType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeDocument_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeDocument_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeEducation
            modelBuilder.Entity<prEmployeeEducation>(entity =>
            {
                entity.HasOne(d => d.cdUniversityLevel)
                    .WithMany()
                    .HasForeignKey(d => d.UniversityLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdUniversityLevel_FK");

                entity.HasOne(d => d.cdUniversity)
                    .WithMany()
                    .HasForeignKey(d => d.UniversityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdUniversity_FK");

                entity.HasOne(d => d.cdUniversityFaculty)
                    .WithMany()
                    .HasForeignKey(d => d.UniversityFacultyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdUniversityFaculty_FK");

                entity.HasOne(d => d.cdUniversityFacultyDep)
                    .WithMany()
                    .HasForeignKey(d => d.UniversityFacultyDepCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdUniversityFacultyDep_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeEducation_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeForeignLanguage
            modelBuilder.Entity<prEmployeeForeignLanguage>(entity =>
            {
                entity.HasOne(d => d.cdKnowLevel)
                    .WithMany()
                    .HasForeignKey(d => d.ReadKnowLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdKnowLevel_FK");

                entity.HasOne(d => d.cdKnowLevel)
                    .WithMany()
                    .HasForeignKey(d => d.WriteKnowLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdKnowLevel_FK");

                entity.HasOne(d => d.cdKnowLevel)
                    .WithMany()
                    .HasForeignKey(d => d.SpeakKnowLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdKnowLevel_FK");

                entity.HasOne(d => d.cdForeignLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.ForeignLanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdForeignLanguage_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeForeignLanguage_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeJobTraining
            modelBuilder.Entity<prEmployeeJobTraining>(entity =>
            {
                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.JobTrainingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeJobTraining_cdJobTraining_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeJobTraining_cdJobTraining_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeJobTraining_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeJobTraining_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeLeaveDay
            modelBuilder.Entity<prEmployeeLeaveDay>(entity =>
            {
                entity.HasOne(d => d.prEmployeeLeaveRequest)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeLeaveRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveDay_prEmployeeLeaveRequest_FK");

                entity.HasOne(d => d.cdMissingWorkReason)
                    .WithMany()
                    .HasForeignKey(d => d.MissingWorkReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveDay_cdMissingWorkReason_FK");

                entity.HasOne(d => d.cdLeaveType)
                    .WithMany()
                    .HasForeignKey(d => d.LeaveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveDay_cdLeaveType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveDay_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveDay_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeLeaveHour
            modelBuilder.Entity<prEmployeeLeaveHour>(entity =>
            {
                entity.HasOne(d => d.cdLeaveType)
                    .WithMany()
                    .HasForeignKey(d => d.LeaveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveHour_cdLeaveType_FK");

                entity.HasOne(d => d.cdMissingWorkReason)
                    .WithMany()
                    .HasForeignKey(d => d.MissingWorkReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveHour_cdMissingWorkReason_FK");

                entity.HasOne(d => d.prEmployeeLeaveRequestHour)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeLeaveRequestHourID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveHour_prEmployeeLeaveRequestHour_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveHour_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveHour_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeLeaveRequest
            modelBuilder.Entity<prEmployeeLeaveRequest>(entity =>
            {
                entity.HasOne(d => d.cdLeaveType)
                    .WithMany()
                    .HasForeignKey(d => d.LeaveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequest_cdLeaveType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequest_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequest_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeLeaveRequestHour
            modelBuilder.Entity<prEmployeeLeaveRequestHour>(entity =>
            {
                entity.HasOne(d => d.cdLeaveType)
                    .WithMany()
                    .HasForeignKey(d => d.LeaveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequestHour_cdLeaveType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequestHour_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveRequestHour_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeLeaveTransfered
            modelBuilder.Entity<prEmployeeLeaveTransfered>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveTransfered_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeLeaveTransfered_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeePrevJob
            modelBuilder.Entity<prEmployeePrevJob>(entity =>
            {
                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdCity_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdState_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdCountry_FK");

                entity.HasOne(d => d.cdJobType)
                    .WithMany()
                    .HasForeignKey(d => d.JobTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdJobType_FK");

                entity.HasOne(d => d.cdPrevJobType)
                    .WithMany()
                    .HasForeignKey(d => d.PrevJobTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdPrevJobType_FK");

                entity.HasOne(d => d.cdIndustry)
                    .WithMany()
                    .HasForeignKey(d => d.IndustryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdIndustry_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdJobTitle_FK");

                entity.HasOne(d => d.cdResignation)
                    .WithMany()
                    .HasForeignKey(d => d.ResignationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdResignation_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeePrevJob_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeRecord
            modelBuilder.Entity<prEmployeeRecord>(entity =>
            {
                entity.HasOne(d => d.cdEmployeeRecordType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeRecordTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRecord_cdEmployeeRecordType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRecord_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRecord_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeRemoteWorkDays
            modelBuilder.Entity<prEmployeeRemoteWorkDays>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRemoteWorkDays_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRemoteWorkDays_cdWorkPlace_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRemoteWorkDays_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeRemoteWorkDays_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeSeniorityTransfered
            modelBuilder.Entity<prEmployeeSeniorityTransfered>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSeniorityTransfered_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSeniorityTransfered_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeShoppingLimit
            modelBuilder.Entity<prEmployeeShoppingLimit>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeShoppingLimit_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeShoppingLimit_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeShoppingLimit_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeSoftware
            modelBuilder.Entity<prEmployeeSoftware>(entity =>
            {
                entity.HasOne(d => d.cdKnowLevel)
                    .WithMany()
                    .HasForeignKey(d => d.KnowLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSoftware_cdKnowLevel_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSoftware_cdCurrAcc_FK");

                entity.HasOne(d => d.cdSoftware)
                    .WithMany()
                    .HasForeignKey(d => d.SoftwareCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSoftware_cdSoftware_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeSoftware_cdCurrAcc_FK");

            });

            // Configure relationships for prEmployeeWorkplaceInformation
            modelBuilder.Entity<prEmployeeWorkplaceInformation>(entity =>
            {
                entity.HasOne(d => d.cdBusinessGroup)
                    .WithMany()
                    .HasForeignKey(d => d.BusinessGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdBusinessGroup_FK");

                entity.HasOne(d => d.cdMainJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.MainJobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdMainJobTitle_FK");

                entity.HasOne(d => d.cdWorkForce)
                    .WithMany()
                    .HasForeignKey(d => d.WorkForceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdWorkForce_FK");

                entity.HasOne(d => d.cdSubJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.SubJobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdSubJobDepartment_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdWorkPlace_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdJobTitle_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prEmployeeWorkplaceInformation_cdJobDepartment_FK");

            });

            // Configure relationships for prExpenseInvoiceConfirmationRule
            modelBuilder.Entity<prExpenseInvoiceConfirmationRule>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.SpecifiedWorkplaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdWorkPlace_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdOffice_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdJobDepartment_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCodeOfSpecifiedWorkplace)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdJobDepartment_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExpenseInvoiceConfirmationRule_cdCurrAcc_FK");

            });

            // Configure relationships for prExportFileAttribute
            modelBuilder.Entity<prExportFileAttribute>(entity =>
            {
                entity.HasOne(d => d.cdExportFileAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileAttribute_cdExportFileAttribute_FK");

                entity.HasOne(d => d.cdExportFileAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileAttribute_cdExportFileAttribute_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileAttribute_cdExportFile_FK");

            });

            // Configure relationships for prExportFileIndirectExpense
            modelBuilder.Entity<prExportFileIndirectExpense>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileIndirectExpense_cdExportFile_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileIndirectExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileIndirectExpense_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileIndirectExpense_cdCurrency_FK");

            });

            // Configure relationships for prExportFileInsurance
            modelBuilder.Entity<prExportFileInsurance>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileInsurance_cdCurrency_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileInsurance_cdExportFile_FK");

                entity.HasOne(d => d.cdInsuranceType)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileInsurance_cdInsuranceType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileInsurance_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileInsurance_cdCurrAcc_FK");

            });

            // Configure relationships for prExportFileShippingInfo
            modelBuilder.Entity<prExportFileShippingInfo>(entity =>
            {
                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdShipmentMethod_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.DepartureCountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdCountry_FK");

                entity.HasOne(d => d.cdContainerType)
                    .WithMany()
                    .HasForeignKey(d => d.ContainerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdContainerType_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_bsIncoterm_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdExportFile_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.LadingPortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdPort_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.DischargePortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileShippingInfo_cdPort_FK");

            });

            // Configure relationships for prExportFileStatusHistory
            modelBuilder.Entity<prExportFileStatusHistory>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileStatusHistory_cdExportFile_FK");

                entity.HasOne(d => d.cdForeignTradeStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ForeignTradeStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prExportFileStatusHistory_cdForeignTradeStatus_FK");

            });

            // Configure relationships for prFixedAssetDepreciationInfo
            modelBuilder.Entity<prFixedAssetDepreciationInfo>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdGLType_FK");

                entity.HasOne(d => d.cdFixedAssetType)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdFixedAssetType_FK");

                entity.HasOne(d => d.bsDepreciationMethod)
                    .WithMany()
                    .HasForeignKey(d => d.DepreciationMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_bsDepreciationMethod_FK");

                entity.HasOne(d => d.bsDepreciationMethod)
                    .WithMany()
                    .HasForeignKey(d => d.DepreciationMethodCodeTMS16)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_bsDepreciationMethod_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetDepreciationInfo_cdCostCenter_FK");

            });

            // Configure relationships for prFixedAssetEmployee
            modelBuilder.Entity<prFixedAssetEmployee>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetEmployee_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetEmployee_cdItem_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetEmployee_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetEmployee_cdCurrAcc_FK");

            });

            // Configure relationships for prFixedAssetExpense
            modelBuilder.Entity<prFixedAssetExpense>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_cdCurrency_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_trInvoiceLine_FK");

                entity.HasOne(d => d.prFixedAssetReassessmentRates)
                    .WithMany()
                    .HasForeignKey(d => d.ReassessmentRateLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_prFixedAssetReassessmentRates_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpense_trJournalHeader_FK");

            });

            // Configure relationships for prFixedAssetExpenseReassessment
            modelBuilder.Entity<prFixedAssetExpenseReassessment>(entity =>
            {
                entity.HasOne(d => d.prFixedAssetExpense)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetExpenseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetExpenseReassessment_prFixedAssetExpense_FK");

            });

            // Configure relationships for prFixedAssetInflationAdjustment
            modelBuilder.Entity<prFixedAssetInflationAdjustment>(entity =>
            {
                entity.HasOne(d => d.prFixedAssetExpense)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetExpenseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInflationAdjustment_prFixedAssetExpense_FK");

            });

            // Configure relationships for prFixedAssetInsurance
            modelBuilder.Entity<prFixedAssetInsurance>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdCurrency_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdItem_FK");

                entity.HasOne(d => d.cdInsuranceType)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdInsuranceType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetInsurance_cdCurrAcc_FK");

            });

            // Configure relationships for prFixedAssetPurchases
            modelBuilder.Entity<prFixedAssetPurchases>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetPurchases_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetPurchases_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetPurchases_cdCurrency_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetPurchases_trInvoiceLine_FK");

            });

            // Configure relationships for prFixedAssetReassessmentRates
            modelBuilder.Entity<prFixedAssetReassessmentRates>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetReassessmentRates_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetReassessmentRates_cdItem_FK");

            });

            // Configure relationships for prFixedAssetSales
            modelBuilder.Entity<prFixedAssetSales>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetSales_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetSales_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetSales_cdCurrency_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetSales_trInvoiceLine_FK");

            });

            // Configure relationships for prFixedAssetStatusHistory
            modelBuilder.Entity<prFixedAssetStatusHistory>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetStatusHistory_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetStatusHistory_cdItem_FK");

                entity.HasOne(d => d.cdFixedAssetStatus)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prFixedAssetStatusHistory_cdFixedAssetStatus_FK");

            });

            // Configure relationships for prGiftCardCharge
            modelBuilder.Entity<prGiftCardCharge>(entity =>
            {
                entity.HasOne(d => d.cdGiftCard)
                    .WithMany()
                    .HasForeignKey(d => d.SerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGiftCardCharge_cdGiftCard_FK");

            });

            // Configure relationships for prGLAccAttribute
            modelBuilder.Entity<prGLAccAttribute>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAttribute_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAttribute_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAttribute_cdGLAccAttribute_FK");

                entity.HasOne(d => d.cdGLAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAttribute_cdGLAccAttribute_FK");

            });

            // Configure relationships for prGLAccAvailableForeignCurrencyTrans
            modelBuilder.Entity<prGLAccAvailableForeignCurrencyTrans>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableForeignCurrencyTrans_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableForeignCurrencyTrans_cdGLAcc_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableForeignCurrencyTrans_cdCurrency_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableForeignCurrencyTrans_cdCompany_FK");

            });

            // Configure relationships for prGLAccAvailableJournalTypeSub
            modelBuilder.Entity<prGLAccAvailableJournalTypeSub>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableJournalTypeSub_cdGLAcc_FK");

                entity.HasOne(d => d.cdJournalTypeSub)
                    .WithMany()
                    .HasForeignKey(d => d.JournalTypeSubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableJournalTypeSub_cdJournalTypeSub_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccAvailableJournalTypeSub_cdGLAcc_FK");

            });

            // Configure relationships for prGLAccNotes
            modelBuilder.Entity<prGLAccNotes>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccNotes_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccNotes_cdGLAcc_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccNotes_cdDataLanguage_FK");

            });

            // Configure relationships for prGLAccOnlineBank
            modelBuilder.Entity<prGLAccOnlineBank>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdGLAcc_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdGLType_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccOnlineBank_cdBankOpType_FK");

            });

            // Configure relationships for prGLAccUserWarning
            modelBuilder.Entity<prGLAccUserWarning>(entity =>
            {
                entity.HasOne(d => d.cdUserWarning)
                    .WithMany()
                    .HasForeignKey(d => d.UserWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccUserWarning_cdUserWarning_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccUserWarning_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLAccUserWarning_cdGLAcc_FK");

            });

            // Configure relationships for prGLReflectionAccount
            modelBuilder.Entity<prGLReflectionAccount>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ReflectionGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.IncomeGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLReflection)
                    .WithMany()
                    .HasForeignKey(d => d.GLReflectionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLReflection_FK");

                entity.HasOne(d => d.cdGLReflection)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prGLReflectionAccount_cdGLReflection_FK");

            });

            // Configure relationships for prImportFileAttribute
            modelBuilder.Entity<prImportFileAttribute>(entity =>
            {
                entity.HasOne(d => d.cdImportFileAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileAttribute_cdImportFileAttribute_FK");

                entity.HasOne(d => d.cdImportFileAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileAttribute_cdImportFileAttribute_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileAttribute_cdImportFile_FK");

            });

            // Configure relationships for prImportFileExpense
            modelBuilder.Entity<prImportFileExpense>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileExpense_cdCompany_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileExpense_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileExpense_cdGLAcc_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileExpense_cdItem_FK");

            });

            // Configure relationships for prImportFileGLAccs
            modelBuilder.Entity<prImportFileGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileGLAccs_cdImportFile_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileGLAccs_bsProcess_FK");

            });

            // Configure relationships for prImportFileIndirectExpense
            modelBuilder.Entity<prImportFileIndirectExpense>(entity =>
            {
                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileIndirectExpense_cdImportFile_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileIndirectExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileIndirectExpense_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileIndirectExpense_cdCurrency_FK");

            });

            // Configure relationships for prImportFileInsurance
            modelBuilder.Entity<prImportFileInsurance>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileInsurance_cdCurrency_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileInsurance_cdImportFile_FK");

                entity.HasOne(d => d.cdInsuranceType)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileInsurance_cdInsuranceType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileInsurance_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileInsurance_cdCurrAcc_FK");

            });

            // Configure relationships for prImportFileShippingInfo
            modelBuilder.Entity<prImportFileShippingInfo>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.DepartureCountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdCountry_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdShipmentMethod_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdImportFile_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_bsIncoterm_FK");

                entity.HasOne(d => d.cdContainerType)
                    .WithMany()
                    .HasForeignKey(d => d.ContainerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdContainerType_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.DischargePortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdPort_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.LadingPortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileShippingInfo_cdPort_FK");

            });

            // Configure relationships for prImportFileStatusHistory
            modelBuilder.Entity<prImportFileStatusHistory>(entity =>
            {
                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileStatusHistory_cdImportFile_FK");

                entity.HasOne(d => d.cdForeignTradeStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ForeignTradeStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prImportFileStatusHistory_cdForeignTradeStatus_FK");

            });

            // Configure relationships for prInnerProcessInfo
            modelBuilder.Entity<prInnerProcessInfo>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessInfo_bsInnerProcess_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessInfo_bsItemType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessInfo_cdCompany_FK");

            });

            // Configure relationships for prInnerProcessITAttribute
            modelBuilder.Entity<prInnerProcessITAttribute>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessITAttribute_bsInnerProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessITAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for prInnerProcessItemType
            modelBuilder.Entity<prInnerProcessItemType>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessItemType_bsInnerProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessItemType_cdCompany_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInnerProcessItemType_bsItemType_FK");

            });

            // Configure relationships for prInsuranceAgencyContribution
            modelBuilder.Entity<prInsuranceAgencyContribution>(entity =>
            {
                entity.HasOne(d => d.bsProductType)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInsuranceAgencyContribution_bsProductType_FK");

                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInsuranceAgencyContribution_cdInsuranceAgency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInsuranceAgencyContribution_cdCurrency_FK");

            });

            // Configure relationships for prInteractiveSMSApplications
            modelBuilder.Entity<prInteractiveSMSApplications>(entity =>
            {
                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInteractiveSMSApplications_cdCompanyBrand_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prInteractiveSMSApplications_cdCompany_FK");

            });

            // Configure relationships for prITAttributeTypeRequiredProcesses
            modelBuilder.Entity<prITAttributeTypeRequiredProcesses>(entity =>
            {
                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prITAttributeTypeRequiredProcesses_bsProcessFlow_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prITAttributeTypeRequiredProcesses_bsProcess_FK");

                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prITAttributeTypeRequiredProcesses_bsInnerProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prITAttributeTypeRequiredProcesses_cdCompany_FK");

                entity.HasOne(d => d.cdITAttributeType)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prITAttributeTypeRequiredProcesses_cdITAttributeType_FK");

            });

            // Configure relationships for prItemAccountGrGLAccs
            modelBuilder.Entity<prItemAccountGrGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_cdOffice_FK");

                entity.HasOne(d => d.cdItemAccountGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemAccountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_cdItemAccountGr_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_bsProcess_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAccountGrGLAccs_cdGLAcc_FK");

            });

            // Configure relationships for prItemAirportSalesCommissionGroup
            modelBuilder.Entity<prItemAirportSalesCommissionGroup>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAirportSalesCommissionGroup_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAirportSalesCommissionGroup_cdItem_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAirportSalesCommissionGroup_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAirportSalesCommissionGroup_cdCurrAcc_FK");

            });

            // Configure relationships for prItemAlike
            modelBuilder.Entity<prItemAlike>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAlike_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.AlikeItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAlike_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAlike_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.AlikeItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAlike_cdItem_FK");

                entity.HasOne(d => d.cdItemLikeType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemLikeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAlike_cdItemLikeType_FK");

            });

            // Configure relationships for prItemAttribute
            modelBuilder.Entity<prItemAttribute>(entity =>
            {
                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.cdItemAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAttribute_cdItemAttribute_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAttribute_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemAttribute_cdItem_FK");

            });

            // Configure relationships for prItemBarcode
            modelBuilder.Entity<prItemBarcode>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_prItemVariant_FK");

                entity.HasOne(d => d.cdBarcodeType)
                    .WithMany()
                    .HasForeignKey(d => d.BarcodeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBarcode_cdBarcodeType_FK");

            });

            // Configure relationships for prItemBasePrice
            modelBuilder.Entity<prItemBasePrice>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_cdCountry_FK");

                entity.HasOne(d => d.cdSeason)
                    .WithMany()
                    .HasForeignKey(d => d.SeasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_cdSeason_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_cdCurrency_FK");

                entity.HasOne(d => d.bsBasePrice)
                    .WithMany()
                    .HasForeignKey(d => d.BasePriceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBasePrice_bsBasePrice_FK");

            });

            // Configure relationships for prItemBatchBarcode
            modelBuilder.Entity<prItemBatchBarcode>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_prItemVariant_FK");

                entity.HasOne(d => d.cdBarcodeType)
                    .WithMany()
                    .HasForeignKey(d => d.BatchBarcodeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_cdBarcodeType_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemBatchBarcode_cdBatch_FK");

            });

            // Configure relationships for prItemColorAttributes
            modelBuilder.Entity<prItemColorAttributes>(entity =>
            {
                entity.HasOne(d => d.cdPantone)
                    .WithMany()
                    .HasForeignKey(d => d.PantoneCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdPantone_FK");

                entity.HasOne(d => d.cdColorTheme)
                    .WithMany()
                    .HasForeignKey(d => d.ColorThemeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdColorTheme_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdItem_FK");

                entity.HasOne(d => d.cdColorGroup)
                    .WithMany()
                    .HasForeignKey(d => d.ColorGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdColorGroup_FK");

                entity.HasOne(d => d.cdCustomsTariffNumber)
                    .WithMany()
                    .HasForeignKey(d => d.CustomsTariffNumberCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdCustomsTariffNumber_FK");

                entity.HasOne(d => d.cdColorType)
                    .WithMany()
                    .HasForeignKey(d => d.ColorTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdColorType_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorAttributes_cdColor_FK");

            });

            // Configure relationships for prItemColorFabricBlend
            modelBuilder.Entity<prItemColorFabricBlend>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorFabricBlend_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorFabricBlend_cdItem_FK");

                entity.HasOne(d => d.cdProductPart)
                    .WithMany()
                    .HasForeignKey(d => d.ProductPartCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorFabricBlend_cdProductPart_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorFabricBlend_cdColor_FK");

                entity.HasOne(d => d.cdFabric)
                    .WithMany()
                    .HasForeignKey(d => d.FabricCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemColorFabricBlend_cdFabric_FK");

            });

            // Configure relationships for prItemCompanyBrand
            modelBuilder.Entity<prItemCompanyBrand>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCompanyBrand_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCompanyBrand_cdItem_FK");

                entity.HasOne(d => d.cdCompanyBrand)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCompanyBrand_cdCompanyBrand_FK");

            });

            // Configure relationships for prItemCostCenter
            modelBuilder.Entity<prItemCostCenter>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenter_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenter_cdGLAcc_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenter_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenter_cdItem_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenter_cdCostCenter_FK");

            });

            // Configure relationships for prItemCostCenterRates
            modelBuilder.Entity<prItemCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdCostCenter_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdItem_FK");

                entity.HasOne(d => d.cdExpensePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.ExpensePeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdExpensePeriod_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdItem_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_cdGLAcc_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCostCenterRates_prCostCenterHierarchy_FK");

            });

            // Configure relationships for prItemCrossUnitOfMeasure
            modelBuilder.Entity<prItemCrossUnitOfMeasure>(entity =>
            {
                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCrossUnitOfMeasure_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCrossUnitOfMeasure_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemCrossUnitOfMeasure_cdItem_FK");

            });

            // Configure relationships for prItemDim1Equ
            modelBuilder.Entity<prItemDim1Equ>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDim1Equ_cdCountry_FK");

            });

            // Configure relationships for prItemDim2Equ
            modelBuilder.Entity<prItemDim2Equ>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDim2Equ_cdCountry_FK");

            });

            // Configure relationships for prItemDim3Equ
            modelBuilder.Entity<prItemDim3Equ>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDim3Equ_cdCountry_FK");

            });

            // Configure relationships for prItemDiscountGrAtt
            modelBuilder.Entity<prItemDiscountGrAtt>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDiscountGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDiscountGrAtt_cdCompany_FK");

                entity.HasOne(d => d.cdItemDiscountGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDiscountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDiscountGrAtt_cdItemDiscountGr_FK");

                entity.HasOne(d => d.cdDiscountType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemDiscountGrAtt_cdDiscountType_FK");

            });

            // Configure relationships for prItemInformation
            modelBuilder.Entity<prItemInformation>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemInformation_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemInformation_cdItem_FK");

            });

            // Configure relationships for prItemListContent
            modelBuilder.Entity<prItemListContent>(entity =>
            {
                entity.HasOne(d => d.cdItemList)
                    .WithMany()
                    .HasForeignKey(d => d.ItemListCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemListContent_cdItemList_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemListContent_cdColor_FK");

            });

            // Configure relationships for prItemMeasuresOfVolume
            modelBuilder.Entity<prItemMeasuresOfVolume>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_prItemVariant_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.SizeUnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.WeightUnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemMeasuresOfVolume_cdUnitOfMeasure_FK");

            });

            // Configure relationships for prItemNotes
            modelBuilder.Entity<prItemNotes>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemNotes_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemNotes_cdItem_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemNotes_cdDataLanguage_FK");

            });

            // Configure relationships for prItemPaymentPlanGrAtt
            modelBuilder.Entity<prItemPaymentPlanGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdItemPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPaymentPlanGrAtt_cdItemPaymentPlanGr_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPaymentPlanGrAtt_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPaymentPlanGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPaymentPlanGrAtt_cdPaymentPlan_FK");

            });

            // Configure relationships for prItemPhoto
            modelBuilder.Entity<prItemPhoto>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPhoto_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemPhoto_cdItem_FK");

            });

            // Configure relationships for prItemProcessPermits
            modelBuilder.Entity<prItemProcessPermits>(entity =>
            {
                entity.HasOne(d => d.bsItemProcessPermitType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemProcessPermitTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemProcessPermits_bsItemProcessPermitType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemProcessPermits_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemProcessPermits_cdCurrAcc_FK");

            });

            // Configure relationships for prItemRequisition
            modelBuilder.Entity<prItemRequisition>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemRequisition_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemRequisition_cdItem_FK");

                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemRequisition_cdRequisition_FK");

            });

            // Configure relationships for prItemSection
            modelBuilder.Entity<prItemSection>(entity =>
            {
                entity.HasOne(d => d.prSection)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSection_prSection_FK");

                entity.HasOne(d => d.prSection)
                    .WithMany()
                    .HasForeignKey(d => d.SectionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSection_prSection_FK");

            });

            // Configure relationships for prItemSerialNumber
            modelBuilder.Entity<prItemSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumber_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumber_cdItem_FK");

            });

            // Configure relationships for prItemSerialNumberPool
            modelBuilder.Entity<prItemSerialNumberPool>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemSerialNumberPool_prItemVariant_FK");

            });

            // Configure relationships for prItemStockLevel
            modelBuilder.Entity<prItemStockLevel>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_prItemVariant_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemStockLevel_cdWarehouse_FK");

            });

            // Configure relationships for prItemTaxGrAtt
            modelBuilder.Entity<prItemTaxGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdItemTaxGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTaxGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdItemTaxGr_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdCountry_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.PurcVatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdVat_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.SellVatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdVat_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.PurcPCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdPCT_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.SellPCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTaxGrAtt_cdPCT_FK");

            });

            // Configure relationships for prItemTextileCareSymbol
            modelBuilder.Entity<prItemTextileCareSymbol>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdCountry_FK");

                entity.HasOne(d => d.cdTextileCareSymbol)
                    .WithMany()
                    .HasForeignKey(d => d.TextileCareSymbolCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdTextileCareSymbol_FK");

                entity.HasOne(d => d.cdTextileCareSymbol)
                    .WithMany()
                    .HasForeignKey(d => d.TextileCareSymbolGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdTextileCareSymbol_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdItem_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareSymbol_cdColor_FK");

            });

            // Configure relationships for prItemTextileCareTemplateSymbol
            modelBuilder.Entity<prItemTextileCareTemplateSymbol>(entity =>
            {
                entity.HasOne(d => d.cdTextileCareSymbol)
                    .WithMany()
                    .HasForeignKey(d => d.TextileCareSymbolGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareTemplateSymbol_cdTextileCareSymbol_FK");

                entity.HasOne(d => d.cdTextileCareSymbol)
                    .WithMany()
                    .HasForeignKey(d => d.TextileCareSymbolCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareTemplateSymbol_cdTextileCareSymbol_FK");

                entity.HasOne(d => d.cdItemTextileCareTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTextileCareTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemTextileCareTemplateSymbol_cdItemTextileCareTemplate_FK");

            });

            // Configure relationships for prItemUnAcceptableExpense
            modelBuilder.Entity<prItemUnAcceptableExpense>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.UnAcceptableExpenseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemUnAcceptableExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemUnAcceptableExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.UnAcceptableExpenseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemUnAcceptableExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemUnAcceptableExpense_cdItem_FK");

            });

            // Configure relationships for prItemVariant
            modelBuilder.Entity<prItemVariant>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdItem_FK");

                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdItemDim3_FK");

                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdItemDim2_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdItemDim1_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVariant_cdColor_FK");

            });

            // Configure relationships for prItemVendorGrAtt
            modelBuilder.Entity<prItemVendorGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdItemVendorGr)
                    .WithMany()
                    .HasForeignKey(d => d.ItemVendorGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVendorGrAtt_cdItemVendorGr_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVendorGrAtt_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVendorGrAtt_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prItemVendorGrAtt_cdCurrAcc_FK");

            });

            // Configure relationships for prJobTrainingAttribute
            modelBuilder.Entity<prJobTrainingAttribute>(entity =>
            {
                entity.HasOne(d => d.cdJobTrainingAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingAttribute_cdJobTrainingAttribute_FK");

                entity.HasOne(d => d.cdJobTrainingAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingAttribute_cdJobTrainingAttribute_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.JobTrainingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingAttribute_cdJobTraining_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingAttribute_cdJobTraining_FK");

            });

            // Configure relationships for prJobTrainingNotes
            modelBuilder.Entity<prJobTrainingNotes>(entity =>
            {
                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingNotes_cdJobTraining_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.JobTrainingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingNotes_cdJobTraining_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingNotes_cdDataLanguage_FK");

            });

            // Configure relationships for prJobTrainingPlanned
            modelBuilder.Entity<prJobTrainingPlanned>(entity =>
            {
                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.JobTrainingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingPlanned_cdJobTraining_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingPlanned_cdJobTraining_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingPlanned_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingPlanned_cdCurrAcc_FK");

            });

            // Configure relationships for prJobTrainingRealised
            modelBuilder.Entity<prJobTrainingRealised>(entity =>
            {
                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingRealised_cdJobTraining_FK");

                entity.HasOne(d => d.cdJobTraining)
                    .WithMany()
                    .HasForeignKey(d => d.JobTrainingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prJobTrainingRealised_cdJobTraining_FK");

            });

            // Configure relationships for prLetterOfGuaranteeAttribute
            modelBuilder.Entity<prLetterOfGuaranteeAttribute>(entity =>
            {
                entity.HasOne(d => d.cdLetterOfGuarantee)
                    .WithMany()
                    .HasForeignKey(d => d.LetterOfGuaranteeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLetterOfGuaranteeAttribute_cdLetterOfGuarantee_FK");

                entity.HasOne(d => d.cdLetterOfGuarantee)
                    .WithMany()
                    .HasForeignKey(d => d.LetterOfGuaranteeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLetterOfGuaranteeAttribute_cdLetterOfGuarantee_FK");

                entity.HasOne(d => d.cdLetterOfGuaranteeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLetterOfGuaranteeAttribute_cdLetterOfGuaranteeAttribute_FK");

                entity.HasOne(d => d.cdLetterOfGuaranteeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLetterOfGuaranteeAttribute_cdLetterOfGuaranteeAttribute_FK");

                entity.HasOne(d => d.cdLetterOfGuaranteeAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.LetterOfGuaranteeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLetterOfGuaranteeAttribute_cdLetterOfGuaranteeAttribute_FK");

            });

            // Configure relationships for prLinkedProductContent
            modelBuilder.Entity<prLinkedProductContent>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ContentItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_prItemVariant_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContent_cdItem_FK");

            });

            // Configure relationships for prLinkedProductContentSum
            modelBuilder.Entity<prLinkedProductContentSum>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSum_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSum_cdItem_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSum_cdLot_FK");

            });

            // Configure relationships for prLinkedProductContentSumDetail
            modelBuilder.Entity<prLinkedProductContentSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSumDetail_cdLot_FK");

                entity.HasOne(d => d.prLinkedProductContentSum)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSumDetail_prLinkedProductContentSum_FK");

                entity.HasOne(d => d.prLinkedProductContentSum)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSumDetail_prLinkedProductContentSum_FK");

                entity.HasOne(d => d.prLinkedProductContentSum)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductContentSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSumDetail_prLinkedProductContentSum_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductContentSumDetail_cdColor_FK");

            });

            // Configure relationships for prLinkedProductProperties
            modelBuilder.Entity<prLinkedProductProperties>(entity =>
            {
                entity.HasOne(d => d.bsLinkedProductType)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductProperties_bsLinkedProductType_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductProperties_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLinkedProductProperties_cdItem_FK");

            });

            // Configure relationships for prLotQty
            modelBuilder.Entity<prLotQty>(entity =>
            {
                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLotQty_cdItemDim3_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLotQty_cdLot_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLotQty_cdItemDim1_FK");

                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLotQty_cdItemDim2_FK");

            });

            // Configure relationships for prLoyaltyProgramLevel
            modelBuilder.Entity<prLoyaltyProgramLevel>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgramLevel)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramLevel_cdLoyaltyProgramLevel_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramLevel_cdLoyaltyProgram_FK");

            });

            // Configure relationships for prLoyaltyProgramLevelHistory
            modelBuilder.Entity<prLoyaltyProgramLevelHistory>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramLevelHistory_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdLoyaltyProgramLevel)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramLevelHistory_cdLoyaltyProgramLevel_FK");

            });

            // Configure relationships for prLoyaltyProgramNotes
            modelBuilder.Entity<prLoyaltyProgramNotes>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramNotes_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramNotes_cdDataLanguage_FK");

            });

            // Configure relationships for prLoyaltyProgramProcessAvailableStatus
            modelBuilder.Entity<prLoyaltyProgramProcessAvailableStatus>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatus_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramProcessAvailableStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatus_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatus_cdLoyaltyProgram_FK");

            });

            // Configure relationships for prLoyaltyProgramProcessAvailableStatusHistory
            modelBuilder.Entity<prLoyaltyProgramProcessAvailableStatusHistory>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatusHistory_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatusHistory_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramProcessAvailableStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessAvailableStatusHistory_cdLoyaltyProgramStatus_FK");

            });

            // Configure relationships for prLoyaltyProgramProcessStatus
            modelBuilder.Entity<prLoyaltyProgramProcessStatus>(entity =>
            {
                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatus_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatus_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.bsLoyaltyProgramProcess)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatus_bsLoyaltyProgramProcess_FK");

            });

            // Configure relationships for prLoyaltyProgramProcessStatusHistory
            modelBuilder.Entity<prLoyaltyProgramProcessStatusHistory>(entity =>
            {
                entity.HasOne(d => d.bsLoyaltyProgramProcess)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatusHistory_bsLoyaltyProgramProcess_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatusHistory_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prLoyaltyProgramProcessStatusHistory_cdLoyaltyProgramStatus_FK");

            });

            // Configure relationships for prMarketPlaceCategoryAttConvert
            modelBuilder.Entity<prMarketPlaceCategoryAttConvert>(entity =>
            {
                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCategoryAttConvert_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceCategoryAttType
            modelBuilder.Entity<prMarketPlaceCategoryAttType>(entity =>
            {
                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCategoryAttType_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceCategoryAttTypeConvert
            modelBuilder.Entity<prMarketPlaceCategoryAttTypeConvert>(entity =>
            {
                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCategoryAttTypeConvert_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceCategoryConvert
            modelBuilder.Entity<prMarketPlaceCategoryConvert>(entity =>
            {
                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCategoryConvert_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceCreditCardMappings
            modelBuilder.Entity<prMarketPlaceCreditCardMappings>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCreditCardMappings_cdCreditCardType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCreditCardMappings_cdCompany_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceCreditCardMappings_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceItemVariant
            modelBuilder.Entity<prMarketPlaceItemVariant>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_prItemVariant_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceItemVariant_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceProduct
            modelBuilder.Entity<prMarketPlaceProduct>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdCompany_FK");

                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdItemDim2_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdItemDim1_FK");

                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdItemDim3_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdItem_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_bsMarketPlace_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProduct_cdColor_FK");

            });

            // Configure relationships for prMarketPlaceProductHierarchyConvert
            modelBuilder.Entity<prMarketPlaceProductHierarchyConvert>(entity =>
            {
                entity.HasOne(d => d.dfProductHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.NebimV3ProductHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductHierarchyConvert_dfProductHierarchy_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductHierarchyConvert_bsMarketPlace_FK");

            });

            // Configure relationships for prMarketPlaceProductInformation
            modelBuilder.Entity<prMarketPlaceProductInformation>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductInformation_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductInformation_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductInformation_cdItem_FK");

                entity.HasOne(d => d.bsMarketPlace)
                    .WithMany()
                    .HasForeignKey(d => d.MarketPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductInformation_bsMarketPlace_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.BasePricePriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMarketPlaceProductInformation_cdPriceGroup_FK");

            });

            // Configure relationships for prMedicalProductImportCountries
            modelBuilder.Entity<prMedicalProductImportCountries>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductImportCountries_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductImportCountries_cdItem_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductImportCountries_cdCountry_FK");

            });

            // Configure relationships for prMedicalProductOriginCountries
            modelBuilder.Entity<prMedicalProductOriginCountries>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductOriginCountries_cdCountry_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductOriginCountries_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductOriginCountries_cdItem_FK");

            });

            // Configure relationships for prMedicalProductProperties
            modelBuilder.Entity<prMedicalProductProperties>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdItem_FK");

                entity.HasOne(d => d.cdUTSAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.UTSAttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdUTSAttribute_FK");

                entity.HasOne(d => d.cdBarcodeCompany)
                    .WithMany()
                    .HasForeignKey(d => d.BarcodeCompanyCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdBarcodeCompany_FK");

                entity.HasOne(d => d.cdBarcodeCompany)
                    .WithMany()
                    .HasForeignKey(d => d.BarcodeCompanyCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdBarcodeCompany_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdBrand_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.BrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdBrand_FK");

                entity.HasOne(d => d.cdUTSMRGInfo)
                    .WithMany()
                    .HasForeignKey(d => d.UTSMRGInfoCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdUTSMRGInfo_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ManufacturerCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ImporterCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ImporterCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ManufacturerCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMedicalProductProperties_cdCurrAcc_FK");

            });

            // Configure relationships for prMT940ProcessRules
            modelBuilder.Entity<prMT940ProcessRules>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCompany_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdBankOpType_FK");

                entity.HasOne(d => d.bsMT940Process)
                    .WithMany()
                    .HasForeignKey(d => d.MT940ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_bsMT940Process_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdGLType_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdBank_FK");

                entity.HasOne(d => d.bsDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.DocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_bsDocumentType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdGLAcc_FK");

                entity.HasOne(d => d.bsBankTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BankTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_bsBankTransType_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prMT940ProcessRules_cdCurrAcc_FK");

            });

            // Configure relationships for prNotesGLAccs
            modelBuilder.Entity<prNotesGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prNotesGLAccs_cdCurrency_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prNotesGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prNotesGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prNotesGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prNotesGLAccs_cdOffice_FK");

            });

            // Configure relationships for prOfficeCOGSGrAtt
            modelBuilder.Entity<prOfficeCOGSGrAtt>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeCOGSGrAtt_cdOffice_FK");

                entity.HasOne(d => d.cdOfficeCOGSGr)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCOGSGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeCOGSGrAtt_cdOfficeCOGSGr_FK");

            });

            // Configure relationships for prOfficeGLAccs
            modelBuilder.Entity<prOfficeGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeGLAccs_cdGLAcc_FK");

            });

            // Configure relationships for prOfficeMapLocation
            modelBuilder.Entity<prOfficeMapLocation>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOfficeMapLocation_cdOffice_FK");

            });

            // Configure relationships for prOnlineBankWebServiceBankInternalParameter
            modelBuilder.Entity<prOnlineBankWebServiceBankInternalParameter>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceBankInternalParameter_cdGLType_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceBankInternalParameter_cdBankOpType_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceBankInternalParameter_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceBankInternalParameter_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceBankInternalParameter_cdCostCenter_FK");

            });

            // Configure relationships for prOnlineBankWebServiceCreditCardParameter
            modelBuilder.Entity<prOnlineBankWebServiceCreditCardParameter>(entity =>
            {
                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceCreditCardParameter_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceCreditCardParameter_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineBankWebServiceCreditCardParameter_cdCreditCardType_FK");

            });

            // Configure relationships for prOnlineDBSLimit
            modelBuilder.Entity<prOnlineDBSLimit>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimit_cdBank_FK");

                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimit_cdOnlineDBSWebService_FK");

                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineDBSWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimit_cdOnlineDBSWebService_FK");

            });

            // Configure relationships for prOnlineDBSLimitHistory
            modelBuilder.Entity<prOnlineDBSLimitHistory>(entity =>
            {
                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineDBSWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimitHistory_cdOnlineDBSWebService_FK");

                entity.HasOne(d => d.cdOnlineDBSWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimitHistory_cdOnlineDBSWebService_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOnlineDBSLimitHistory_cdBank_FK");

            });

            // Configure relationships for prOpticalSutContributionAmount
            modelBuilder.Entity<prOpticalSutContributionAmount>(entity =>
            {
                entity.HasOne(d => d.cdOpticalSut)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalSutCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prOpticalSutContributionAmount_cdOpticalSut_FK");

            });

            // Configure relationships for prPaylinkCardOwner
            modelBuilder.Entity<prPaylinkCardOwner>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaylinkCardOwner_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaylinkCardOwner_cdCurrAcc_FK");

            });

            // Configure relationships for prPaymentPlanAdditionalInstallmentAuthority
            modelBuilder.Entity<prPaymentPlanAdditionalInstallmentAuthority>(entity =>
            {
                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentPlanAdditionalInstallmentAuthority_cdPaymentPlan_FK");

            });

            // Configure relationships for prPaymentPlanAdditionalInstallmentCampaign
            modelBuilder.Entity<prPaymentPlanAdditionalInstallmentCampaign>(entity =>
            {
                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentPlanAdditionalInstallmentCampaign_cdPaymentPlan_FK");

            });

            // Configure relationships for prPaymentPlanBIN
            modelBuilder.Entity<prPaymentPlanBIN>(entity =>
            {
                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentPlanBIN_cdPaymentPlan_FK");

            });

            // Configure relationships for prPaymentProviderConvert
            modelBuilder.Entity<prPaymentProviderConvert>(entity =>
            {
                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderConvert_cdPaymentProvider_FK");

                entity.HasOne(d => d.bsDeviceType)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderConvert_bsDeviceType_FK");

                entity.HasOne(d => d.bsDevice)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderConvert_bsDevice_FK");

            });

            // Configure relationships for prPaymentProviderGLAccs
            modelBuilder.Entity<prPaymentProviderGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_bsProcess_FK");

                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_cdPaymentProvider_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPaymentProviderGLAccs_bsPostAccType_FK");

            });

            // Configure relationships for prPCTGLAccs
            modelBuilder.Entity<prPCTGLAccs>(entity =>
            {
                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_bsProcess_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_cdOffice_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.PCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPCTGLAccs_cdPCT_FK");

            });

            // Configure relationships for prPersonalDataConfirmationFormTypeForCurrAccTypes
            modelBuilder.Entity<prPersonalDataConfirmationFormTypeForCurrAccTypes>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPersonalDataConfirmationFormTypeForCurrAccTypes_cdCompany_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPersonalDataConfirmationFormTypeForCurrAccTypes_cdConfirmationFormType_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPersonalDataConfirmationFormTypeForCurrAccTypes_bsCurrAccType_FK");

            });

            // Configure relationships for prPOSTerminalATAttribute
            modelBuilder.Entity<prPOSTerminalATAttribute>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_bsProcess_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalATAttribute_cdPOSTerminal_FK");

            });

            // Configure relationships for prPosTerminalDevice
            modelBuilder.Entity<prPosTerminalDevice>(entity =>
            {
                entity.HasOne(d => d.bsDeviceType)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_bsDeviceType_FK");

                entity.HasOne(d => d.bsDevice)
                    .WithMany()
                    .HasForeignKey(d => d.DeviceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_bsDevice_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalDevice_cdCurrAcc_FK");

            });

            // Configure relationships for prPosTerminalFiscalPrinter
            modelBuilder.Entity<prPosTerminalFiscalPrinter>(entity =>
            {
                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.DefaultCreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdCreditCardType_FK");

                entity.HasOne(d => d.cdBarcodeType)
                    .WithMany()
                    .HasForeignKey(d => d.BarcodeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdBarcodeType_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPosTerminalFiscalPrinter_cdPriceGroup_FK");

            });

            // Configure relationships for prPOSTerminalPrinter
            modelBuilder.Entity<prPOSTerminalPrinter>(entity =>
            {
                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.POSTerminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalPrinter_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalPrinter_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPOSTerminalPrinter_cdPOSTerminal_FK");

            });

            // Configure relationships for prPresentCardActivationSteps
            modelBuilder.Entity<prPresentCardActivationSteps>(entity =>
            {
                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardActivationSteps_cdConfirmationFormType_FK");

                entity.HasOne(d => d.bsPresentCardActivationProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ActivationProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardActivationSteps_bsPresentCardActivationProcess_FK");

                entity.HasOne(d => d.cdUserWarning)
                    .WithMany()
                    .HasForeignKey(d => d.UserWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardActivationSteps_cdUserWarning_FK");

                entity.HasOne(d => d.cdUserWarning)
                    .WithMany()
                    .HasForeignKey(d => d.NegotaryUserWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardActivationSteps_cdUserWarning_FK");

                entity.HasOne(d => d.cdConditionType)
                    .WithMany()
                    .HasForeignKey(d => d.ConditionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardActivationSteps_cdConditionType_FK");

            });

            // Configure relationships for prPresentCardValidCardTypes
            modelBuilder.Entity<prPresentCardValidCardTypes>(entity =>
            {
                entity.HasOne(d => d.cdPresentCardType)
                    .WithMany()
                    .HasForeignKey(d => d.PresentCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardValidCardTypes_cdPresentCardType_FK");

                entity.HasOne(d => d.cdPresentCardType)
                    .WithMany()
                    .HasForeignKey(d => d.ValidPresentCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPresentCardValidCardTypes_cdPresentCardType_FK");

            });

            // Configure relationships for prProcessATAttribute
            modelBuilder.Entity<prProcessATAttribute>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessATAttribute_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessATAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for prProcessDefaultExpenseType
            modelBuilder.Entity<prProcessDefaultExpenseType>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDefaultExpenseType_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDefaultExpenseType_bsProcess_FK");

                entity.HasOne(d => d.cdExpenseType)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDefaultExpenseType_cdExpenseType_FK");

            });

            // Configure relationships for prProcessDiscount
            modelBuilder.Entity<prProcessDiscount>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDiscount_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDiscount_cdCompany_FK");

                entity.HasOne(d => d.cdDiscountType)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessDiscount_cdDiscountType_FK");

            });

            // Configure relationships for prProcessFlowRules
            modelBuilder.Entity<prProcessFlowRules>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFlowRules_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFlowRules_bsProcess_FK");

            });

            // Configure relationships for prProcessFTAttribute
            modelBuilder.Entity<prProcessFTAttribute>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFTAttribute_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFTAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for prProcessInfo
            modelBuilder.Entity<prProcessInfo>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdGLType_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_bsProcess_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_bsItemType_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdDOV_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdCompany_FK");

                entity.HasOne(d => d.bsIncompleteDownPaymentDistributionType)
                    .WithMany()
                    .HasForeignKey(d => d.IncompleteDownPaymentDistributionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_bsIncompleteDownPaymentDistributionType_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdPaymentPlan_FK");

                entity.HasOne(d => d.cdDueDateFormula)
                    .WithMany()
                    .HasForeignKey(d => d.DueDateFormulaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdDueDateFormula_FK");

                entity.HasOne(d => d.cdCommunicationType)
                    .WithMany()
                    .HasForeignKey(d => d.RequiredCommunicationTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_cdCommunicationType_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessInfo_bsTaxExemption_FK");

            });

            // Configure relationships for prProcessITAttribute
            modelBuilder.Entity<prProcessITAttribute>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessITAttribute_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessITAttribute_cdCompany_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for prProcessItemType
            modelBuilder.Entity<prProcessItemType>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessItemType_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessItemType_bsProcess_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProcessItemType_bsItemType_FK");

            });

            // Configure relationships for prProductCareWarning
            modelBuilder.Entity<prProductCareWarning>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductCareWarning_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductCareWarning_cdItem_FK");

                entity.HasOne(d => d.cdCareWarning)
                    .WithMany()
                    .HasForeignKey(d => d.CareWarningCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductCareWarning_cdCareWarning_FK");

            });

            // Configure relationships for prProductColorAttribute
            modelBuilder.Entity<prProductColorAttribute>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorAttribute_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorAttribute_cdItem_FK");

                entity.HasOne(d => d.cdProductColorAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorAttribute_cdProductColorAttribute_FK");

                entity.HasOne(d => d.cdProductColorAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorAttribute_cdProductColorAttribute_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorAttribute_cdColor_FK");

            });

            // Configure relationships for prProductColorSetContent
            modelBuilder.Entity<prProductColorSetContent>(entity =>
            {
                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorSetContent_cdColor_FK");

                entity.HasOne(d => d.cdProductColorSet)
                    .WithMany()
                    .HasForeignKey(d => d.ProductColorSetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductColorSetContent_cdProductColorSet_FK");

            });

            // Configure relationships for prProductDimSetContent
            modelBuilder.Entity<prProductDimSetContent>(entity =>
            {
                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductDimSetContent_cdItemDim2_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductDimSetContent_cdItemDim1_FK");

                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductDimSetContent_cdItemDim3_FK");

                entity.HasOne(d => d.cdProductDimSet)
                    .WithMany()
                    .HasForeignKey(d => d.ProductDimSetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductDimSetContent_cdProductDimSet_FK");

            });

            // Configure relationships for prProductFrameProperties
            modelBuilder.Entity<prProductFrameProperties>(entity =>
            {
                entity.HasOne(d => d.cdOpticalSut)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalSutCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdOpticalSut_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdItem_FK");

                entity.HasOne(d => d.cdFrameType)
                    .WithMany()
                    .HasForeignKey(d => d.FrameTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdFrameType_FK");

                entity.HasOne(d => d.cdFrameShapeType)
                    .WithMany()
                    .HasForeignKey(d => d.FrameShapeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdFrameShapeType_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.BrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdBrand_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdBrand_FK");

                entity.HasOne(d => d.cdBaseMaterial)
                    .WithMany()
                    .HasForeignKey(d => d.BaseMaterialCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdBaseMaterial_FK");

                entity.HasOne(d => d.cdBaseMaterial)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdBaseMaterial_FK");

                entity.HasOne(d => d.cdCustomProcessGroup)
                    .WithMany()
                    .HasForeignKey(d => d.CustomProcessGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdCustomProcessGroup_FK");

                entity.HasOne(d => d.cdManufacturer)
                    .WithMany()
                    .HasForeignKey(d => d.ManufacturerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdManufacturer_FK");

                entity.HasOne(d => d.cdManufacturer)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductFrameProperties_cdManufacturer_FK");

            });

            // Configure relationships for prProductImageURLs
            modelBuilder.Entity<prProductImageURLs>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductImageURLs_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductImageURLs_cdItem_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductImageURLs_cdColor_FK");

            });

            // Configure relationships for prProductLensProperties
            modelBuilder.Entity<prProductLensProperties>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdItem_FK");

                entity.HasOne(d => d.bsLensType)
                    .WithMany()
                    .HasForeignKey(d => d.LensTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_bsLensType_FK");

                entity.HasOne(d => d.cdOpticalSut)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalSutCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdOpticalSut_FK");

                entity.HasOne(d => d.cdOpticalGroupRange)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalGroupRangeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdOpticalGroupRange_FK");

                entity.HasOne(d => d.cdBaseMaterial)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdBaseMaterial_FK");

                entity.HasOne(d => d.cdBaseMaterial)
                    .WithMany()
                    .HasForeignKey(d => d.BaseMaterialCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdBaseMaterial_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdBrand_FK");

                entity.HasOne(d => d.cdBrand)
                    .WithMany()
                    .HasForeignKey(d => d.BrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdBrand_FK");

                entity.HasOne(d => d.cdCoatingType)
                    .WithMany()
                    .HasForeignKey(d => d.CoatingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdCoatingType_FK");

                entity.HasOne(d => d.cdFocalType)
                    .WithMany()
                    .HasForeignKey(d => d.FocalTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdFocalType_FK");

                entity.HasOne(d => d.cdManufacturer)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdManufacturer_FK");

                entity.HasOne(d => d.cdManufacturer)
                    .WithMany()
                    .HasForeignKey(d => d.ManufacturerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdManufacturer_FK");

                entity.HasOne(d => d.cdCustomProcessGroup)
                    .WithMany()
                    .HasForeignKey(d => d.CustomProcessGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_cdCustomProcessGroup_FK");

                entity.HasOne(d => d.bsGlassIndex)
                    .WithMany()
                    .HasForeignKey(d => d.GlassIndex)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_bsGlassIndex_FK");

                entity.HasOne(d => d.bsEyeGlassSutType)
                    .WithMany()
                    .HasForeignKey(d => d.EyeGlassSutTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLensProperties_bsEyeGlassSutType_FK");

            });

            // Configure relationships for prProductLot
            modelBuilder.Entity<prProductLot>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLot_cdLot_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLot_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLot_cdItem_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLot_cdColor_FK");

            });

            // Configure relationships for prProductLotBarcode
            modelBuilder.Entity<prProductLotBarcode>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLotBarcode_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLotBarcode_cdItem_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLotBarcode_cdLot_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductLotBarcode_cdColor_FK");

            });

            // Configure relationships for prProductPartAvailableFabric
            modelBuilder.Entity<prProductPartAvailableFabric>(entity =>
            {
                entity.HasOne(d => d.cdProductPart)
                    .WithMany()
                    .HasForeignKey(d => d.ProductPartCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductPartAvailableFabric_cdProductPart_FK");

                entity.HasOne(d => d.cdFabric)
                    .WithMany()
                    .HasForeignKey(d => d.FabricCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductPartAvailableFabric_cdFabric_FK");

            });

            // Configure relationships for prProductPoint
            modelBuilder.Entity<prProductPoint>(entity =>
            {
                entity.HasOne(d => d.cdProductPointType)
                    .WithMany()
                    .HasForeignKey(d => d.ProductPointTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductPoint_cdProductPointType_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductPoint_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductPoint_cdItem_FK");

            });

            // Configure relationships for prProductStatusHistory
            modelBuilder.Entity<prProductStatusHistory>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductStatusHistory_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductStatusHistory_cdItem_FK");

                entity.HasOne(d => d.cdProductStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ProductStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProductStatusHistory_cdProductStatus_FK");

            });

            // Configure relationships for prProposalConfirmationRuleDepartments
            modelBuilder.Entity<prProposalConfirmationRuleDepartments>(entity =>
            {
                entity.HasOne(d => d.cdProposalConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleDepartments_cdProposalConfirmationRule_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleDepartments_cdJobDepartment_FK");

            });

            // Configure relationships for prProposalConfirmationRuleStep
            modelBuilder.Entity<prProposalConfirmationRuleStep>(entity =>
            {
                entity.HasOne(d => d.cdProposalConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleStep_cdProposalConfirmationRule_FK");

            });

            // Configure relationships for prProposalConfirmationRuleStepUser
            modelBuilder.Entity<prProposalConfirmationRuleStepUser>(entity =>
            {
                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleStepUser_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleStepUser_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prProposalConfirmationRuleStepUser_cdJobDepartment_FK");

            });

            // Configure relationships for prPurchasingAgentAvailableRequisition
            modelBuilder.Entity<prPurchasingAgentAvailableRequisition>(entity =>
            {
                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPurchasingAgentAvailableRequisition_cdRequisition_FK");

                entity.HasOne(d => d.cdRequisitionType)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPurchasingAgentAvailableRequisition_cdRequisitionType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prPurchasingAgentAvailableRequisition_cdCompany_FK");

            });

            // Configure relationships for prRelatedCurrAcc
            modelBuilder.Entity<prRelatedCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RelatedCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelatedCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelatedCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RelatedCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelatedCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelatedCurrAcc_cdCurrAcc_FK");

            });

            // Configure relationships for prRelationalPriceGroups
            modelBuilder.Entity<prRelationalPriceGroups>(entity =>
            {
                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelationalPriceGroups_cdExchangeType_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelationalPriceGroups_cdPriceGroup_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.TargetPriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelationalPriceGroups_cdPriceGroup_FK");

                entity.HasOne(d => d.cdPriceListType)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRelationalPriceGroups_cdPriceListType_FK");

            });

            // Configure relationships for prRequisitionAttribute
            modelBuilder.Entity<prRequisitionAttribute>(entity =>
            {
                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionAttribute_cdRequisition_FK");

                entity.HasOne(d => d.cdRequisitionAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionAttribute_cdRequisitionAttribute_FK");

                entity.HasOne(d => d.cdRequisitionAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionAttribute_cdRequisitionAttribute_FK");

            });

            // Configure relationships for prRequisitionConfirmationRuleDepartments
            modelBuilder.Entity<prRequisitionConfirmationRuleDepartments>(entity =>
            {
                entity.HasOne(d => d.cdRequisitionConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleDepartments_cdRequisitionConfirmationRule_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleDepartments_cdJobDepartment_FK");

            });

            // Configure relationships for prRequisitionConfirmationRuleStep
            modelBuilder.Entity<prRequisitionConfirmationRuleStep>(entity =>
            {
                entity.HasOne(d => d.cdRequisitionConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleStep_cdRequisitionConfirmationRule_FK");

            });

            // Configure relationships for prRequisitionConfirmationRuleStepUser
            modelBuilder.Entity<prRequisitionConfirmationRuleStepUser>(entity =>
            {
                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleStepUser_prRequisitionConfirmationRuleStep_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleStepUser_prRequisitionConfirmationRuleStep_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionConfirmationRuleStepUser_cdJobDepartment_FK");

            });

            // Configure relationships for prRequisitionCurrAcc
            modelBuilder.Entity<prRequisitionCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionCurrAcc_cdRequisition_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionCurrAcc_cdCurrAcc_FK");

            });

            // Configure relationships for prRequisitionLimit
            modelBuilder.Entity<prRequisitionLimit>(entity =>
            {
                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdRequisition_FK");

                entity.HasOne(d => d.cdRequisitionType)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdRequisitionType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdCurrency_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRequisitionLimit_cdJobDepartment_FK");

            });

            // Configure relationships for prResponsibilityAreaPostalAddress
            modelBuilder.Entity<prResponsibilityAreaPostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prResponsibilityAreaPostalAddress_cdCity_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prResponsibilityAreaPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prResponsibilityAreaPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prResponsibilityAreaPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdResponsibilityArea)
                    .WithMany()
                    .HasForeignKey(d => d.ResponsibilityAreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prResponsibilityAreaPostalAddress_cdResponsibilityArea_FK");

            });

            // Configure relationships for prReturnReasonAvailableProcess
            modelBuilder.Entity<prReturnReasonAvailableProcess>(entity =>
            {
                entity.HasOne(d => d.cdReturnReason)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prReturnReasonAvailableProcess_cdReturnReason_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prReturnReasonAvailableProcess_bsProcess_FK");

            });

            // Configure relationships for prRoleMember
            modelBuilder.Entity<prRoleMember>(entity =>
            {
                entity.HasOne(d => d.cdRole)
                    .WithMany()
                    .HasForeignKey(d => d.RoleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoleMember_cdRole_FK");

                entity.HasOne(d => d.cdRole)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoleMember_cdRole_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoleMember_dfUserPosition_FK");

                entity.HasOne(d => d.dfUserPosition)
                    .WithMany()
                    .HasForeignKey(d => d.UserGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoleMember_dfUserPosition_FK");

            });

            // Configure relationships for prRollNotes
            modelBuilder.Entity<prRollNotes>(entity =>
            {
                entity.HasOne(d => d.cdRollNoteType)
                    .WithMany()
                    .HasForeignKey(d => d.RollNoteTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRollNotes_cdRollNoteType_FK");

                entity.HasOne(d => d.cdRoll)
                    .WithMany()
                    .HasForeignKey(d => d.RollNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRollNotes_cdRoll_FK");

            });

            // Configure relationships for prRoundsmanResponsibilityArea
            modelBuilder.Entity<prRoundsmanResponsibilityArea>(entity =>
            {
                entity.HasOne(d => d.cdResponsibilityArea)
                    .WithMany()
                    .HasForeignKey(d => d.ResponsibilityAreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoundsmanResponsibilityArea_cdResponsibilityArea_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prRoundsmanResponsibilityArea_cdRoundsman_FK");

            });

            // Configure relationships for prSection
            modelBuilder.Entity<prSection>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSection_cdWarehouse_FK");

                entity.HasOne(d => d.cdSectionType)
                    .WithMany()
                    .HasForeignKey(d => d.SectionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSection_cdSectionType_FK");

            });

            // Configure relationships for prServiceAvailableProductLevel
            modelBuilder.Entity<prServiceAvailableProductLevel>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prServiceAvailableProductLevel_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prServiceAvailableProductLevel_cdItem_FK");

            });

            // Configure relationships for prServiceAvailableSupportType
            modelBuilder.Entity<prServiceAvailableSupportType>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prServiceAvailableSupportType_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prServiceAvailableSupportType_cdItem_FK");

                entity.HasOne(d => d.bsSupportType)
                    .WithMany()
                    .HasForeignKey(d => d.SupportTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prServiceAvailableSupportType_bsSupportType_FK");

            });

            // Configure relationships for prStoreBankAccCodesForPayment
            modelBuilder.Entity<prStoreBankAccCodesForPayment>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankAccCodesForPayment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankAccCodesForPayment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankAccCodesForPayment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankAccCodesForPayment_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreBankPOSAccounts
            modelBuilder.Entity<prStoreBankPOSAccounts>(entity =>
            {
                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_prBankPOSAccounts_FK");

                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_prBankPOSAccounts_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_cdGLType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_cdCurrAcc_FK");

                entity.HasOne(d => d.prBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSAccounts_prBankPOSAccounts_FK");

            });

            // Configure relationships for prStoreBankPOSGLAccs
            modelBuilder.Entity<prStoreBankPOSGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_cdGLType_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_cdCostCenter_FK");

                entity.HasOne(d => d.prStoreBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_prStoreBankPOSAccounts_FK");

                entity.HasOne(d => d.prStoreBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_prStoreBankPOSAccounts_FK");

                entity.HasOne(d => d.prStoreBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_prStoreBankPOSAccounts_FK");

                entity.HasOne(d => d.prStoreBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_prStoreBankPOSAccounts_FK");

                entity.HasOne(d => d.prStoreBankPOSAccounts)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreBankPOSGLAccs_prStoreBankPOSAccounts_FK");

            });

            // Configure relationships for prStoreCapacity
            modelBuilder.Entity<prStoreCapacity>(entity =>
            {
                entity.HasOne(d => d.cdStoreCapacityLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCapacityLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCapacity_cdStoreCapacityLevel_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCapacity_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCapacity_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreCashAcc
            modelBuilder.Entity<prStoreCashAcc>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCashAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCashAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCashAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCashAcc_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreCustomerGLAccount
            modelBuilder.Entity<prStoreCustomerGLAccount>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAdvanceGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceSalesGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_bsPostAccType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreCustomerGLAccount_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreProperties
            modelBuilder.Entity<prStoreProperties>(entity =>
            {
                entity.HasOne(d => d.cdStoreClimateZone)
                    .WithMany()
                    .HasForeignKey(d => d.StoreClimateZoneCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdStoreClimateZone_FK");

                entity.HasOne(d => d.cdStorePriceLevel)
                    .WithMany()
                    .HasForeignKey(d => d.StorePriceLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdStorePriceLevel_FK");

                entity.HasOne(d => d.cdStoreCRMGroup)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCRMGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdStoreCRMGroup_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdCurrAcc_FK");

                entity.HasOne(d => d.cdStoreConcept)
                    .WithMany()
                    .HasForeignKey(d => d.StoreConceptCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdStoreConcept_FK");

                entity.HasOne(d => d.cdStoreDistributionGroup)
                    .WithMany()
                    .HasForeignKey(d => d.StoreDistributionGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreProperties_cdStoreDistributionGroup_FK");

            });

            // Configure relationships for prStoreSpecialDay
            modelBuilder.Entity<prStoreSpecialDay>(entity =>
            {
                entity.HasOne(d => d.cdSpecialDayType)
                    .WithMany()
                    .HasForeignKey(d => d.SpecialDayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreSpecialDay_cdSpecialDayType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreSpecialDay_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreSpecialDay_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreStatus
            modelBuilder.Entity<prStoreStatus>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RentCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreStatus_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreStatus_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreStatus_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreVendor
            modelBuilder.Entity<prStoreVendor>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreVendor_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreVendor_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreVendor_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreVendor_cdCurrAcc_FK");

            });

            // Configure relationships for prStoreWorkingHours
            modelBuilder.Entity<prStoreWorkingHours>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreWorkingHours_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreWorkingHours_cdCurrAcc_FK");

                entity.HasOne(d => d.bsDay)
                    .WithMany()
                    .HasForeignKey(d => d.DayCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prStoreWorkingHours_bsDay_FK");

            });

            // Configure relationships for prSubCurrAcc
            modelBuilder.Entity<prSubCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCurrency_FK");

                entity.HasOne(d => d.cdCustomerMarkupGr)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerMarkupGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCustomerMarkupGr_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.DataLanguageCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdDataLanguage_FK");

                entity.HasOne(d => d.cdCustomerDiscountGr)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerDiscountGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCustomerDiscountGr_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdTaxOffice_FK");

                entity.HasOne(d => d.cdCustomerPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCustomerPaymentPlanGr_FK");

                entity.HasOne(d => d.cdPromotionGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PromotionGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdPromotionGroup_FK");

                entity.HasOne(d => d.cdVendorPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.VendorPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdVendorPaymentPlanGr_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.WholesalePriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdPriceGroup_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdCurrAcc_FK");

                entity.HasOne(d => d.cdTitle)
                    .WithMany()
                    .HasForeignKey(d => d.TitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAcc_cdTitle_FK");

            });

            // Configure relationships for prSubCurrAccAttribute
            modelBuilder.Entity<prSubCurrAccAttribute>(entity =>
            {
                entity.HasOne(d => d.cdSubCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccAttribute_cdSubCurrAccAttribute_FK");

                entity.HasOne(d => d.cdSubCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccAttribute_cdSubCurrAccAttribute_FK");

                entity.HasOne(d => d.cdSubCurrAccAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccAttribute_cdSubCurrAccAttribute_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccAttribute_prSubCurrAcc_FK");

            });

            // Configure relationships for prSubCurrAccDefault
            modelBuilder.Entity<prSubCurrAccDefault>(entity =>
            {
                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.PostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccDefault_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccDefault_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccCommunication)
                    .WithMany()
                    .HasForeignKey(d => d.CommunicationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccDefault_prCurrAccCommunication_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccDefault_prSubCurrAcc_FK");

            });

            // Configure relationships for prSubCurrAccOnlineBank
            modelBuilder.Entity<prSubCurrAccOnlineBank>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_cdGLType_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_cdBankOpType_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_cdCostCenter_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccOnlineBank_prSubCurrAcc_FK");

            });

            // Configure relationships for prSubCurrAccSalesperson
            modelBuilder.Entity<prSubCurrAccSalesperson>(entity =>
            {
                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccSalesperson_cdSalesperson_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prSubCurrAccSalesperson_prSubCurrAcc_FK");

            });

            // Configure relationships for prTechnicalResponsibleAvailableRequisition
            modelBuilder.Entity<prTechnicalResponsibleAvailableRequisition>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTechnicalResponsibleAvailableRequisition_cdCompany_FK");

                entity.HasOne(d => d.cdRequisitionType)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTechnicalResponsibleAvailableRequisition_cdRequisitionType_FK");

                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTechnicalResponsibleAvailableRequisition_cdRequisition_FK");

            });

            // Configure relationships for prTimePeriodDay
            modelBuilder.Entity<prTimePeriodDay>(entity =>
            {
                entity.HasOne(d => d.cdTimePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.TimePeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTimePeriodDay_cdTimePeriod_FK");

                entity.HasOne(d => d.bsDay)
                    .WithMany()
                    .HasForeignKey(d => d.DayCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTimePeriodDay_bsDay_FK");

            });

            // Configure relationships for prTransferPlanRuleScript
            modelBuilder.Entity<prTransferPlanRuleScript>(entity =>
            {
                entity.HasOne(d => d.bsTransferPlanRule)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTransferPlanRuleScript_bsTransferPlanRule_FK");

            });

            // Configure relationships for prTransferPlanTemplateParameterValue
            modelBuilder.Entity<prTransferPlanTemplateParameterValue>(entity =>
            {
                entity.HasOne(d => d.cdTransferPlanTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTransferPlanTemplateParameterValue_cdTransferPlanTemplate_FK");

                entity.HasOne(d => d.cdTransferPlanTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prTransferPlanTemplateParameterValue_cdTransferPlanTemplate_FK");

            });

            // Configure relationships for prUniFreeTenderTypeMapping
            modelBuilder.Entity<prUniFreeTenderTypeMapping>(entity =>
            {
                entity.HasOne(d => d.cdUniFreeTenderType)
                    .WithMany()
                    .HasForeignKey(d => d.TenderTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prUniFreeTenderTypeMapping_cdUniFreeTenderType_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prUniFreeTenderTypeMapping_cdBank_FK");

                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prUniFreeTenderTypeMapping_cdPaymentProvider_FK");

                entity.HasOne(d => d.bsPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prUniFreeTenderTypeMapping_bsPaymentType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prUniFreeTenderTypeMapping_cdCurrency_FK");

            });

            // Configure relationships for prVatGLAccs
            modelBuilder.Entity<prVatGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.bsPostAccType)
                    .WithMany()
                    .HasForeignKey(d => d.PostAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_bsPostAccType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_bsProcess_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.VatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVatGLAccs_cdVat_FK");

            });

            // Configure relationships for prVehicleDrivers
            modelBuilder.Entity<prVehicleDrivers>(entity =>
            {
                entity.HasOne(d => d.cdDriver)
                    .WithMany()
                    .HasForeignKey(d => d.DriverCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVehicleDrivers_cdDriver_FK");

                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVehicleDrivers_cdVehicle_FK");

            });

            // Configure relationships for prVendorPaymentPlanGrAtt
            modelBuilder.Entity<prVendorPaymentPlanGrAtt>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVendorPaymentPlanGrAtt_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVendorPaymentPlanGrAtt_cdCompany_FK");

                entity.HasOne(d => d.cdVendorPaymentPlanGr)
                    .WithMany()
                    .HasForeignKey(d => d.VendorPaymentPlanGrCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVendorPaymentPlanGrAtt_cdVendorPaymentPlanGr_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prVendorPaymentPlanGrAtt_cdPaymentPlan_FK");

            });

            // Configure relationships for prWarehouseChannelTemplateContent
            modelBuilder.Entity<prWarehouseChannelTemplateContent>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseChannelTemplateContent_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouseChannelTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseChannelTemplateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseChannelTemplateContent_cdWarehouseChannelTemplate_FK");

                entity.HasOne(d => d.cdWarehouseChannelTemplate)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseChannelTemplateContent_cdWarehouseChannelTemplate_FK");

            });

            // Configure relationships for prWarehouseMapLocation
            modelBuilder.Entity<prWarehouseMapLocation>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseMapLocation_cdWarehouse_FK");

            });

            // Configure relationships for prWarehousePostalAddress
            modelBuilder.Entity<prWarehousePostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdWarehouse_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdDistrict_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdCountry_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdCity_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehousePostalAddress_cdState_FK");

            });

            // Configure relationships for prWarehouseProcessFlowRules
            modelBuilder.Entity<prWarehouseProcessFlowRules>(entity =>
            {
                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseProcessFlowRules_bsProcess_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseProcessFlowRules_cdWarehouse_FK");

            });

            // Configure relationships for prWarehouseResponsibilityArea
            modelBuilder.Entity<prWarehouseResponsibilityArea>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseResponsibilityArea_cdWarehouse_FK");

                entity.HasOne(d => d.cdResponsibilityArea)
                    .WithMany()
                    .HasForeignKey(d => d.ResponsibilityAreaCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWarehouseResponsibilityArea_cdResponsibilityArea_FK");

            });

            // Configure relationships for prWithHoldingTaxAvailableDovRates
            modelBuilder.Entity<prWithHoldingTaxAvailableDovRates>(entity =>
            {
                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWithHoldingTaxAvailableDovRates_bsWithHoldingTaxType_FK");

            });

            // Configure relationships for prWorkPlaceATAttribute
            modelBuilder.Entity<prWorkPlaceATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceATAttribute_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceATAttribute_cdWorkPlace_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for prWorkPlaceFTAttribute
            modelBuilder.Entity<prWorkPlaceFTAttribute>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceFTAttribute_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceFTAttribute_cdWorkPlace_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for prWorkPlaceGLAccs
            modelBuilder.Entity<prWorkPlaceGLAccs>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdWorkPlace_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdGLAcc_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdGLType_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceGLAccs_cdJobDepartment_FK");

            });

            // Configure relationships for prWorkPlaceOptimalEmployment
            modelBuilder.Entity<prWorkPlaceOptimalEmployment>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceOptimalEmployment_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceOptimalEmployment_cdWorkPlace_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceOptimalEmployment_cdJobDepartment_FK");

                entity.HasOne(d => d.cdJobTitle)
                    .WithMany()
                    .HasForeignKey(d => d.JobTitleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceOptimalEmployment_cdJobTitle_FK");

            });

            // Configure relationships for prWorkPlaceSecondment
            modelBuilder.Entity<prWorkPlaceSecondment>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceSecondment_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceSecondment_cdWorkPlace_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceSecondment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkPlaceSecondment_cdCurrAcc_FK");

            });

            // Configure relationships for prWorkplaceSGKLogonInfo
            modelBuilder.Entity<prWorkplaceSGKLogonInfo>(entity =>
            {
                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkplaceSGKLogonInfo_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("prWorkplaceSGKLogonInfo_cdWorkPlace_FK");

            });

            // Configure relationships for rpAirConnUSB_GetControlTapeLine
            modelBuilder.Entity<rpAirConnUSB_GetControlTapeLine>(entity =>
            {
                entity.HasOne(d => d.rpAirConnUSB_GetControlTapeHeader)
                    .WithMany()
                    .HasForeignKey(d => d.TransactionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpAirConnUSB_GetControlTapeLine_rpAirConnUSB_GetControlTapeHeader_FK");

            });

            // Configure relationships for rpCompareTransactionLine
            modelBuilder.Entity<rpCompareTransactionLine>(entity =>
            {
                entity.HasOne(d => d.rpCompareTransactionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CompareTransactionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpCompareTransactionLine_rpCompareTransactionHeader_FK");

            });

            // Configure relationships for rpCompareTransactionSourceFiles
            modelBuilder.Entity<rpCompareTransactionSourceFiles>(entity =>
            {
                entity.HasOne(d => d.rpCompareTransactionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CompareTransactionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpCompareTransactionSourceFiles_rpCompareTransactionHeader_FK");

            });

            // Configure relationships for rpCompareTransactionTargetFiles
            modelBuilder.Entity<rpCompareTransactionTargetFiles>(entity =>
            {
                entity.HasOne(d => d.rpCompareTransactionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CompareTransactionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpCompareTransactionTargetFiles_rpCompareTransactionHeader_FK");

            });

            // Configure relationships for rpExternalItemFileHeader
            modelBuilder.Entity<rpExternalItemFileHeader>(entity =>
            {
                entity.HasOne(d => d.bsFileFormatType)
                    .WithMany()
                    .HasForeignKey(d => d.FileFormatTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpExternalItemFileHeader_bsFileFormatType_FK");

            });

            // Configure relationships for rpExternalItemFileLine
            modelBuilder.Entity<rpExternalItemFileLine>(entity =>
            {
                entity.HasOne(d => d.rpExternalItemFileHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExternalItemFileHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpExternalItemFileLine_rpExternalItemFileHeader_FK");

            });

            // Configure relationships for rpOrderDeliveryAssignmentCollectedItems
            modelBuilder.Entity<rpOrderDeliveryAssignmentCollectedItems>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_trOrderLine_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_bsProcess_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdBatch_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdOffice_FK");

                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdVehicle_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpOrderDeliveryAssignmentCollectedItems_cdCurrAcc_FK");

            });

            // Configure relationships for rpProposalLineConfirmationHistory
            modelBuilder.Entity<rpProposalLineConfirmationHistory>(entity =>
            {
                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpProposalLineConfirmationHistory_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpProposalLineConfirmationHistory_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.tpProposalLineRevision)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpProposalLineConfirmationHistory_tpProposalLineRevision_FK");

                entity.HasOne(d => d.tpProposalLineRevision)
                    .WithMany()
                    .HasForeignKey(d => d.RevisionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpProposalLineConfirmationHistory_tpProposalLineRevision_FK");

                entity.HasOne(d => d.trPurchaseRequisitionProposalConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpProposalLineConfirmationHistory_trPurchaseRequisitionProposalConfirmationEMailNotification_FK");

            });

            // Configure relationships for rpPurchaseRequisitionConfirmationHistory
            modelBuilder.Entity<rpPurchaseRequisitionConfirmationHistory>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionConfirmationHistory_trPurchaseRequisitionConfirmationEMailNotification_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionRevision)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionConfirmationHistory_tpPurchaseRequisitionRevision_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionRevision)
                    .WithMany()
                    .HasForeignKey(d => d.RevisionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionConfirmationHistory_tpPurchaseRequisitionRevision_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionConfirmationHistory_prRequisitionConfirmationRuleStep_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionConfirmationHistory_prRequisitionConfirmationRuleStep_FK");

            });

            // Configure relationships for rpPurchaseRequisitionProposalConfirmationHistory
            modelBuilder.Entity<rpPurchaseRequisitionProposalConfirmationHistory>(entity =>
            {
                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionProposalConfirmationHistory_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionProposalConfirmationHistory_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.trPurchaseRequisitionProposalConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionProposalConfirmationHistory_trPurchaseRequisitionProposalConfirmationEMailNotification_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionProposalRevision)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionProposalConfirmationHistory_tpPurchaseRequisitionProposalRevision_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionProposalRevision)
                    .WithMany()
                    .HasForeignKey(d => d.RevisionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpPurchaseRequisitionProposalConfirmationHistory_tpPurchaseRequisitionProposalRevision_FK");

            });

            // Configure relationships for rpRegisteredEmailForPayrollSendStatus
            modelBuilder.Entity<rpRegisteredEmailForPayrollSendStatus>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpRegisteredEmailForPayrollSendStatus_cdCompany_FK");

                entity.HasOne(d => d.trPayrollHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpRegisteredEmailForPayrollSendStatus_trPayrollHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpRegisteredEmailForPayrollSendStatus_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpRegisteredEmailForPayrollSendStatus_cdCurrAcc_FK");

            });

            // Configure relationships for rpSelectedProduct
            modelBuilder.Entity<rpSelectedProduct>(entity =>
            {
                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("rpSelectedProduct_cdSalesperson_FK");

            });

            // Configure relationships for srCashSerialNumber
            modelBuilder.Entity<srCashSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCashSerialNumber_cdOffice_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCashSerialNumber_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCashSerialNumber_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCashSerialNumber_cdCurrAcc_FK");

            });

            // Configure relationships for srChequesSerialNumber
            modelBuilder.Entity<srChequesSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srChequesSerialNumber_cdOffice_FK");

                entity.HasOne(d => d.bsChequeType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srChequesSerialNumber_bsChequeType_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srChequesSerialNumber_cdBank_FK");

            });

            // Configure relationships for srCodeNumberCheque
            modelBuilder.Entity<srCodeNumberCheque>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberCheque_cdCompany_FK");

                entity.HasOne(d => d.bsChequeType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberCheque_bsChequeType_FK");

            });

            // Configure relationships for srCodeNumberCurrAcc
            modelBuilder.Entity<srCodeNumberCurrAcc>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberCurrAcc_cdCompany_FK");

                entity.HasOne(d => d.bsCurrAccType)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberCurrAcc_bsCurrAccType_FK");

            });

            // Configure relationships for srCodeNumberGiftCard
            modelBuilder.Entity<srCodeNumberGiftCard>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberGiftCard_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberGiftCard_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberGiftCard_cdItem_FK");

            });

            // Configure relationships for srCodeNumberItem
            modelBuilder.Entity<srCodeNumberItem>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberItem_cdCompany_FK");

                entity.HasOne(d => d.bsItemType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberItem_bsItemType_FK");

            });

            // Configure relationships for srCodeNumberLetterOfGuarantee
            modelBuilder.Entity<srCodeNumberLetterOfGuarantee>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberLetterOfGuarantee_cdCompany_FK");

                entity.HasOne(d => d.bsLetterOfGuaranteeType)
                    .WithMany()
                    .HasForeignKey(d => d.LetterOfGuaranteeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberLetterOfGuarantee_bsLetterOfGuaranteeType_FK");

            });

            // Configure relationships for srCodeNumberWarehouse
            modelBuilder.Entity<srCodeNumberWarehouse>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberWarehouse_cdCompany_FK");

                entity.HasOne(d => d.cdWarehouseType)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCodeNumberWarehouse_cdWarehouseType_FK");

            });

            // Configure relationships for srCustomerConversationFormNumber
            modelBuilder.Entity<srCustomerConversationFormNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srCustomerConversationFormNumber_cdCompany_FK");

            });

            // Configure relationships for srDistanceSaleBankPaymentNumber
            modelBuilder.Entity<srDistanceSaleBankPaymentNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srDistanceSaleBankPaymentNumber_cdCompany_FK");

            });

            // Configure relationships for srEArchiveSerialNumber
            modelBuilder.Entity<srEArchiveSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srEArchiveSerialNumber_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srEArchiveSerialNumber_cdOffice_FK");

            });

            // Configure relationships for srEInvoiceSerialNumber
            modelBuilder.Entity<srEInvoiceSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srEInvoiceSerialNumber_cdCompany_FK");

            });

            // Configure relationships for srEShipmentSerialNumber
            modelBuilder.Entity<srEShipmentSerialNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srEShipmentSerialNumber_cdCompany_FK");

            });

            // Configure relationships for srExpenseInvoiceDocumentNumber
            modelBuilder.Entity<srExpenseInvoiceDocumentNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srExpenseInvoiceDocumentNumber_cdCompany_FK");

            });

            // Configure relationships for srOnlineInstallmentBankPayment
            modelBuilder.Entity<srOnlineInstallmentBankPayment>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srOnlineInstallmentBankPayment_cdCompany_FK");

            });

            // Configure relationships for srOpticalProtocolNumber
            modelBuilder.Entity<srOpticalProtocolNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srOpticalProtocolNumber_cdCompany_FK");

            });

            // Configure relationships for srPayrollDocumentNumber
            modelBuilder.Entity<srPayrollDocumentNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srPayrollDocumentNumber_cdCompany_FK");

            });

            // Configure relationships for srRefNumberAdjustCost
            modelBuilder.Entity<srRefNumberAdjustCost>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberAdjustCost_cdCompany_FK");

            });

            // Configure relationships for srRefNumberAgentReservation
            modelBuilder.Entity<srRefNumberAgentReservation>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberAgentReservation_cdCompany_FK");

            });

            // Configure relationships for srRefNumberAllocation
            modelBuilder.Entity<srRefNumberAllocation>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberAllocation_cdCompany_FK");

            });

            // Configure relationships for srRefNumberBadDebt
            modelBuilder.Entity<srRefNumberBadDebt>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBadDebt_cdCompany_FK");

            });

            // Configure relationships for srRefNumberBankCredit
            modelBuilder.Entity<srRefNumberBankCredit>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBankCredit_cdCompany_FK");

            });

            // Configure relationships for srRefNumberBankPaymentInstruction
            modelBuilder.Entity<srRefNumberBankPaymentInstruction>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBankPaymentInstruction_cdCompany_FK");

            });

            // Configure relationships for srRefNumberBankPaymentList
            modelBuilder.Entity<srRefNumberBankPaymentList>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBankPaymentList_cdCompany_FK");

            });

            // Configure relationships for srRefNumberBankTrans
            modelBuilder.Entity<srRefNumberBankTrans>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBankTrans_cdCompany_FK");

                entity.HasOne(d => d.bsBankTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BankTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberBankTrans_bsBankTransType_FK");

            });

            // Configure relationships for srRefNumberCashTrans
            modelBuilder.Entity<srRefNumberCashTrans>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberCashTrans_cdCompany_FK");

            });

            // Configure relationships for srRefNumberChequeTrans
            modelBuilder.Entity<srRefNumberChequeTrans>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberChequeTrans_cdCompany_FK");

                entity.HasOne(d => d.bsChequeTransType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberChequeTrans_bsChequeTransType_FK");

            });

            // Configure relationships for srRefNumberConfirmationForm
            modelBuilder.Entity<srRefNumberConfirmationForm>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberConfirmationForm_cdCompany_FK");

                entity.HasOne(d => d.cdConfirmationFormType)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationFormTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberConfirmationForm_cdConfirmationFormType_FK");

            });

            // Configure relationships for srRefNumberContract
            modelBuilder.Entity<srRefNumberContract>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberContract_cdCompany_FK");

                entity.HasOne(d => d.bsContractType)
                    .WithMany()
                    .HasForeignKey(d => d.ContractTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberContract_bsContractType_FK");

            });

            // Configure relationships for srRefNumberCreditCardPayment
            modelBuilder.Entity<srRefNumberCreditCardPayment>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberCreditCardPayment_cdCompany_FK");

            });

            // Configure relationships for srRefNumberDebit
            modelBuilder.Entity<srRefNumberDebit>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberDebit_cdCompany_FK");

                entity.HasOne(d => d.bsDebitType)
                    .WithMany()
                    .HasForeignKey(d => d.DebitTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberDebit_bsDebitType_FK");

            });

            // Configure relationships for srRefNumberDepartmentReceipt
            modelBuilder.Entity<srRefNumberDepartmentReceipt>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberDepartmentReceipt_cdCompany_FK");

            });

            // Configure relationships for srRefNumberDeviceDocument
            modelBuilder.Entity<srRefNumberDeviceDocument>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberDeviceDocument_cdCompany_FK");

            });

            // Configure relationships for srRefNumberDiscountVoucher
            modelBuilder.Entity<srRefNumberDiscountVoucher>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberDiscountVoucher_cdOffice_FK");

            });

            // Configure relationships for srRefNumberExpenseAccrual
            modelBuilder.Entity<srRefNumberExpenseAccrual>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberExpenseAccrual_cdCompany_FK");

            });

            // Configure relationships for srRefNumberExpenseSlip
            modelBuilder.Entity<srRefNumberExpenseSlip>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberExpenseSlip_cdCompany_FK");

            });

            // Configure relationships for srRefNumberGiftCardPayment
            modelBuilder.Entity<srRefNumberGiftCardPayment>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberGiftCardPayment_cdCompany_FK");

            });

            // Configure relationships for srRefNumberIncentive
            modelBuilder.Entity<srRefNumberIncentive>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberIncentive_cdCompany_FK");

            });

            // Configure relationships for srRefNumberInnerOrder
            modelBuilder.Entity<srRefNumberInnerOrder>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberInnerOrder_cdCompany_FK");

                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberInnerOrder_bsInnerProcess_FK");

            });

            // Configure relationships for srRefNumberInnerProcess
            modelBuilder.Entity<srRefNumberInnerProcess>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberInnerProcess_bsInnerProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberInnerProcess_cdCompany_FK");

            });

            // Configure relationships for srRefNumberItemTest
            modelBuilder.Entity<srRefNumberItemTest>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberItemTest_cdCompany_FK");

            });

            // Configure relationships for srRefNumberJournal
            modelBuilder.Entity<srRefNumberJournal>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberJournal_cdCompany_FK");

            });

            // Configure relationships for srRefNumberOtherPayment
            modelBuilder.Entity<srRefNumberOtherPayment>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberOtherPayment_cdCompany_FK");

            });

            // Configure relationships for srRefNumberPayment
            modelBuilder.Entity<srRefNumberPayment>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberPayment_cdCompany_FK");

            });

            // Configure relationships for srRefNumberPriceList
            modelBuilder.Entity<srRefNumberPriceList>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberPriceList_cdCompany_FK");

            });

            // Configure relationships for srRefNumberProcessFlow
            modelBuilder.Entity<srRefNumberProcessFlow>(entity =>
            {
                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberProcessFlow_bsProcessFlow_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberProcessFlow_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberProcessFlow_cdCompany_FK");

            });

            // Configure relationships for srRefNumberPurchaseRequisition
            modelBuilder.Entity<srRefNumberPurchaseRequisition>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberPurchaseRequisition_cdCompany_FK");

            });

            // Configure relationships for srRefNumberReportedSale
            modelBuilder.Entity<srRefNumberReportedSale>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberReportedSale_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberReportedSale_bsProcess_FK");

            });

            // Configure relationships for srRefNumberSalesPlan
            modelBuilder.Entity<srRefNumberSalesPlan>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberSalesPlan_cdCompany_FK");

            });

            // Configure relationships for srRefNumberSupportRequest
            modelBuilder.Entity<srRefNumberSupportRequest>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberSupportRequest_cdCompany_FK");

            });

            // Configure relationships for srRefNumberTaxIncurred
            modelBuilder.Entity<srRefNumberTaxIncurred>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberTaxIncurred_cdCompany_FK");

            });

            // Configure relationships for srRefNumberTransferPlan
            modelBuilder.Entity<srRefNumberTransferPlan>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberTransferPlan_cdCompany_FK");

            });

            // Configure relationships for srRefNumberVehicleLoading
            modelBuilder.Entity<srRefNumberVehicleLoading>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberVehicleLoading_cdCompany_FK");

            });

            // Configure relationships for srRefNumberVehicleUnLoading
            modelBuilder.Entity<srRefNumberVehicleUnLoading>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberVehicleUnLoading_cdCompany_FK");

            });

            // Configure relationships for srRefNumberVendorPriceList
            modelBuilder.Entity<srRefNumberVendorPriceList>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberVendorPriceList_cdCompany_FK");

            });

            // Configure relationships for srRefNumberVirement
            modelBuilder.Entity<srRefNumberVirement>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srRefNumberVirement_cdCompany_FK");

            });

            // Configure relationships for srSerialNumber
            modelBuilder.Entity<srSerialNumber>(entity =>
            {
                entity.HasOne(d => d.bsProcessFlow)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessFlowCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srSerialNumber_bsProcessFlow_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srSerialNumber_cdOffice_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("srSerialNumber_cdWarehouse_FK");

            });

            // Configure relationships for stItemRollNumber
            modelBuilder.Entity<stItemRollNumber>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_trInvoiceLine_FK");

                entity.HasOne(d => d.cdRoll)
                    .WithMany()
                    .HasForeignKey(d => d.RollNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_cdRoll_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_cdBatch_FK");

                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_trInnerLine_FK");

                entity.HasOne(d => d.cdBatchGroup)
                    .WithMany()
                    .HasForeignKey(d => d.BatchGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_cdBatchGroup_FK");

                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.StockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_trStock_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumber_trShipmentLine_FK");

            });

            // Configure relationships for stItemRollNumberPicking
            modelBuilder.Entity<stItemRollNumberPicking>(entity =>
            {
                entity.HasOne(d => d.cdBatchGroup)
                    .WithMany()
                    .HasForeignKey(d => d.BatchGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumberPicking_cdBatchGroup_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumberPicking_cdBatch_FK");

                entity.HasOne(d => d.cdRoll)
                    .WithMany()
                    .HasForeignKey(d => d.RollNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumberPicking_cdRoll_FK");

                entity.HasOne(d => d.trPickingLine)
                    .WithMany()
                    .HasForeignKey(d => d.PickingLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemRollNumberPicking_trPickingLine_FK");

            });

            // Configure relationships for stItemSerialNumber
            modelBuilder.Entity<stItemSerialNumber>(entity =>
            {
                entity.HasOne(d => d.trReportedSaleLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReportedSaleLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_trReportedSaleLine_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_trInvoiceLine_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_cdBatch_FK");

                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_trInnerLine_FK");

                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.StockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_trStock_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("stItemSerialNumber_trShipmentLine_FK");

            });

            // Configure relationships for tpAgentContractDeservedDebit
            modelBuilder.Entity<tpAgentContractDeservedDebit>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractDeservedDebit_trDebitHeader_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractDeservedDebit_trAgentReservationHeader_FK");

            });

            // Configure relationships for tpAgentContractVehicleDebit
            modelBuilder.Entity<tpAgentContractVehicleDebit>(entity =>
            {
                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractVehicleDebit_trAgentReservationHeader_FK");

                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractVehicleDebit_trDebitHeader_FK");

            });

            // Configure relationships for tpAgentContractVisitFrequencyDebit
            modelBuilder.Entity<tpAgentContractVisitFrequencyDebit>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractVisitFrequencyDebit_trDebitHeader_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentContractVisitFrequencyDebit_trAgentReservationHeader_FK");

            });

            // Configure relationships for tpAgentPerformanceBonusDebit
            modelBuilder.Entity<tpAgentPerformanceBonusDebit>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentPerformanceBonusDebit_trDebitHeader_FK");

                entity.HasOne(d => d.trAgentPerformanceBonusHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentPerformanceBonusHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentPerformanceBonusDebit_trAgentPerformanceBonusHeader_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentPerformanceBonusDebit_trInvoiceHeader_FK");

            });

            // Configure relationships for tpAgentPerformanceDebit
            modelBuilder.Entity<tpAgentPerformanceDebit>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentPerformanceDebit_trDebitHeader_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentPerformanceDebit_trAgentReservationHeader_FK");

            });

            // Configure relationships for tpAgentReservationActualPax
            modelBuilder.Entity<tpAgentReservationActualPax>(entity =>
            {
                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentReservationActualPax_trAgentReservationHeader_FK");

                entity.HasOne(d => d.bsGender)
                    .WithMany()
                    .HasForeignKey(d => d.GenderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentReservationActualPax_bsGender_FK");

            });

            // Configure relationships for tpAgentReservationReasonForNotShopping
            modelBuilder.Entity<tpAgentReservationReasonForNotShopping>(entity =>
            {
                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentReservationReasonForNotShopping_trAgentReservationHeader_FK");

                entity.HasOne(d => d.cdReasonForNotShopping)
                    .WithMany()
                    .HasForeignKey(d => d.ReasonForNotShoppingCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAgentReservationReasonForNotShopping_cdReasonForNotShopping_FK");

            });

            // Configure relationships for tpAllocationATAttribute
            modelBuilder.Entity<tpAllocationATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationATAttribute_trAllocation_FK");

            });

            // Configure relationships for tpAllocationITAttribute
            modelBuilder.Entity<tpAllocationITAttribute>(entity =>
            {
                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationITAttribute_trAllocation_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpAllocationITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpBadDebtLawyerHistory
            modelBuilder.Entity<tpBadDebtLawyerHistory>(entity =>
            {
                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.OldLawyerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBadDebtLawyerHistory_cdLawyer_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.NewLawyerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBadDebtLawyerHistory_cdLawyer_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBadDebtLawyerHistory_cdLawyer_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBadDebtLawyerHistory_cdLawyer_FK");

                entity.HasOne(d => d.trBadDebtTransHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBadDebtLawyerHistory_trBadDebtTransHeader_FK");

            });

            // Configure relationships for tpBankATAttribute
            modelBuilder.Entity<tpBankATAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankATAttribute_trBankHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpBankCreditATAttribute
            modelBuilder.Entity<tpBankCreditATAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditATAttribute_trBankCreditHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpBankCreditFTAttribute
            modelBuilder.Entity<tpBankCreditFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditFTAttribute_trBankCreditHeader_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpBankCreditRelatedCheques
            modelBuilder.Entity<tpBankCreditRelatedCheques>(entity =>
            {
                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRelatedCheques_trBankCreditHeader_FK");

                entity.HasOne(d => d.trChequeLine)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRelatedCheques_trChequeLine_FK");

            });

            // Configure relationships for tpBankCreditRelatedExportFiles
            modelBuilder.Entity<tpBankCreditRelatedExportFiles>(entity =>
            {
                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRelatedExportFiles_trBankCreditHeader_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRelatedExportFiles_cdExportFile_FK");

            });

            // Configure relationships for tpBankCreditRotativeInterestRates
            modelBuilder.Entity<tpBankCreditRotativeInterestRates>(entity =>
            {
                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRotativeInterestRates_trBankCreditHeader_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankCreditRotativeInterestRates_trJournalHeader_FK");

            });

            // Configure relationships for tpBankFTAttribute
            modelBuilder.Entity<tpBankFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankFTAttribute_trBankLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpBankHeaderOnlineBankIntegration
            modelBuilder.Entity<tpBankHeaderOnlineBankIntegration>(entity =>
            {
                entity.HasOne(d => d.trBankHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankHeaderOnlineBankIntegration_trBankHeader_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankHeaderOnlineBankIntegration_cdOnlineBankWebService_FK");

                entity.HasOne(d => d.cdOnlineBankWebService)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankWebServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankHeaderOnlineBankIntegration_cdOnlineBankWebService_FK");

            });

            // Configure relationships for tpBankMT940
            modelBuilder.Entity<tpBankMT940>(entity =>
            {
                entity.HasOne(d => d.trBankHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankMT940_trBankHeader_FK");

                entity.HasOne(d => d.prMT940ProcessRules)
                    .WithMany()
                    .HasForeignKey(d => d.MT940ProcessRulesID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankMT940_prMT940ProcessRules_FK");

            });

            // Configure relationships for tpBankPaymentInstructionATAttribute
            modelBuilder.Entity<tpBankPaymentInstructionATAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankPaymentInstructionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentInstructionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionATAttribute_trBankPaymentInstructionHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpBankPaymentInstructionFTAttribute
            modelBuilder.Entity<tpBankPaymentInstructionFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankPaymentInstructionLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentInstructionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionFTAttribute_trBankPaymentInstructionLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentInstructionFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpBankPaymentListATAttribute
            modelBuilder.Entity<tpBankPaymentListATAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankPaymentListHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentListHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListATAttribute_trBankPaymentListHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpBankPaymentListFTAttribute
            modelBuilder.Entity<tpBankPaymentListFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trBankPaymentListLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentListLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListFTAttribute_trBankPaymentListLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBankPaymentListFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpBulutTahsilatCreditCardPayment
            modelBuilder.Entity<tpBulutTahsilatCreditCardPayment>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpBulutTahsilatCreditCardPayment_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for tpCashATAttribute
            modelBuilder.Entity<tpCashATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.trCashHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CashHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashATAttribute_trCashHeader_FK");

            });

            // Configure relationships for tpCashFTAttribute
            modelBuilder.Entity<tpCashFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trCashLine)
                    .WithMany()
                    .HasForeignKey(d => d.CashLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashFTAttribute_trCashLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpCashRegisterInfo
            modelBuilder.Entity<tpCashRegisterInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCashRegisterInfo_trInvoiceHeader_FK");

            });

            // Configure relationships for tpChequeATAttribute
            modelBuilder.Entity<tpChequeATAttribute>(entity =>
            {
                entity.HasOne(d => d.trChequeHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeATAttribute_trChequeHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpChequeFTAttribute
            modelBuilder.Entity<tpChequeFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trChequeLine)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeFTAttribute_trChequeLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpChequeFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpCompanyCreditCardPaymentDueDate
            modelBuilder.Entity<tpCompanyCreditCardPaymentDueDate>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCompanyCreditCardPaymentDueDate_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for tpContractATAttribute
            modelBuilder.Entity<tpContractATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.trContract)
                    .WithMany()
                    .HasForeignKey(d => d.ContractID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractATAttribute_trContract_FK");

            });

            // Configure relationships for tpContractITAttribute
            modelBuilder.Entity<tpContractITAttribute>(entity =>
            {
                entity.HasOne(d => d.trContract)
                    .WithMany()
                    .HasForeignKey(d => d.ContractID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractITAttribute_trContract_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpContractITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpCreditCardBulutTahsilatVPOSReturn
            modelBuilder.Entity<tpCreditCardBulutTahsilatVPOSReturn>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardBulutTahsilatVPOSReturn_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for tpCreditCardPaymentATAttribute
            modelBuilder.Entity<tpCreditCardPaymentATAttribute>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentATAttribute_trCreditCardPaymentHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpCreditCardPaymentDueDate
            modelBuilder.Entity<tpCreditCardPaymentDueDate>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentDueDate_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for tpCreditCardPaymentFTAttribute
            modelBuilder.Entity<tpCreditCardPaymentFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentFTAttribute_trCreditCardPaymentLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpCreditCardPaymentHeaderOnlineBankIntegration
            modelBuilder.Entity<tpCreditCardPaymentHeaderOnlineBankIntegration>(entity =>
            {
                entity.HasOne(d => d.zpOnlineBankCreditCardPaymentTransaction)
                    .WithMany()
                    .HasForeignKey(d => d.OnlineBankTransactionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentHeaderOnlineBankIntegration_zpOnlineBankCreditCardPaymentTransaction_FK");

                entity.HasOne(d => d.trCreditCardPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCreditCardPaymentHeaderOnlineBankIntegration_trCreditCardPaymentHeader_FK");

            });

            // Configure relationships for tpCurrAccBookATAttribute
            modelBuilder.Entity<tpCurrAccBookATAttribute>(entity =>
            {
                entity.HasOne(d => d.trCurrAccBook)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccBookID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookATAttribute_trCurrAccBook_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpCurrAccBookFTAttribute
            modelBuilder.Entity<tpCurrAccBookFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trCurrAccBook)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccBookID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookFTAttribute_trCurrAccBook_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpCurrAccBookFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpDebitATAttribute
            modelBuilder.Entity<tpDebitATAttribute>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitATAttribute_trDebitHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpDebitFTAttribute
            modelBuilder.Entity<tpDebitFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitFTAttribute_trDebitLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDebitFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpDispOrderHeaderExtension
            modelBuilder.Entity<tpDispOrderHeaderExtension>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.DBSBankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDispOrderHeaderExtension_cdBank_FK");

                entity.HasOne(d => d.trDispOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDispOrderHeaderExtension_trDispOrderHeader_FK");

            });

            // Configure relationships for tpDistanceSaleBankPayment
            modelBuilder.Entity<tpDistanceSaleBankPayment>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpDistanceSaleBankPayment_trOrderHeader_FK");

            });

            // Configure relationships for tpEArchieveIntegratorInfo
            modelBuilder.Entity<tpEArchieveIntegratorInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpEArchieveIntegratorInfo_trInvoiceHeader_FK");

            });

            // Configure relationships for tpEArchiveInvoiceConfirmation
            modelBuilder.Entity<tpEArchiveInvoiceConfirmation>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpEArchiveInvoiceConfirmation_trInvoiceHeader_FK");

            });

            // Configure relationships for tpExpenseAccrualATAttribute
            modelBuilder.Entity<tpExpenseAccrualATAttribute>(entity =>
            {
                entity.HasOne(d => d.trExpenseAccrualHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualATAttribute_trExpenseAccrualHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpExpenseAccrualFTAttribute
            modelBuilder.Entity<tpExpenseAccrualFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trExpenseAccrualLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualFTAttribute_trExpenseAccrualLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseAccrualFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpExpenseInvoiceConfirmation
            modelBuilder.Entity<tpExpenseInvoiceConfirmation>(entity =>
            {
                entity.HasOne(d => d.prCompanyExpenseInvoiceConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyExpenseInvoiceConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseInvoiceConfirmation_prCompanyExpenseInvoiceConfirmationRule_FK");

                entity.HasOne(d => d.prExpenseInvoiceConfirmationRule)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseInvoiceConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseInvoiceConfirmation_prExpenseInvoiceConfirmationRule_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseInvoiceConfirmation_trInvoiceHeader_FK");

            });

            // Configure relationships for tpExpenseSlipATAttribute
            modelBuilder.Entity<tpExpenseSlipATAttribute>(entity =>
            {
                entity.HasOne(d => d.trExpenseSlipHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipATAttribute_trExpenseSlipHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpExpenseSlipFTAttribute
            modelBuilder.Entity<tpExpenseSlipFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipFTAttribute_trExpenseSlipLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpExpenseSlipTaxLine
            modelBuilder.Entity<tpExpenseSlipTaxLine>(entity =>
            {
                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipTaxLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipTaxLine_trExpenseSlipLine_FK");

                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExpenseSlipTaxLine_trExpenseSlipLine_FK");

            });

            // Configure relationships for tpExportSaleRealisition
            modelBuilder.Entity<tpExportSaleRealisition>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpExportSaleRealisition_trInvoiceHeader_FK");

            });

            // Configure relationships for tpGiftCardPaymentATAttribute
            modelBuilder.Entity<tpGiftCardPaymentATAttribute>(entity =>
            {
                entity.HasOne(d => d.trGiftCardPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentATAttribute_trGiftCardPaymentHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpGiftCardPaymentFTAttribute
            modelBuilder.Entity<tpGiftCardPaymentFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trGiftCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentFTAttribute_trGiftCardPaymentLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpGiftCardPaymentFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpInnerCustomsTransferImportInvoiceLine
            modelBuilder.Entity<tpInnerCustomsTransferImportInvoiceLine>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerCustomsTransferImportInvoiceLine_trInnerLine_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerCustomsTransferImportInvoiceLine_trInvoiceLine_FK");

            });

            // Configure relationships for tpInnerHeaderExtension
            modelBuilder.Entity<tpInnerHeaderExtension>(entity =>
            {
                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_trInnerHeader_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.MainInnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_trInnerHeader_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_cdRoundsman_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_cdShipmentMethod_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_cdDeliveryCompany_FK");

                entity.HasOne(d => d.bsShipmentType)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_bsShipmentType_FK");

                entity.HasOne(d => d.bsEShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerHeaderExtension_bsEShipmentStatus_FK");

            });

            // Configure relationships for tpInnerITAttribute
            modelBuilder.Entity<tpInnerITAttribute>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerITAttribute_trInnerLine_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpInnerLineDocument
            modelBuilder.Entity<tpInnerLineDocument>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLineDocument_trInnerLine_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLineDocument_trDebitLine_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLineDocument_trOrderHeader_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLineDocument_trInvoiceHeader_FK");

                entity.HasOne(d => d.trOrderPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.OrderPaymentPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLineDocument_trOrderPaymentPlan_FK");

            });

            // Configure relationships for tpInnerLinePurchaseInvoiceLine
            modelBuilder.Entity<tpInnerLinePurchaseInvoiceLine>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLinePurchaseInvoiceLine_trInvoiceLine_FK");

                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerLinePurchaseInvoiceLine_trInnerLine_FK");

            });

            // Configure relationships for tpInnerOrderITAttribute
            modelBuilder.Entity<tpInnerOrderITAttribute>(entity =>
            {
                entity.HasOne(d => d.trInnerOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerOrderITAttribute_trInnerOrderLine_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerOrderITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerOrderITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpInnerTransportModeDetail
            modelBuilder.Entity<tpInnerTransportModeDetail>(entity =>
            {
                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerTransportModeDetail_cdVehicle_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerTransportModeDetail_trInnerHeader_FK");

            });

            // Configure relationships for tpInnerVehicleDrivers
            modelBuilder.Entity<tpInnerVehicleDrivers>(entity =>
            {
                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerVehicleDrivers_trInnerHeader_FK");

                entity.HasOne(d => d.cdDriver)
                    .WithMany()
                    .HasForeignKey(d => d.DriverCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInnerVehicleDrivers_cdDriver_FK");

            });

            // Configure relationships for tpInStockDeclarationInfo
            modelBuilder.Entity<tpInStockDeclarationInfo>(entity =>
            {
                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.InStockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInStockDeclarationInfo_trStock_FK");

            });

            // Configure relationships for tpInvoiceadditionalDeliveryProcessesDistance
            modelBuilder.Entity<tpInvoiceadditionalDeliveryProcessesDistance>(entity =>
            {
                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceadditionalDeliveryProcessesDistance_cdCity_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceadditionalDeliveryProcessesDistance_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceadditionalDeliveryProcessesDistance_cdWarehouse_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryDistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceadditionalDeliveryProcessesDistance_cdDistrict_FK");

            });

            // Configure relationships for tpInvoiceATAttribute
            modelBuilder.Entity<tpInvoiceATAttribute>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceATAttribute_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpInvoiceCancelDBSBankIntegration
            modelBuilder.Entity<tpInvoiceCancelDBSBankIntegration>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceCancelDBSBankIntegration_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceDiscountOffer
            modelBuilder.Entity<tpInvoiceDiscountOffer>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceDiscountOffer_trInvoiceHeader_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceDiscountOffer_trInvoiceLine_FK");

            });

            // Configure relationships for tpInvoiceDiscountOfferContributor
            modelBuilder.Entity<tpInvoiceDiscountOfferContributor>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceDiscountOfferContributor_trInvoiceLine_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceDiscountOfferContributor_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceEArchieveXML
            modelBuilder.Entity<tpInvoiceEArchieveXML>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceEArchieveXML_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceEInvoiceXML
            modelBuilder.Entity<tpInvoiceEInvoiceXML>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceEInvoiceXML_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceExchangeDifferencePaidCheque
            modelBuilder.Entity<tpInvoiceExchangeDifferencePaidCheque>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceExchangeDifferencePaidCheque_trInvoiceHeader_FK");

                entity.HasOne(d => d.trChequeHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceExchangeDifferencePaidCheque_trChequeHeader_FK");

            });

            // Configure relationships for tpInvoiceFTAttribute
            modelBuilder.Entity<tpInvoiceFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceFTAttribute_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpInvoiceHeaderExtension
            modelBuilder.Entity<tpInvoiceHeaderExtension>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdInsuranceAgency_FK");

                entity.HasOne(d => d.cdLoyaltyProgramStatus)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdLoyaltyProgramStatus_FK");

                entity.HasOne(d => d.bsPaymentMeans)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentMeansCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_bsPaymentMeans_FK");

                entity.HasOne(d => d.cdDiscountSubReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountSubReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdDiscountSubReason_FK");

                entity.HasOne(d => d.cdLoyaltyProgramLevel)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdLoyaltyProgramLevel_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_trAgentReservationHeader_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.DBSBankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdBank_FK");

                entity.HasOne(d => d.cdExportType)
                    .WithMany()
                    .HasForeignKey(d => d.ExportTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdExportType_FK");

                entity.HasOne(d => d.cdLoyaltyProgram)
                    .WithMany()
                    .HasForeignKey(d => d.LoyaltyProgramCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_cdLoyaltyProgram_FK");

                entity.HasOne(d => d.bsInvoiceReturnType)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceReturnTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_bsInvoiceReturnType_FK");

                entity.HasOne(d => d.bsTaxFreeRefundCompany)
                    .WithMany()
                    .HasForeignKey(d => d.TaxFreeRefundCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderExtension_bsTaxFreeRefundCompany_FK");

            });

            // Configure relationships for tpInvoiceHeaderSalesPerson
            modelBuilder.Entity<tpInvoiceHeaderSalesPerson>(entity =>
            {
                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderSalesPerson_cdSalesperson_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderSalesPerson_trAgentReservationHeader_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceHeaderSalesPerson_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceITAttribute
            modelBuilder.Entity<tpInvoiceITAttribute>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceITAttribute_trInvoiceLine_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpInvoiceLineAgentPerformance
            modelBuilder.Entity<tpInvoiceLineAgentPerformance>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineAgentPerformance_trInvoiceLine_FK");

                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineAgentPerformance_trAgentContractHeader_FK");

                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineAgentPerformance_trAgentReservationHeader_FK");

            });

            // Configure relationships for tpInvoiceLineExpenseAccrual
            modelBuilder.Entity<tpInvoiceLineExpenseAccrual>(entity =>
            {
                entity.HasOne(d => d.trExpenseAccrualLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineExpenseAccrual_trExpenseAccrualLine_FK");

                entity.HasOne(d => d.trExpenseAccrualHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineExpenseAccrual_trExpenseAccrualHeader_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineExpenseAccrual_trInvoiceLine_FK");

            });

            // Configure relationships for tpInvoiceLineExtension
            modelBuilder.Entity<tpInvoiceLineExtension>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineExtension_trInvoiceLine_FK");

            });

            // Configure relationships for tpInvoiceLineOpticalProductInfo
            modelBuilder.Entity<tpInvoiceLineOpticalProductInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineOpticalProductInfo_trInvoiceLine_FK");

                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineOpticalProductInfo_cdInsuranceAgency_FK");

                entity.HasOne(d => d.cdOpticalSut)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalSutCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLineOpticalProductInfo_cdOpticalSut_FK");

            });

            // Configure relationships for tpInvoiceLinePickingDetails
            modelBuilder.Entity<tpInvoiceLinePickingDetails>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_trInvoiceLine_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdPackageBrand)
                    .WithMany()
                    .HasForeignKey(d => d.PackageBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_cdPackageBrand_FK");

                entity.HasOne(d => d.bsPackagingType)
                    .WithMany()
                    .HasForeignKey(d => d.PackagingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_bsPackagingType_FK");

                entity.HasOne(d => d.cdPackageVolume)
                    .WithMany()
                    .HasForeignKey(d => d.PackageVolumeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_cdPackageVolume_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.WeightUnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceLinePickingDetails_cdUnitOfMeasure_FK");

            });

            // Configure relationships for tpInvoiceOpticalContribution
            modelBuilder.Entity<tpInvoiceOpticalContribution>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceOpticalContribution_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceOpticalContribution_cdInsuranceAgency_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceOpticalContribution_trInvoiceLine_FK");

            });

            // Configure relationships for tpInvoicePassportAndBoardingInfo
            modelBuilder.Entity<tpInvoicePassportAndBoardingInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePassportAndBoardingInfo_trInvoiceHeader_FK");

                entity.HasOne(d => d.bsAirportIATA)
                    .WithMany()
                    .HasForeignKey(d => d.DepartureAirportIATACode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePassportAndBoardingInfo_bsAirportIATA_FK");

                entity.HasOne(d => d.bsAirportIATA)
                    .WithMany()
                    .HasForeignKey(d => d.ArrivalAirportIATACode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePassportAndBoardingInfo_bsAirportIATA_FK");

            });

            // Configure relationships for tpInvoicePostalAddress
            modelBuilder.Entity<tpInvoicePostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdCountry_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdState_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdCity_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoicePostalAddress_cdDistrict_FK");

            });

            // Configure relationships for tpInvoiceSGKExtensions
            modelBuilder.Entity<tpInvoiceSGKExtensions>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceSGKExtensions_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceSourceInfo
            modelBuilder.Entity<tpInvoiceSourceInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceSourceInfo_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceTransportModeDetail
            modelBuilder.Entity<tpInvoiceTransportModeDetail>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceTransportModeDetail_trInvoiceHeader_FK");

            });

            // Configure relationships for tpInvoiceUBLExtensions
            modelBuilder.Entity<tpInvoiceUBLExtensions>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceUBLExtensions_trInvoiceHeader_FK");

                entity.HasOne(d => d.bsUBLExtensions)
                    .WithMany()
                    .HasForeignKey(d => d.UBLExtensionField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceUBLExtensions_bsUBLExtensions_FK");

            });

            // Configure relationships for tpInvoiceUnAcceptableExpenseLine
            modelBuilder.Entity<tpInvoiceUnAcceptableExpenseLine>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceUnAcceptableExpenseLine_trInvoiceLine_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.UnAcceptableExpenseInvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpInvoiceUnAcceptableExpenseLine_trInvoiceLine_FK");

            });

            // Configure relationships for tpJournalATAttribute
            modelBuilder.Entity<tpJournalATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalATAttribute_trJournalHeader_FK");

            });

            // Configure relationships for tpJournalFTAttribute
            modelBuilder.Entity<tpJournalFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trJournalLine)
                    .WithMany()
                    .HasForeignKey(d => d.JournalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalFTAttribute_trJournalLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpJournalIntegrationStatus
            modelBuilder.Entity<tpJournalIntegrationStatus>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalIntegrationStatus_bsApplication_FK");

            });

            // Configure relationships for tpJournalLineExtension
            modelBuilder.Entity<tpJournalLineExtension>(entity =>
            {
                entity.HasOne(d => d.bsInvoiceType)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalLineExtension_bsInvoiceType_FK");

            });

            // Configure relationships for tpJournalTaxIncurred
            modelBuilder.Entity<tpJournalTaxIncurred>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalTaxIncurred_trInvoiceHeader_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalTaxIncurred_trJournalHeader_FK");

            });

            // Configure relationships for tpJournalZNum
            modelBuilder.Entity<tpJournalZNum>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdOffice_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.PosterminalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdPOSTerminal)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdPOSTerminal_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNum_cdCurrAcc_FK");

            });

            // Configure relationships for tpJournalZNumDetail
            modelBuilder.Entity<tpJournalZNumDetail>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNumDetail_trInvoiceHeader_FK");

                entity.HasOne(d => d.tpJournalZNum)
                    .WithMany()
                    .HasForeignKey(d => d.zNumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpJournalZNumDetail_tpJournalZNum_FK");

            });

            // Configure relationships for tpOnlineBankPosPaymentList
            modelBuilder.Entity<tpOnlineBankPosPaymentList>(entity =>
            {
                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOnlineBankPosPaymentList_trBankLine_FK");

            });

            // Configure relationships for tpOnlineInstallmentBankPayment
            modelBuilder.Entity<tpOnlineInstallmentBankPayment>(entity =>
            {
                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOnlineInstallmentBankPayment_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CustomerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOnlineInstallmentBankPayment_cdCurrAcc_FK");

            });

            // Configure relationships for tpOrderATAttribute
            modelBuilder.Entity<tpOrderATAttribute>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderATAttribute_trOrderHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpOrderCancelDetail
            modelBuilder.Entity<tpOrderCancelDetail>(entity =>
            {
                entity.HasOne(d => d.tpOrderCancelDetailHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelDetailHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetail_tpOrderCancelDetailHeader_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetail_trOrderLine_FK");

                entity.HasOne(d => d.cdOrderCancelReason)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetail_cdOrderCancelReason_FK");

            });

            // Configure relationships for tpOrderCancelDetailHeader
            modelBuilder.Entity<tpOrderCancelDetailHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_cdCompany_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_trOrderHeader_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_cdOffice_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelDetailHeader_cdCurrAcc_FK");

            });

            // Configure relationships for tpOrderCanceled
            modelBuilder.Entity<tpOrderCanceled>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCanceled_trOrderLine_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.CancelledOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCanceled_trOrderLine_FK");

            });

            // Configure relationships for tpOrderCancelReturnTransactions
            modelBuilder.Entity<tpOrderCancelReturnTransactions>(entity =>
            {
                entity.HasOne(d => d.tpOrderCancelDetailHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelDetailHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCancelReturnTransactions_tpOrderCancelDetailHeader_FK");

            });

            // Configure relationships for tpOrderCashRegisterInfo
            modelBuilder.Entity<tpOrderCashRegisterInfo>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderCashRegisterInfo_trOrderHeader_FK");

            });

            // Configure relationships for tpOrderContractContext
            modelBuilder.Entity<tpOrderContractContext>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderContractContext_trOrderHeader_FK");

            });

            // Configure relationships for tpOrderDeliveryDetail
            modelBuilder.Entity<tpOrderDeliveryDetail>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_cdOffice_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_trOrderLine_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_cdCompany_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_cdWarehouse_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_cdCurrAcc_FK");

                entity.HasOne(d => d.bsOrderDeliveryRecordType)
                    .WithMany()
                    .HasForeignKey(d => d.OrderDeliveryRecordTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDeliveryDetail_bsOrderDeliveryRecordType_FK");

            });

            // Configure relationships for tpOrderDiscountOffer
            modelBuilder.Entity<tpOrderDiscountOffer>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDiscountOffer_trOrderLine_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDiscountOffer_trOrderHeader_FK");

            });

            // Configure relationships for tpOrderDiscountOfferContributor
            modelBuilder.Entity<tpOrderDiscountOfferContributor>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDiscountOfferContributor_trOrderHeader_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDiscountOfferContributor_trOrderLine_FK");

            });

            // Configure relationships for tpOrderDistanceSalesCorrelations
            modelBuilder.Entity<tpOrderDistanceSalesCorrelations>(entity =>
            {
                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderDistanceSalesCorrelations_cdPaymentProvider_FK");

            });

            // Configure relationships for tpOrderFTAttribute
            modelBuilder.Entity<tpOrderFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderFTAttribute_trOrderHeader_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpOrderHeaderExtension
            modelBuilder.Entity<tpOrderHeaderExtension>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderHeaderExtension_trOrderHeader_FK");

                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderHeaderExtension_cdInsuranceAgency_FK");

                entity.HasOne(d => d.cdDiscountSubReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountSubReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderHeaderExtension_cdDiscountSubReason_FK");

                entity.HasOne(d => d.bsFastDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.FastDeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderHeaderExtension_bsFastDeliveryCompany_FK");

            });

            // Configure relationships for tpOrderITAttribute
            modelBuilder.Entity<tpOrderITAttribute>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderITAttribute_trOrderLine_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpOrderLineExtension
            modelBuilder.Entity<tpOrderLineExtension>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderLineExtension_trOrderLine_FK");

                entity.HasOne(d => d.cdOrderStatus)
                    .WithMany()
                    .HasForeignKey(d => d.OrderStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderLineExtension_cdOrderStatus_FK");

            });

            // Configure relationships for tpOrderLineSerialNumber
            modelBuilder.Entity<tpOrderLineSerialNumber>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderLineSerialNumber_trOrderLine_FK");

            });

            // Configure relationships for tpOrderOpticalProductCustomProcess
            modelBuilder.Entity<tpOrderOpticalProductCustomProcess>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOpticalProductCustomProcess_trOrderLine_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOpticalProductCustomProcess_trOrderLine_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOpticalProductCustomProcess_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ServiceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOpticalProductCustomProcess_cdItem_FK");

            });

            // Configure relationships for tpOrderOTAttribute
            modelBuilder.Entity<tpOrderOTAttribute>(entity =>
            {
                entity.HasOne(d => d.cdItemOTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOTAttribute_cdItemOTAttribute_FK");

                entity.HasOne(d => d.cdItemOTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOTAttribute_cdItemOTAttribute_FK");

                entity.HasOne(d => d.cdItemOTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOTAttribute_cdItemOTAttribute_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderOTAttribute_trOrderLine_FK");

            });

            // Configure relationships for tpOrderPostalAddress
            modelBuilder.Entity<tpOrderPostalAddress>(entity =>
            {
                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdCountry_FK");

                entity.HasOne(d => d.cdCity)
                    .WithMany()
                    .HasForeignKey(d => d.CityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdCity_FK");

                entity.HasOne(d => d.cdState)
                    .WithMany()
                    .HasForeignKey(d => d.StateCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdState_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.StreetCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.QuarterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdStreet)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdStreet_FK");

                entity.HasOne(d => d.cdDistrict)
                    .WithMany()
                    .HasForeignKey(d => d.DistrictCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrderPostalAddress_cdDistrict_FK");

            });

            // Configure relationships for tpOrdersViaInternetInfo
            modelBuilder.Entity<tpOrdersViaInternetInfo>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrdersViaInternetInfo_trOrderHeader_FK");

                entity.HasOne(d => d.bsInternetPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOrdersViaInternetInfo_bsInternetPaymentType_FK");

            });

            // Configure relationships for tpOtherPaymentATAttribute
            modelBuilder.Entity<tpOtherPaymentATAttribute>(entity =>
            {
                entity.HasOne(d => d.trOtherPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentATAttribute_trOtherPaymentHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpOtherPaymentFTAttribute
            modelBuilder.Entity<tpOtherPaymentFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trOtherPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentFTAttribute_trOtherPaymentLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOtherPaymentFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpOutStockDeclarationInfo
            modelBuilder.Entity<tpOutStockDeclarationInfo>(entity =>
            {
                entity.HasOne(d => d.tpInStockDeclarationInfo)
                    .WithMany()
                    .HasForeignKey(d => d.InStockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_tpInStockDeclarationInfo_FK");

                entity.HasOne(d => d.tpInStockDeclarationInfo)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationDate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_tpInStockDeclarationInfo_FK");

                entity.HasOne(d => d.tpInStockDeclarationInfo)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_tpInStockDeclarationInfo_FK");

                entity.HasOne(d => d.tpInStockDeclarationInfo)
                    .WithMany()
                    .HasForeignKey(d => d.DeclarationLineNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_tpInStockDeclarationInfo_FK");

                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.OutStockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_trStock_FK");

                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.InStockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpOutStockDeclarationInfo_trStock_FK");

            });

            // Configure relationships for tpPaymentATAttribute
            modelBuilder.Entity<tpPaymentATAttribute>(entity =>
            {
                entity.HasOne(d => d.trPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentATAttribute_trPaymentHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpPaymentBadDebtLawyer
            modelBuilder.Entity<tpPaymentBadDebtLawyer>(entity =>
            {
                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.LawyerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentBadDebtLawyer_cdLawyer_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentBadDebtLawyer_cdLawyer_FK");

            });

            // Configure relationships for tpPaymentFTAttribute
            modelBuilder.Entity<tpPaymentFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentFTAttribute_trPaymentLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpPaymentRegisterInfo
            modelBuilder.Entity<tpPaymentRegisterInfo>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentRegisterInfo_bsApplication_FK");

            });

            // Configure relationships for tpPaymentReturn
            modelBuilder.Entity<tpPaymentReturn>(entity =>
            {
                entity.HasOne(d => d.trPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentReturn_trPaymentHeader_FK");

                entity.HasOne(d => d.trPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaymentReturn_trPaymentHeader_FK");

            });

            // Configure relationships for tpPaynetCreditCardPayment
            modelBuilder.Entity<tpPaynetCreditCardPayment>(entity =>
            {
                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPaynetCreditCardPayment_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for tpPickingFromSectionTransfer
            modelBuilder.Entity<tpPickingFromSectionTransfer>(entity =>
            {
                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPickingFromSectionTransfer_trInnerHeader_FK");

                entity.HasOne(d => d.trPickingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PickingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPickingFromSectionTransfer_trPickingHeader_FK");

            });

            // Configure relationships for tpProposalATAttribute
            modelBuilder.Entity<tpProposalATAttribute>(entity =>
            {
                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalATAttribute_trProposalHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpProposalDiscountOffer
            modelBuilder.Entity<tpProposalDiscountOffer>(entity =>
            {
                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalDiscountOffer_trProposalHeader_FK");

                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalDiscountOffer_trProposalLine_FK");

            });

            // Configure relationships for tpProposalDiscountOfferContributor
            modelBuilder.Entity<tpProposalDiscountOfferContributor>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalDiscountOfferContributor_trProposalLine_FK");

                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalDiscountOfferContributor_trProposalHeader_FK");

            });

            // Configure relationships for tpProposalFTAttribute
            modelBuilder.Entity<tpProposalFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalFTAttribute_trProposalHeader_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for tpProposalITAttribute
            modelBuilder.Entity<tpProposalITAttribute>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalITAttribute_trProposalLine_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpProposalLineConfirmation
            modelBuilder.Entity<tpProposalLineConfirmation>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmation_trProposalLine_FK");

                entity.HasOne(d => d.trPurchaseRequisitionProposalConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmation_trPurchaseRequisitionProposalConfirmationEMailNotification_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmation_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmation_prProposalConfirmationRuleStep_FK");

            });

            // Configure relationships for tpProposalLineConfirmationStatus
            modelBuilder.Entity<tpProposalLineConfirmationStatus>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmationStatus_trProposalLine_FK");

                entity.HasOne(d => d.bsConfirmationStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineConfirmationStatus_bsConfirmationStatus_FK");

            });

            // Configure relationships for tpProposalLineRevision
            modelBuilder.Entity<tpProposalLineRevision>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpProposalLineRevision_trProposalLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionATAttribute
            modelBuilder.Entity<tpPurchaseRequisitionATAttribute>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionATAttribute_trPurchaseRequisitionHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpPurchaseRequisitionClosedByInventory
            modelBuilder.Entity<tpPurchaseRequisitionClosedByInventory>(entity =>
            {
                entity.HasOne(d => d.cdPurchasingAgent)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasingAgentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_cdPurchasingAgent_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_prItemVariant_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_cdWarehouse_FK");

                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionClosedByInventory_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionConfirmation
            modelBuilder.Entity<tpPurchaseRequisitionConfirmation>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionConfirmation_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.trPurchaseRequisitionConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionConfirmation_trPurchaseRequisitionConfirmationEMailNotification_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionConfirmation_prRequisitionConfirmationRuleStep_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionConfirmation_prRequisitionConfirmationRuleStep_FK");

            });

            // Configure relationships for tpPurchaseRequisitionItemAttributeInfo
            modelBuilder.Entity<tpPurchaseRequisitionItemAttributeInfo>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionItemAttributeInfo_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionItemInfo
            modelBuilder.Entity<tpPurchaseRequisitionItemInfo>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionItemInfo_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionProposal
            modelBuilder.Entity<tpPurchaseRequisitionProposal>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCostCenter_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdWarehouse_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_trInvoiceLine_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdTaxOffice_FK");

                entity.HasOne(d => d.bsConfirmationStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_bsConfirmationStatus_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_trOrderLine_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposal_cdCurrAcc_FK");

            });

            // Configure relationships for tpPurchaseRequisitionProposalATAttribute
            modelBuilder.Entity<tpPurchaseRequisitionProposalATAttribute>(entity =>
            {
                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionProposal)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalATAttribute_tpPurchaseRequisitionProposal_FK");

            });

            // Configure relationships for tpPurchaseRequisitionProposalConfirmation
            modelBuilder.Entity<tpPurchaseRequisitionProposalConfirmation>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionProposalConfirmationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalConfirmationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalConfirmation_trPurchaseRequisitionProposalConfirmationEMailNotification_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalConfirmation_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalConfirmation_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionProposal)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalConfirmation_tpPurchaseRequisitionProposal_FK");

            });

            // Configure relationships for tpPurchaseRequisitionProposalRevision
            modelBuilder.Entity<tpPurchaseRequisitionProposalRevision>(entity =>
            {
                entity.HasOne(d => d.tpPurchaseRequisitionProposal)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionProposalRevision_tpPurchaseRequisitionProposal_FK");

            });

            // Configure relationships for tpPurchaseRequisitionReceiveInfo
            modelBuilder.Entity<tpPurchaseRequisitionReceiveInfo>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionReceiveInfo_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionRevision
            modelBuilder.Entity<tpPurchaseRequisitionRevision>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionRevision_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionTechnicalNotes
            modelBuilder.Entity<tpPurchaseRequisitionTechnicalNotes>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionTechnicalNotes_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpPurchaseRequisitionTrace
            modelBuilder.Entity<tpPurchaseRequisitionTrace>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpPurchaseRequisitionTrace_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for tpSalesViaInternetInfo
            modelBuilder.Entity<tpSalesViaInternetInfo>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSalesViaInternetInfo_trInvoiceHeader_FK");

                entity.HasOne(d => d.bsInternetPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSalesViaInternetInfo_bsInternetPaymentType_FK");

            });

            // Configure relationships for tpShipmentHeaderExtension
            modelBuilder.Entity<tpShipmentHeaderExtension>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentHeaderExtension_trShipmentHeader_FK");

                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.MainShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentHeaderExtension_trShipmentHeader_FK");

                entity.HasOne(d => d.bsShipmentType)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentHeaderExtension_bsShipmentType_FK");

                entity.HasOne(d => d.bsEShipmentStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EShipmentStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentHeaderExtension_bsEShipmentStatus_FK");

            });

            // Configure relationships for tpShipmentITAttribute
            modelBuilder.Entity<tpShipmentITAttribute>(entity =>
            {
                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentITAttribute_trShipmentLine_FK");

            });

            // Configure relationships for tpShipmentLinePickingDetails
            modelBuilder.Entity<tpShipmentLinePickingDetails>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_trShipmentHeader_FK");

                entity.HasOne(d => d.bsPackagingType)
                    .WithMany()
                    .HasForeignKey(d => d.PackagingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_bsPackagingType_FK");

                entity.HasOne(d => d.cdPackageVolume)
                    .WithMany()
                    .HasForeignKey(d => d.PackageVolumeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_cdPackageVolume_FK");

                entity.HasOne(d => d.cdPackageBrand)
                    .WithMany()
                    .HasForeignKey(d => d.PackageBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_cdPackageBrand_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.WeightUnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentLinePickingDetails_trShipmentLine_FK");

            });

            // Configure relationships for tpShipmentReturn
            modelBuilder.Entity<tpShipmentReturn>(entity =>
            {
                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentReturn_trShipmentLine_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentReturn_trShipmentLine_FK");

            });

            // Configure relationships for tpShipmentTransportModeDetail
            modelBuilder.Entity<tpShipmentTransportModeDetail>(entity =>
            {
                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentTransportModeDetail_cdVehicle_FK");

                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentTransportModeDetail_trShipmentHeader_FK");

            });

            // Configure relationships for tpShipmentUBLExtensions
            modelBuilder.Entity<tpShipmentUBLExtensions>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentUBLExtensions_trShipmentHeader_FK");

                entity.HasOne(d => d.bsUBLExtensions)
                    .WithMany()
                    .HasForeignKey(d => d.UBLExtensionField)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentUBLExtensions_bsUBLExtensions_FK");

            });

            // Configure relationships for tpShipmentVehicleDrivers
            modelBuilder.Entity<tpShipmentVehicleDrivers>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentVehicleDrivers_trShipmentHeader_FK");

                entity.HasOne(d => d.cdDriver)
                    .WithMany()
                    .HasForeignKey(d => d.DriverCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpShipmentVehicleDrivers_cdDriver_FK");

            });

            // Configure relationships for tpSMSPoolLineExtension
            modelBuilder.Entity<tpSMSPoolLineExtension>(entity =>
            {
                entity.HasOne(d => d.trSMSPoolLine)
                    .WithMany()
                    .HasForeignKey(d => d.SmsPoolLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSMSPoolLineExtension_trSMSPoolLine_FK");

            });

            // Configure relationships for tpStockCross
            modelBuilder.Entity<tpStockCross>(entity =>
            {
                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.StockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpStockCross_trStock_FK");

                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.CrossStockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpStockCross_trStock_FK");

            });

            // Configure relationships for tpStockITAttribute
            modelBuilder.Entity<tpStockITAttribute>(entity =>
            {
                entity.HasOne(d => d.trStock)
                    .WithMany()
                    .HasForeignKey(d => d.StockID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpStockITAttribute_trStock_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpStockITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpStockITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpSupportRequestConfirmation
            modelBuilder.Entity<tpSupportRequestConfirmation>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportRequestConfirmation_trSupportRequestHeader_FK");

                entity.HasOne(d => d.cdConfirmationReason)
                    .WithMany()
                    .HasForeignKey(d => d.ConfirmationReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportRequestConfirmation_cdConfirmationReason_FK");

            });

            // Configure relationships for tpSupportRequestDecisionLetter
            modelBuilder.Entity<tpSupportRequestDecisionLetter>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportRequestDecisionLetter_trSupportRequestHeader_FK");

                entity.HasOne(d => d.cdDataLanguage)
                    .WithMany()
                    .HasForeignKey(d => d.LangCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportRequestDecisionLetter_cdDataLanguage_FK");

            });

            // Configure relationships for tpSupportRequestInformation
            modelBuilder.Entity<tpSupportRequestInformation>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportRequestInformation_trSupportRequestHeader_FK");

            });

            // Configure relationships for tpSupportResolve
            modelBuilder.Entity<tpSupportResolve>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_trSupportRequestHeader_FK");

                entity.HasOne(d => d.cdServiceman)
                    .WithMany()
                    .HasForeignKey(d => d.ServicemanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdServiceman_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdRoundsman_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdCompany_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdCurrAcc_FK");

                entity.HasOne(d => d.cdSupportResolveType)
                    .WithMany()
                    .HasForeignKey(d => d.SupportResolveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolve_cdSupportResolveType_FK");

            });

            // Configure relationships for tpSupportResolveMaterial
            modelBuilder.Entity<tpSupportResolveMaterial>(entity =>
            {
                entity.HasOne(d => d.tpSupportResolve)
                    .WithMany()
                    .HasForeignKey(d => d.SupportResolveID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_tpSupportResolve_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_cdCurrency_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_cdBatch_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportResolveMaterial_prItemVariant_FK");

            });

            // Configure relationships for tpSupportStatusHistory
            modelBuilder.Entity<tpSupportStatusHistory>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportStatusHistory_trSupportRequestHeader_FK");

                entity.HasOne(d => d.cdSupportStatus)
                    .WithMany()
                    .HasForeignKey(d => d.SupportStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportStatusHistory_cdSupportStatus_FK");

                entity.HasOne(d => d.tpSupportResolve)
                    .WithMany()
                    .HasForeignKey(d => d.SupportResolveID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportStatusHistory_tpSupportResolve_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpSupportStatusHistory_trInnerHeader_FK");

            });

            // Configure relationships for tpTransferPlanATAttribute
            modelBuilder.Entity<tpTransferPlanATAttribute>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanATAttribute_trTransferPlan_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpTransferPlanITAttribute
            modelBuilder.Entity<tpTransferPlanITAttribute>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanITAttribute_trTransferPlan_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanITAttribute_cdITAttribute_FK");

                entity.HasOne(d => d.cdITAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpTransferPlanITAttribute_cdITAttribute_FK");

            });

            // Configure relationships for tpVehicleLoadingDriver
            modelBuilder.Entity<tpVehicleLoadingDriver>(entity =>
            {
                entity.HasOne(d => d.cdDriver)
                    .WithMany()
                    .HasForeignKey(d => d.DriverCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingDriver_cdDriver_FK");

                entity.HasOne(d => d.trVehicleLoadingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleLoadingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingDriver_trVehicleLoadingHeader_FK");

            });

            // Configure relationships for tpVehicleLoadingLineDeliveryStatus
            modelBuilder.Entity<tpVehicleLoadingLineDeliveryStatus>(entity =>
            {
                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingLineDeliveryStatus_cdRoundsman_FK");

                entity.HasOne(d => d.trVehicleLoadingLine)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleLoadingLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingLineDeliveryStatus_trVehicleLoadingLine_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingLineDeliveryStatus_trShipmentLine_FK");

                entity.HasOne(d => d.cdUnDeliveryReason)
                    .WithMany()
                    .HasForeignKey(d => d.UnDeliveryReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingLineDeliveryStatus_cdUnDeliveryReason_FK");

            });

            // Configure relationships for tpVehicleLoadingRoundsman
            modelBuilder.Entity<tpVehicleLoadingRoundsman>(entity =>
            {
                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingRoundsman_cdRoundsman_FK");

                entity.HasOne(d => d.trVehicleLoadingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleLoadingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVehicleLoadingRoundsman_trVehicleLoadingHeader_FK");

            });

            // Configure relationships for tpVirementATAttribute
            modelBuilder.Entity<tpVirementATAttribute>(entity =>
            {
                entity.HasOne(d => d.trVirementHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VirementHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementATAttribute_trVirementHeader_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementATAttribute_cdATAttribute_FK");

                entity.HasOne(d => d.cdATAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementATAttribute_cdATAttribute_FK");

            });

            // Configure relationships for tpVirementFTAttribute
            modelBuilder.Entity<tpVirementFTAttribute>(entity =>
            {
                entity.HasOne(d => d.trVirementLine)
                    .WithMany()
                    .HasForeignKey(d => d.VirementLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementFTAttribute_trVirementLine_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementFTAttribute_cdFTAttribute_FK");

                entity.HasOne(d => d.cdFTAttribute)
                    .WithMany()
                    .HasForeignKey(d => d.AttributeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tpVirementFTAttribute_cdFTAttribute_FK");

            });

            // Configure relationships for trAdjustCostBankLine
            modelBuilder.Entity<trAdjustCostBankLine>(entity =>
            {
                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostBankLine_trBankLine_FK");

                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostBankLine_trAdjustCostHeader_FK");

            });

            // Configure relationships for trAdjustCostExpenseInvoiceLine
            modelBuilder.Entity<trAdjustCostExpenseInvoiceLine>(entity =>
            {
                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostExpenseInvoiceLine_trAdjustCostHeader_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostExpenseInvoiceLine_trInvoiceLine_FK");

            });

            // Configure relationships for trAdjustCostExpenseSlipLine
            modelBuilder.Entity<trAdjustCostExpenseSlipLine>(entity =>
            {
                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostExpenseSlipLine_trAdjustCostHeader_FK");

                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostExpenseSlipLine_trExpenseSlipLine_FK");

            });

            // Configure relationships for trAdjustCostHeader
            modelBuilder.Entity<trAdjustCostHeader>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_bsInnerProcess_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdOffice_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trAdjustCostInner
            modelBuilder.Entity<trAdjustCostInner>(entity =>
            {
                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInner_trInnerHeader_FK");

                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInner_trAdjustCostHeader_FK");

            });

            // Configure relationships for trAdjustCostInnerLine
            modelBuilder.Entity<trAdjustCostInnerLine>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInnerLine_trInnerLine_FK");

                entity.HasOne(d => d.trAdjustCostInner)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInnerLine_trAdjustCostInner_FK");

                entity.HasOne(d => d.trAdjustCostInner)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInnerLine_trAdjustCostInner_FK");

            });

            // Configure relationships for trAdjustCostInventory
            modelBuilder.Entity<trAdjustCostInventory>(entity =>
            {
                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInventory_trAdjustCostHeader_FK");

                entity.HasOne(d => d.trCostOfGoodsSoldHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CostOfGoodsSoldHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInventory_trCostOfGoodsSoldHeader_FK");

            });

            // Configure relationships for trAdjustCostInventoryLine
            modelBuilder.Entity<trAdjustCostInventoryLine>(entity =>
            {
                entity.HasOne(d => d.trAdjustCostInventory)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInventoryLine_trAdjustCostInventory_FK");

                entity.HasOne(d => d.trAdjustCostInventory)
                    .WithMany()
                    .HasForeignKey(d => d.CostOfGoodsSoldHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInventoryLine_trAdjustCostInventory_FK");

                entity.HasOne(d => d.trEndOfPeriodInventory)
                    .WithMany()
                    .HasForeignKey(d => d.EndOfPeriodInventoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInventoryLine_trEndOfPeriodInventory_FK");

            });

            // Configure relationships for trAdjustCostInvoice
            modelBuilder.Entity<trAdjustCostInvoice>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInvoice_trInvoiceHeader_FK");

                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInvoice_trAdjustCostHeader_FK");

            });

            // Configure relationships for trAdjustCostInvoiceLine
            modelBuilder.Entity<trAdjustCostInvoiceLine>(entity =>
            {
                entity.HasOne(d => d.trAdjustCostInvoice)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInvoiceLine_trAdjustCostInvoice_FK");

                entity.HasOne(d => d.trAdjustCostInvoice)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInvoiceLine_trAdjustCostInvoice_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostInvoiceLine_trInvoiceLine_FK");

            });

            // Configure relationships for trAdjustCostOrder
            modelBuilder.Entity<trAdjustCostOrder>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostOrder_trOrderHeader_FK");

                entity.HasOne(d => d.trAdjustCostHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostOrder_trAdjustCostHeader_FK");

            });

            // Configure relationships for trAdjustCostOrderLine
            modelBuilder.Entity<trAdjustCostOrderLine>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostOrderLine_trOrderLine_FK");

                entity.HasOne(d => d.trAdjustCostOrder)
                    .WithMany()
                    .HasForeignKey(d => d.AdjustCostHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostOrderLine_trAdjustCostOrder_FK");

                entity.HasOne(d => d.trAdjustCostOrder)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAdjustCostOrderLine_trAdjustCostOrder_FK");

            });

            // Configure relationships for trAgentContractDeservedLine
            modelBuilder.Entity<trAgentContractDeservedLine>(entity =>
            {
                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractDeservedLine_trAgentContractHeader_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractDeservedLine_cdCurrency_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractDeservedLine_cdExchangeType_FK");

                entity.HasOne(d => d.cdVisitFrequency)
                    .WithMany()
                    .HasForeignKey(d => d.VisitFrequencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractDeservedLine_cdVisitFrequency_FK");

                entity.HasOne(d => d.cdNationality)
                    .WithMany()
                    .HasForeignKey(d => d.NationalityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractDeservedLine_cdNationality_FK");

            });

            // Configure relationships for trAgentContractHeader
            modelBuilder.Entity<trAgentContractHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trAgentContractPeriodicalLine
            modelBuilder.Entity<trAgentContractPeriodicalLine>(entity =>
            {
                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractPeriodicalLine_cdExchangeType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractPeriodicalLine_cdCurrency_FK");

                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractPeriodicalLine_trAgentContractHeader_FK");

            });

            // Configure relationships for trAgentContractSpecialLine
            modelBuilder.Entity<trAgentContractSpecialLine>(entity =>
            {
                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractSpecialLine_trAgentContractHeader_FK");

                entity.HasOne(d => d.cdNationality)
                    .WithMany()
                    .HasForeignKey(d => d.NationalityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractSpecialLine_cdNationality_FK");

                entity.HasOne(d => d.cdVisitFrequency)
                    .WithMany()
                    .HasForeignKey(d => d.VisitFrequencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractSpecialLine_cdVisitFrequency_FK");

            });

            // Configure relationships for trAgentContractStandartLine
            modelBuilder.Entity<trAgentContractStandartLine>(entity =>
            {
                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractStandartLine_trAgentContractHeader_FK");

            });

            // Configure relationships for trAgentContractVehicle
            modelBuilder.Entity<trAgentContractVehicle>(entity =>
            {
                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVehicle_trAgentContractHeader_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVehicle_cdCurrency_FK");

                entity.HasOne(d => d.cdVehicleType)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVehicle_cdVehicleType_FK");

                entity.HasOne(d => d.cdNationality)
                    .WithMany()
                    .HasForeignKey(d => d.NationalityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVehicle_cdNationality_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVehicle_cdExchangeType_FK");

            });

            // Configure relationships for trAgentContractVisitFrequencyLine
            modelBuilder.Entity<trAgentContractVisitFrequencyLine>(entity =>
            {
                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVisitFrequencyLine_cdExchangeType_FK");

                entity.HasOne(d => d.cdNationality)
                    .WithMany()
                    .HasForeignKey(d => d.NationalityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVisitFrequencyLine_cdNationality_FK");

                entity.HasOne(d => d.cdVisitFrequency)
                    .WithMany()
                    .HasForeignKey(d => d.VisitFrequencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVisitFrequencyLine_cdVisitFrequency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVisitFrequencyLine_cdCurrency_FK");

                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentContractVisitFrequencyLine_trAgentContractHeader_FK");

            });

            // Configure relationships for trAgentPerformanceBonusHeader
            modelBuilder.Entity<trAgentPerformanceBonusHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trAgentPerformanceBonusLine
            modelBuilder.Entity<trAgentPerformanceBonusLine>(entity =>
            {
                entity.HasOne(d => d.trAgentPerformanceBonusHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentPerformanceBonusHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusLine_trAgentPerformanceBonusHeader_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusLine_cdExchangeType_FK");

                entity.HasOne(d => d.cdExchangeType)
                    .WithMany()
                    .HasForeignKey(d => d.BonusExchangeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusLine_cdExchangeType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.BonusCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentPerformanceBonusLine_cdCurrency_FK");

            });

            // Configure relationships for trAgentReservationHeader
            modelBuilder.Entity<trAgentReservationHeader>(entity =>
            {
                entity.HasOne(d => d.trAgentContractHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_trAgentContractHeader_FK");

                entity.HasOne(d => d.trAgentContractPeriodicalLine)
                    .WithMany()
                    .HasForeignKey(d => d.AgentContractPeriodicalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_trAgentContractPeriodicalLine_FK");

                entity.HasOne(d => d.cdVisitFrequency)
                    .WithMany()
                    .HasForeignKey(d => d.VisitFrequencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdVisitFrequency_FK");

                entity.HasOne(d => d.cdNationality)
                    .WithMany()
                    .HasForeignKey(d => d.NationalityCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdNationality_FK");

      

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCompany_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdPriceGroup_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForAgent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForAgentSpecialRate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForTourDriver)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForHotelPersonnel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForTourHelperGuide)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForHotel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForTourGuide)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForTourLeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCodeForAgentOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForAgent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForAgentOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForTourGuide)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForTourDriver)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForTourLeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForTourHelperGuide)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForAgentSpecialRate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForHotel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCodeForHotelPersonnel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trAgentReservationSalesPerson
            modelBuilder.Entity<trAgentReservationSalesPerson>(entity =>
            {
                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationSalesPerson_trAgentReservationHeader_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationSalesPerson_cdSalesperson_FK");

            });

            // Configure relationships for trAgentReservationVehicleDetail
            modelBuilder.Entity<trAgentReservationVehicleDetail>(entity =>
            {
                entity.HasOne(d => d.trAgentReservationHeader)
                    .WithMany()
                    .HasForeignKey(d => d.AgentReservationHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationVehicleDetail_trAgentReservationHeader_FK");

                entity.HasOne(d => d.cdVehicleType)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAgentReservationVehicleDetail_cdVehicleType_FK");

            });

            // Configure relationships for trAllocation
            modelBuilder.Entity<trAllocation>(entity =>
            {
                entity.HasOne(d => d.bsAllocationRule)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_bsAllocationRule_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_cdWarehouse_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.SourceApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_bsApplication_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_cdCompany_FK");

                entity.HasOne(d => d.bsAllocationSourceType)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationSourceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocation_bsAllocationSourceType_FK");

            });

            // Configure relationships for trAllocationChannel
            modelBuilder.Entity<trAllocationChannel>(entity =>
            {
                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationChannel_trAllocation_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationChannel_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationChannel_cdCurrAcc_FK");

            });

            // Configure relationships for trAllocationParameterValue
            modelBuilder.Entity<trAllocationParameterValue>(entity =>
            {
                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationParameterValue_trAllocation_FK");

            });

            // Configure relationships for trAllocationProduct
            modelBuilder.Entity<trAllocationProduct>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.trOrderAsnLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_trOrderAsnLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_trOrderLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_prItemVariant_FK");

                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_trAllocation_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProduct_cdColor_FK");

            });

            // Configure relationships for trAllocationProductQty
            modelBuilder.Entity<trAllocationProductQty>(entity =>
            {
                entity.HasOne(d => d.trAllocationProduct)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProductQty_trAllocationProduct_FK");

                entity.HasOne(d => d.trAllocationChannel)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationChannelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProductQty_trAllocationChannel_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProductQty_cdLot_FK");

                entity.HasOne(d => d.trAllocation)
                    .WithMany()
                    .HasForeignKey(d => d.AllocationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trAllocationProductQty_trAllocation_FK");

            });

            // Configure relationships for trBadDebtLetter
            modelBuilder.Entity<trBadDebtLetter>(entity =>
            {
                entity.HasOne(d => d.cdBadDebtLetterType)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtLetterTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtLetter_cdBadDebtLetterType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtLetter_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtLetter_cdCurrAcc_FK");

            });

            // Configure relationships for trBadDebtLetterPrint
            modelBuilder.Entity<trBadDebtLetterPrint>(entity =>
            {
                entity.HasOne(d => d.trBadDebtLetter)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtLetterID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtLetterPrint_trBadDebtLetter_FK");

            });

            // Configure relationships for trBadDebtTransAddExpenseDebits
            modelBuilder.Entity<trBadDebtTransAddExpenseDebits>(entity =>
            {
                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransAddExpenseDebits_trDebitLine_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransAddExpenseDebits_bsApplication_FK");

                entity.HasOne(d => d.trBadDebtTransLineAddExpense)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransLineAddExpenseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransAddExpenseDebits_trBadDebtTransLineAddExpense_FK");

            });

            // Configure relationships for trBadDebtTransHeader
            modelBuilder.Entity<trBadDebtTransHeader>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_bsApplication_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdCompany_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdLawyer_FK");

                entity.HasOne(d => d.bsBadDebtTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_bsBadDebtTransType_FK");

                entity.HasOne(d => d.cdLawyer)
                    .WithMany()
                    .HasForeignKey(d => d.LawyerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdLawyer_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trBadDebtTransLine
            modelBuilder.Entity<trBadDebtTransLine>(entity =>
            {
                entity.HasOne(d => d.cdBadDebtReason)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLine_cdBadDebtReason_FK");

                entity.HasOne(d => d.trBadDebtTransHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLine_trBadDebtTransHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLine_cdCurrAcc_FK");

            });

            // Configure relationships for trBadDebtTransLineAddExpense
            modelBuilder.Entity<trBadDebtTransLineAddExpense>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineAddExpense_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineAddExpense_cdItem_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineAddExpense_cdCurrency_FK");

                entity.HasOne(d => d.trBadDebtTransLine)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineAddExpense_trBadDebtTransLine_FK");

            });

            // Configure relationships for trBadDebtTransLineInstalment
            modelBuilder.Entity<trBadDebtTransLineInstalment>(entity =>
            {
                entity.HasOne(d => d.trBadDebtTransLine)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineInstalment_trBadDebtTransLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineInstalment_cdCurrency_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineInstalment_trDebitLine_FK");

                entity.HasOne(d => d.trOrderPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.OrderPaymentPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineInstalment_trOrderPaymentPlan_FK");

            });

            // Configure relationships for trBadDebtTransLineResult
            modelBuilder.Entity<trBadDebtTransLineResult>(entity =>
            {
                entity.HasOne(d => d.bsDebtStatusType)
                    .WithMany()
                    .HasForeignKey(d => d.DebtStatusTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineResult_bsDebtStatusType_FK");

                entity.HasOne(d => d.bsDebtStatusType)
                    .WithMany()
                    .HasForeignKey(d => d.LastDebtStatusTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineResult_bsDebtStatusType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineResult_cdCurrency_FK");

                entity.HasOne(d => d.trBadDebtTransLine)
                    .WithMany()
                    .HasForeignKey(d => d.BadDebtTransLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineResult_trBadDebtTransLine_FK");

                entity.HasOne(d => d.trPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBadDebtTransLineResult_trPaymentHeader_FK");

            });

            // Configure relationships for trBankCreditHeader
            modelBuilder.Entity<trBankCreditHeader>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdBankCreditType)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdBankCreditType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.LongTermBankCreditGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseCommisionGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_bsApplication_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdBankOpType_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdGLType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCompany_FK");

                entity.HasOne(d => d.bsBankCreditGuaranteeType)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditGuaranteeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_bsBankCreditGuaranteeType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trBankCreditLine
            modelBuilder.Entity<trBankCreditLine>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLType_FK");

                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_trBankCreditHeader_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdCurrency_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLine_cdCostCenter_FK");

            });

            // Configure relationships for trBankCreditLineCurrency
            modelBuilder.Entity<trBankCreditLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trBankCreditLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLineCurrency_trBankCreditLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trBankCreditPaymentPlan
            modelBuilder.Entity<trBankCreditPaymentPlan>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditPaymentPlan_cdCurrency_FK");

                entity.HasOne(d => d.trBankCreditHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankCreditPaymentPlan_trBankCreditHeader_FK");

            });

            // Configure relationships for trBankHeader
            modelBuilder.Entity<trBankHeader>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdGLType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdOffice_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_bsApplication_FK");

                entity.HasOne(d => d.bsBankTransType)
                    .WithMany()
                    .HasForeignKey(d => d.BankTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_bsBankTransType_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trBankLine
            modelBuilder.Entity<trBankLine>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdExportFile_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrency_FK");

                entity.HasOne(d => d.trBankCreditLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankCreditLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_trBankCreditLine_FK");

                entity.HasOne(d => d.trBankPaymentInstructionLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentInstructionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_trBankPaymentInstructionLine_FK");

                entity.HasOne(d => d.bsDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.DocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_bsDocumentType_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdBankOpType_FK");

                entity.HasOne(d => d.bsEmployeePayType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeePayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_bsEmployeePayType_FK");

                entity.HasOne(d => d.trBankHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_trBankHeader_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_prCurrAccContact_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdImportFile_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdGLType_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLine_cdCurrAcc_FK");

            });

            // Configure relationships for trBankLineAdditionalCharge
            modelBuilder.Entity<trBankLineAdditionalCharge>(entity =>
            {
                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineAdditionalCharge_trBankLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineAdditionalCharge_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineAdditionalCharge_cdCurrency_FK");

                entity.HasOne(d => d.bsBankAdditionalChargeType)
                    .WithMany()
                    .HasForeignKey(d => d.BankAdditionalChargeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineAdditionalCharge_bsBankAdditionalChargeType_FK");

            });

            // Configure relationships for trBankLineCostCenterRates
            modelBuilder.Entity<trBankLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineCostCenterRates_prCostCenterHierarchy_FK");

                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineCostCenterRates_trBankLine_FK");

            });

            // Configure relationships for trBankLineCurrency
            modelBuilder.Entity<trBankLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineCurrency_trBankLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trBankPaymentInstructionHeader
            modelBuilder.Entity<trBankPaymentInstructionHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_bsApplication_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trBankPaymentInstructionLine
            modelBuilder.Entity<trBankPaymentInstructionLine>(entity =>
            {
                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdImportFile_FK");

                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankBranchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_prBankBranch_FK");

                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_prBankBranch_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdGLType_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_trDebitLine_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdCurrency_FK");

                entity.HasOne(d => d.trBankPaymentInstructionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentInstructionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_trBankPaymentInstructionHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentInstructionLine_prSubCurrAcc_FK");

            });

            // Configure relationships for trBankPaymentListHeader
            modelBuilder.Entity<trBankPaymentListHeader>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListHeader_bsApplication_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trBankPaymentListLine
            modelBuilder.Entity<trBankPaymentListLine>(entity =>
            {
                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdBank_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdImportFile_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_trDebitLine_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdGLType_FK");

                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankBranchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_prBankBranch_FK");

                entity.HasOne(d => d.prBankBranch)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_prBankBranch_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdCurrency_FK");

                entity.HasOne(d => d.trBankPaymentListHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BankPaymentListHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_trBankPaymentListHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBankPaymentListLine_cdCurrAcc_FK");

            });

            // Configure relationships for trBudget
            modelBuilder.Entity<trBudget>(entity =>
            {
                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBudget_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBudget_cdGLAcc_FK");

                entity.HasOne(d => d.cdBudgetType)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBudget_cdBudgetType_FK");

                entity.HasOne(d => d.cdBudgetType)
                    .WithMany()
                    .HasForeignKey(d => d.BudgetTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trBudget_cdBudgetType_FK");

            });

            // Configure relationships for trCashHeader
            modelBuilder.Entity<trCashHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCompany_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdGLType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdExportFile_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.bsCashTransType)
                    .WithMany()
                    .HasForeignKey(d => d.CashTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashHeader_bsCashTransType_FK");

            });

            // Configure relationships for trCashLine
            modelBuilder.Entity<trCashLine>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdImportFile_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_prCurrAccContact_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdGLType_FK");

                entity.HasOne(d => d.bsEmployeePayType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeePayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_bsEmployeePayType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_prSubCurrAcc_FK");

                entity.HasOne(d => d.trCashHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CashHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLine_trCashHeader_FK");

            });

            // Configure relationships for trCashLineCostCenterRates
            modelBuilder.Entity<trCashLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.trCashLine)
                    .WithMany()
                    .HasForeignKey(d => d.CashLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLineCostCenterRates_trCashLine_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLineCostCenterRates_prCostCenterHierarchy_FK");

            });

            // Configure relationships for trCashLineCurrency
            modelBuilder.Entity<trCashLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trCashLine)
                    .WithMany()
                    .HasForeignKey(d => d.CashLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCashLineCurrency_trCashLine_FK");

            });

            // Configure relationships for trChequeHeader
            modelBuilder.Entity<trChequeHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCompany_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdGLType_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_bsApplication_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrency_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.bsChequeTransType)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_bsChequeTransType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.BankCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashCurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trChequeLine
            modelBuilder.Entity<trChequeLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCurrency_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdExportFile_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdImportFile_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.BankBranchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCheque_FK");

                entity.HasOne(d => d.cdCheque)
                    .WithMany()
                    .HasForeignKey(d => d.BankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_cdCheque_FK");

                entity.HasOne(d => d.bsEmployeePayType)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeePayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_bsEmployeePayType_FK");

                entity.HasOne(d => d.trChequeHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLine_trChequeHeader_FK");

            });

            // Configure relationships for trChequeLineCurrency
            modelBuilder.Entity<trChequeLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trChequeLine)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLineCurrency_trChequeLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trChequeLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trContract
            modelBuilder.Entity<trContract>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCompany_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdOffice_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdGLType_FK");

                entity.HasOne(d => d.bsContractType)
                    .WithMany()
                    .HasForeignKey(d => d.ContractTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_bsContractType_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdCurrAcc_FK");

                entity.HasOne(d => d.cdContractContent)
                    .WithMany()
                    .HasForeignKey(d => d.ContractContentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdContractContent_FK");

                entity.HasOne(d => d.cdContractContent)
                    .WithMany()
                    .HasForeignKey(d => d.ContractTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdContractContent_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContract_cdPaymentPlan_FK");

            });

            // Configure relationships for trContractProduct
            modelBuilder.Entity<trContractProduct>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_prItemVariant_FK");

                entity.HasOne(d => d.trContract)
                    .WithMany()
                    .HasForeignKey(d => d.ContractID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trContractProduct_trContract_FK");

            });

            // Configure relationships for trCostCenterDistributions
            modelBuilder.Entity<trCostCenterDistributions>(entity =>
            {
                entity.HasOne(d => d.cdExpensePeriod)
                    .WithMany()
                    .HasForeignKey(d => d.ExpensePeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdExpensePeriod_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdCostCenter_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.FromCostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostCenterDistributions_cdGLAcc_FK");

            });

            // Configure relationships for trCostOfGoodsSoldHeader
            modelBuilder.Entity<trCostOfGoodsSoldHeader>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_cdItem_FK");

                entity.HasOne(d => d.bsCostingVariantLevel)
                    .WithMany()
                    .HasForeignKey(d => d.CostingVariantLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_bsCostingVariantLevel_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_cdBatch_FK");

                entity.HasOne(d => d.bsCostingMethod)
                    .WithMany()
                    .HasForeignKey(d => d.CostingMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_bsCostingMethod_FK");

                entity.HasOne(d => d.cdCostOfGoodsSoldPeriod)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_cdCostOfGoodsSoldPeriod_FK");

                entity.HasOne(d => d.cdCostOfGoodsSoldPeriod)
                    .WithMany()
                    .HasForeignKey(d => d.CostOfGoodsSoldPeriodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_cdCostOfGoodsSoldPeriod_FK");

                entity.HasOne(d => d.bsCostingLevel)
                    .WithMany()
                    .HasForeignKey(d => d.CostingLevelCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldHeader_bsCostingLevel_FK");

            });

            // Configure relationships for trCostOfGoodsSoldLine
            modelBuilder.Entity<trCostOfGoodsSoldLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldLine_cdCurrency_FK");

                entity.HasOne(d => d.trCostOfGoodsSoldHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CostOfGoodsSoldHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCostOfGoodsSoldLine_trCostOfGoodsSoldHeader_FK");

            });

            // Configure relationships for trCountrySpecialDay
            modelBuilder.Entity<trCountrySpecialDay>(entity =>
            {
                entity.HasOne(d => d.cdSpecialDayType)
                    .WithMany()
                    .HasForeignKey(d => d.SpecialDayTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCountrySpecialDay_cdSpecialDayType_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCountrySpecialDay_cdCountry_FK");

            });

            // Configure relationships for trCreditCardPaymentHeader
            modelBuilder.Entity<trCreditCardPaymentHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCompany_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdGLType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdOffice_FK");

                entity.HasOne(d => d.bsCreditCardPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_bsCreditCardPaymentType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_bsApplication_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trCreditCardPaymentLine
            modelBuilder.Entity<trCreditCardPaymentLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdCompanyCreditCard_FK");

                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdPaymentProvider_FK");

                entity.HasOne(d => d.trCreditCardPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_trCreditCardPaymentHeader_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.AcquirerBankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdBank_FK");

                entity.HasOne(d => d.cdBank)
                    .WithMany()
                    .HasForeignKey(d => d.IssuerBankCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdBank_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLine_cdCreditCardType_FK");

            });

            // Configure relationships for trCreditCardPaymentLineCurrency
            modelBuilder.Entity<trCreditCardPaymentLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCreditCardPaymentLineCurrency_trCreditCardPaymentLine_FK");

            });

            // Configure relationships for trCurrAccBook
            modelBuilder.Entity<trCurrAccBook>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_bsApplication_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdExportFile_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_prCurrAccContact_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdImportFile_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBook_prSubCurrAcc_FK");

            });

            // Configure relationships for trCurrAccBookCurrency
            modelBuilder.Entity<trCurrAccBookCurrency>(entity =>
            {
                entity.HasOne(d => d.trCurrAccBook)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccBookID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBookCurrency_trCurrAccBook_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBookCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccBookCurrency_cdCurrency_FK");

            });

            // Configure relationships for trCurrAccReconciliationEMailNotification
            modelBuilder.Entity<trCurrAccReconciliationEMailNotification>(entity =>
            {
                entity.HasOne(d => d.prCurrAccReconciliationContact)
                    .WithMany()
                    .HasForeignKey(d => d.ReconciliationContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationEMailNotification_prCurrAccReconciliationContact_FK");

                entity.HasOne(d => d.trCurrAccReconciliationReport)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccReconciliationReportsID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationEMailNotification_trCurrAccReconciliationReport_FK");

            });

            // Configure relationships for trCurrAccReconciliationReport
            modelBuilder.Entity<trCurrAccReconciliationReport>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReport_cdCurrency_FK");

                entity.HasOne(d => d.cdReconciliation)
                    .WithMany()
                    .HasForeignKey(d => d.ReconciliationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReport_cdReconciliation_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReport_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReport_cdCurrAcc_FK");

            });

            // Configure relationships for trCurrAccReconciliationReportConfirmation
            modelBuilder.Entity<trCurrAccReconciliationReportConfirmation>(entity =>
            {
                entity.HasOne(d => d.trCurrAccReconciliationReport)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccReconciliationReportsID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReportConfirmation_trCurrAccReconciliationReport_FK");

                entity.HasOne(d => d.prCurrAccReconciliationContact)
                    .WithMany()
                    .HasForeignKey(d => d.ReconciliationContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReportConfirmation_prCurrAccReconciliationContact_FK");

                entity.HasOne(d => d.trCurrAccReconciliationEMailNotification)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccReconciliationEMailNotificationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trCurrAccReconciliationReportConfirmation_trCurrAccReconciliationEMailNotification_FK");

            });

            // Configure relationships for trDebitHeader
            modelBuilder.Entity<trDebitHeader>(entity =>
            {
                entity.HasOne(d => d.bsDebitType)
                    .WithMany()
                    .HasForeignKey(d => d.DebitTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_bsDebitType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_bsApplication_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdGLType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCompany_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trDebitLine
            modelBuilder.Entity<trDebitLine>(entity =>
            {
                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLine_trDebitHeader_FK");

                entity.HasOne(d => d.cdDebitReason)
                    .WithMany()
                    .HasForeignKey(d => d.DebitReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLine_cdDebitReason_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLine_cdCurrency_FK");

            });

            // Configure relationships for trDebitLineCurrency
            modelBuilder.Entity<trDebitLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDebitLineCurrency_trDebitLine_FK");

            });

            // Configure relationships for trDepartmentReceiptHeader
            modelBuilder.Entity<trDepartmentReceiptHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trDepartmentReceiptLine
            modelBuilder.Entity<trDepartmentReceiptLine>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_cdWarehouse_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_prItemVariant_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_cdSalesperson_FK");

                entity.HasOne(d => d.trDepartmentReceiptHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DepartmentReceiptHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_trDepartmentReceiptHeader_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDepartmentReceiptLine_cdPaymentPlan_FK");

            });

            // Configure relationships for trDispOrderHeader
            modelBuilder.Entity<trDispOrderHeader>(entity =>
            {
                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdRoundsman_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdOffice_FK");

                entity.HasOne(d => d.bsDispOrderType)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_bsDispOrderType_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdCompany_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdWarehouse_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trDispOrderLine
            modelBuilder.Entity<trDispOrderLine>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderLine_trOrderLine_FK");

                entity.HasOne(d => d.trDispOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderLine_trDispOrderHeader_FK");

                entity.HasOne(d => d.trReserveLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trDispOrderLine_trReserveLine_FK");

            });

            // Configure relationships for trEmployeeDebit
            modelBuilder.Entity<trEmployeeDebit>(entity =>
            {
                entity.HasOne(d => d.cdDeduction)
                    .WithMany()
                    .HasForeignKey(d => d.DeductionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_cdDeduction_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.hrEmployeePayrollProfile)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_hrEmployeePayrollProfile_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebit_cdCurrency_FK");

            });

            // Configure relationships for trEmployeeDebitCurrency
            modelBuilder.Entity<trEmployeeDebitCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebitCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebitCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trEmployeeDebit)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeDebitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEmployeeDebitCurrency_trEmployeeDebit_FK");

            });

            // Configure relationships for trEndOfPeriodInventory
            modelBuilder.Entity<trEndOfPeriodInventory>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEndOfPeriodInventory_cdCurrency_FK");

                entity.HasOne(d => d.trCostOfGoodsSoldHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CostOfGoodsSoldHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trEndOfPeriodInventory_trCostOfGoodsSoldHeader_FK");

            });

            // Configure relationships for trExchangeRateHeader
            modelBuilder.Entity<trExchangeRateHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExchangeRateHeader_cdCurrency_FK");

            });

            // Configure relationships for trExchangeRateLine
            modelBuilder.Entity<trExchangeRateLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExchangeRateLine_cdCurrency_FK");

                entity.HasOne(d => d.trExchangeRateHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExchangeRateHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExchangeRateLine_trExchangeRateHeader_FK");

            });

            // Configure relationships for trExpenseAccrualHeader
            modelBuilder.Entity<trExpenseAccrualHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_bsApplication_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_cdExportFile_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_cdOffice_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualHeader_cdImportFile_FK");

            });

            // Configure relationships for trExpenseAccrualInflationAdjustmentLine
            modelBuilder.Entity<trExpenseAccrualInflationAdjustmentLine>(entity =>
            {
                entity.HasOne(d => d.trExpenseAccrualLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualInflationAdjustmentLine_trExpenseAccrualLine_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualInflationAdjustmentLine_trJournalHeader_FK");

            });

            // Configure relationships for trExpenseAccrualLine
            modelBuilder.Entity<trExpenseAccrualLine>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdGLType_FK");

                entity.HasOne(d => d.trExpenseAccrualHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_trExpenseAccrualHeader_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.DebitGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CreditGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLine_cdGLAcc_FK");

            });

            // Configure relationships for trExpenseAccrualLineCostCenterRates
            modelBuilder.Entity<trExpenseAccrualLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLineCostCenterRates_prCostCenterHierarchy_FK");

                entity.HasOne(d => d.trExpenseAccrualLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLineCostCenterRates_trExpenseAccrualLine_FK");

            });

            // Configure relationships for trExpenseAccrualLineCurrency
            modelBuilder.Entity<trExpenseAccrualLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trExpenseAccrualLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseAccrualLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLineCurrency_trExpenseAccrualLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseAccrualLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trExpenseSlipHeader
            modelBuilder.Entity<trExpenseSlipHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_bsApplication_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_cdOffice_FK");

                entity.HasOne(d => d.bsExpenseSlipType)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_bsExpenseSlipType_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trExpenseSlipLine
            modelBuilder.Entity<trExpenseSlipLine>(entity =>
            {
                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdImportFile_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdGLType_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.trExpenseSlipHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_trExpenseSlipHeader_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdItem_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdExportFile_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdItem_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdCurrency_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdTaxOffice_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_cdGLAcc_FK");

                entity.HasOne(d => d.bsDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.DocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_bsDocumentType_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLine_bsTaxExemption_FK");

            });

            // Configure relationships for trExpenseSlipLineCostCenterRates
            modelBuilder.Entity<trExpenseSlipLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLineCostCenterRates_prCostCenterHierarchy_FK");

                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLineCostCenterRates_trExpenseSlipLine_FK");

            });

            // Configure relationships for trExpenseSlipLineCurrency
            modelBuilder.Entity<trExpenseSlipLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trExpenseSlipLine)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseSlipLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLineCurrency_trExpenseSlipLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trExpenseSlipLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trFixedAssetBookHeader
            modelBuilder.Entity<trFixedAssetBookHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookHeader_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookHeader_cdItem_FK");

            });

            // Configure relationships for trFixedAssetBookLine
            modelBuilder.Entity<trFixedAssetBookLine>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookLine_cdGLType_FK");

                entity.HasOne(d => d.trFixedAssetBookHeader)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetBookHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookLine_trFixedAssetBookHeader_FK");

            });

            // Configure relationships for trFixedAssetBookLinePeriodDepreciationExpenseDetail
            modelBuilder.Entity<trFixedAssetBookLinePeriodDepreciationExpenseDetail>(entity =>
            {
                entity.HasOne(d => d.trFixedAssetBookLine)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetBookLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookLinePeriodDepreciationExpenseDetail_trFixedAssetBookLine_FK");

                entity.HasOne(d => d.prFixedAssetExpense)
                    .WithMany()
                    .HasForeignKey(d => d.FixedAssetExpenseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trFixedAssetBookLinePeriodDepreciationExpenseDetail_prFixedAssetExpense_FK");

            });

            // Configure relationships for trGiftCardPaymentHeader
            modelBuilder.Entity<trGiftCardPaymentHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_bsApplication_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdOffice_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdGLType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.bsGiftCardPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentHeader_bsGiftCardPaymentType_FK");

            });

            // Configure relationships for trGiftCardPaymentLine
            modelBuilder.Entity<trGiftCardPaymentLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLine_cdCurrency_FK");

                entity.HasOne(d => d.cdGiftCard)
                    .WithMany()
                    .HasForeignKey(d => d.SerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLine_cdGiftCard_FK");

                entity.HasOne(d => d.trGiftCardPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLine_trGiftCardPaymentHeader_FK");

            });

            // Configure relationships for trGiftCardPaymentLineCurrency
            modelBuilder.Entity<trGiftCardPaymentLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trGiftCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trGiftCardPaymentLineCurrency_trGiftCardPaymentLine_FK");

            });

            // Configure relationships for trIncentiveHeader
            modelBuilder.Entity<trIncentiveHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_bsApplication_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdWorkPlace_FK");

                entity.HasOne(d => d.cdIncentiveType)
                    .WithMany()
                    .HasForeignKey(d => d.IncentiveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveHeader_cdIncentiveType_FK");

            });

            // Configure relationships for trIncentiveLine
            modelBuilder.Entity<trIncentiveLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveLine_cdCurrency_FK");

                entity.HasOne(d => d.trIncentiveHeader)
                    .WithMany()
                    .HasForeignKey(d => d.IncentiveHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveLine_trIncentiveHeader_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trIncentiveLine_cdCurrAcc_FK");

            });

            // Configure relationships for trInnerHeader
            modelBuilder.Entity<trInnerHeader>(entity =>
            {
                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_bsTransType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdCompany_FK");

                entity.HasOne(d => d.cdServiceman)
                    .WithMany()
                    .HasForeignKey(d => d.ServicemanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdServiceman_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_bsApplication_FK");

                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_bsInnerProcess_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdRoundsman_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdOffice_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdExportFile_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerHeader_prSubCurrAcc_FK");

            });

            // Configure relationships for trInnerLine
            modelBuilder.Entity<trInnerLine>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_cdCostCenter_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_trInnerHeader_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_cdCurrency_FK");

                entity.HasOne(d => d.trInnerOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_trInnerOrderLine_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_cdBatch_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_cdGLType_FK");

                entity.HasOne(d => d.cdScrapReason)
                    .WithMany()
                    .HasForeignKey(d => d.ScrapReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_cdScrapReason_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_prItemVariant_FK");

                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLine_trSupportRequestHeader_FK");

            });

            // Configure relationships for trInnerLineBOM
            modelBuilder.Entity<trInnerLineBOM>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineBOM_trInnerLine_FK");

            });

            // Configure relationships for trInnerLineCostCenterRates
            modelBuilder.Entity<trInnerLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineCostCenterRates_trInnerLine_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineCostCenterRates_prCostCenterHierarchy_FK");

            });

            // Configure relationships for trInnerLineGiftCard
            modelBuilder.Entity<trInnerLineGiftCard>(entity =>
            {
                entity.HasOne(d => d.cdGiftCard)
                    .WithMany()
                    .HasForeignKey(d => d.SerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineGiftCard_cdGiftCard_FK");

                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineGiftCard_trInnerLine_FK");

            });

            // Configure relationships for trInnerLineInventoryTransfer
            modelBuilder.Entity<trInnerLineInventoryTransfer>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_trInnerLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineInventoryTransfer_prItemVariant_FK");

            });

            // Configure relationships for trInnerLineSum
            modelBuilder.Entity<trInnerLineSum>(entity =>
            {
                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSum_trInnerHeader_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSum_cdLot_FK");

            });

            // Configure relationships for trInnerLineSumDetail
            modelBuilder.Entity<trInnerLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSumDetail_trInnerHeader_FK");

                entity.HasOne(d => d.trInnerLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSumDetail_trInnerLineSum_FK");

                entity.HasOne(d => d.trInnerLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSumDetail_trInnerLineSum_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trInnerOrderHeader
            modelBuilder.Entity<trInnerOrderHeader>(entity =>
            {
                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_bsInnerProcess_FK");

                entity.HasOne(d => d.bsInnerOrderType)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_bsInnerOrderType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdRoundsman_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdOffice_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdCompany_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdExportFile_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_bsApplication_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trInnerOrderLine
            modelBuilder.Entity<trInnerOrderLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_cdCurrency_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.trInnerOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_trInnerOrderHeader_FK");

                entity.HasOne(d => d.cdOrderCancelReason)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLine_cdOrderCancelReason_FK");

            });

            // Configure relationships for trInnerOrderLineSum
            modelBuilder.Entity<trInnerOrderLineSum>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSum_cdLot_FK");

                entity.HasOne(d => d.trInnerOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSum_trInnerOrderHeader_FK");

            });

            // Configure relationships for trInnerOrderLineSumDetail
            modelBuilder.Entity<trInnerOrderLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.trInnerOrderLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSumDetail_trInnerOrderLineSum_FK");

                entity.HasOne(d => d.trInnerOrderLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSumDetail_trInnerOrderLineSum_FK");

                entity.HasOne(d => d.trInnerOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerOrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSumDetail_trInnerOrderHeader_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInnerOrderLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trInvoiceHeader
            modelBuilder.Entity<trInvoiceHeader>(entity =>
            {
                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsProcess_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsTransType_FK");

                entity.HasOne(d => d.cdExpenseType)
                    .WithMany()
                    .HasForeignKey(d => d.ExpenseTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdExpenseType_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdDOV_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCompany_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdImportFile_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.GuarantorContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.GuarantorContactID2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdRoundsman_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdOffice_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdGLType_FK");

                entity.HasOne(d => d.cdDiscountReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdDiscountReason_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.bsEInvoiceStatus)
                    .WithMany()
                    .HasForeignKey(d => d.EInvoiceStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsEInvoiceStatus_FK");

                entity.HasOne(d => d.cdPaymentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdPaymentMethod_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdWarehouse_FK");

                entity.HasOne(d => d.bsDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.DocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsDocumentType_FK");

                entity.HasOne(d => d.cdCompanyCreditCard)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCreditCardCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCompanyCreditCard_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.bsInvoiceType)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsInvoiceType_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsApplication_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdExportFile_FK");

                entity.HasOne(d => d.cdDigitalMarketingService)
                    .WithMany()
                    .HasForeignKey(d => d.DigitalMarketingServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdDigitalMarketingService_FK");

                entity.HasOne(d => d.bsTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.TaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsTaxType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceHeader_bsTaxExemption_FK");

            });

            // Configure relationships for trInvoiceLine
            modelBuilder.Entity<trInvoiceLine>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdExportFile_FK");

                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.trPickingLine)
                    .WithMany()
                    .HasForeignKey(d => d.PickingLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trPickingLine_FK");

                entity.HasOne(d => d.cdReturnReason)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdReturnReason_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdCurrency_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trInvoiceHeader_FK");

                entity.HasOne(d => d.trInvoiceLineLinkedProduct)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineLinkedProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trInvoiceLineLinkedProduct_FK");

                entity.HasOne(d => d.cdPurchasePlan)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasePlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdPurchasePlan_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdBatch_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdGLType_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdImportFile_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trOrderLine_FK");

                entity.HasOne(d => d.trOrderAsnLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trOrderAsnLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.trDispOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trDispOrderLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_prItemVariant_FK");

                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trSupportRequestHeader_FK");

                entity.HasOne(d => d.trPriceListLine)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trPriceListLine_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdDOV_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdSalesperson_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.PCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdPCT_FK");

                entity.HasOne(d => d.trReserveLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trReserveLine_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.VatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdVat_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_cdPaymentPlan_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLine_trShipmentLine_FK");

            });

            // Configure relationships for trInvoiceLineBOM
            modelBuilder.Entity<trInvoiceLineBOM>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineBOM_trInvoiceLine_FK");

            });

            // Configure relationships for trInvoiceLineCostCenterRates
            modelBuilder.Entity<trInvoiceLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineCostCenterRates_trInvoiceLine_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineCostCenterRates_prCostCenterHierarchy_FK");

            });

            // Configure relationships for trInvoiceLineCurrency
            modelBuilder.Entity<trInvoiceLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineCurrency_trInvoiceLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trInvoiceLineGiftCard
            modelBuilder.Entity<trInvoiceLineGiftCard>(entity =>
            {
                entity.HasOne(d => d.cdGiftCard)
                    .WithMany()
                    .HasForeignKey(d => d.SerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineGiftCard_cdGiftCard_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineGiftCard_trInvoiceLine_FK");

            });

            // Configure relationships for trInvoiceLineLinkedProduct
            modelBuilder.Entity<trInvoiceLineLinkedProduct>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineLinkedProduct_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineLinkedProduct_cdItem_FK");

            });

            // Configure relationships for trInvoiceLineReportedSales
            modelBuilder.Entity<trInvoiceLineReportedSales>(entity =>
            {
                entity.HasOne(d => d.trReportedSaleLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReportedSaleLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineReportedSales_trReportedSaleLine_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineReportedSales_trInvoiceLine_FK");

            });

            // Configure relationships for trInvoiceLineSubsequentDeliveryOrders
            modelBuilder.Entity<trInvoiceLineSubsequentDeliveryOrders>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSubsequentDeliveryOrders_trInvoiceLine_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSubsequentDeliveryOrders_trOrderLine_FK");

            });

            // Configure relationships for trInvoiceLineSum
            modelBuilder.Entity<trInvoiceLineSum>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSum_trInvoiceHeader_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSum_cdLot_FK");

            });

            // Configure relationships for trInvoiceLineSumDetail
            modelBuilder.Entity<trInvoiceLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSumDetail_trInvoiceHeader_FK");

                entity.HasOne(d => d.trInvoiceLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSumDetail_trInvoiceLineSum_FK");

                entity.HasOne(d => d.trInvoiceLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSumDetail_trInvoiceLineSum_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trInvoiceLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trItemTestHeader
            modelBuilder.Entity<trItemTestHeader>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdCompany_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdOffice_FK");

                entity.HasOne(d => d.cdTestType)
                    .WithMany()
                    .HasForeignKey(d => d.TestTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdTestType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trItemTestLine
            modelBuilder.Entity<trItemTestLine>(entity =>
            {
                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_trInnerLine_FK");

                entity.HasOne(d => d.cdItemTestType)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTestTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_cdItemTestType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_cdImportFile_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_prItemVariant_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_cdCurrency_FK");

                entity.HasOne(d => d.trItemTestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trItemTestLine_trItemTestHeader_FK");

            });

            // Configure relationships for trJournalHeader
            modelBuilder.Entity<trJournalHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_bsApplication_FK");

                entity.HasOne(d => d.cdJournalTypeSub)
                    .WithMany()
                    .HasForeignKey(d => d.JournalTypeSubCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdJournalTypeSub_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CashGLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_cdOffice_FK");

                entity.HasOne(d => d.bsJournalType)
                    .WithMany()
                    .HasForeignKey(d => d.JournalTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalHeader_bsJournalType_FK");

            });

            // Configure relationships for trJournalInflationAdjustmentHeader
            modelBuilder.Entity<trJournalInflationAdjustmentHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentHeader_cdOffice_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentHeader_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentHeader_cdGLAcc_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentHeader_trJournalHeader_FK");

            });

            // Configure relationships for trJournalInflationAdjustmentLine
            modelBuilder.Entity<trJournalInflationAdjustmentLine>(entity =>
            {
                entity.HasOne(d => d.trJournalInflationAdjustmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalInflationAdjustmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentLine_trJournalInflationAdjustmentHeader_FK");

                entity.HasOne(d => d.trJournalLine)
                    .WithMany()
                    .HasForeignKey(d => d.JournalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalInflationAdjustmentLine_trJournalLine_FK");

            });

            // Configure relationships for trJournalLedgerEntryNumber
            modelBuilder.Entity<trJournalLedgerEntryNumber>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLedgerEntryNumber_cdCompany_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLedgerEntryNumber_cdCurrency_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLedgerEntryNumber_trJournalHeader_FK");

            });

            // Configure relationships for trJournalLine
            modelBuilder.Entity<trJournalLine>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdCurrency_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdExportFile_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdTaxOffice_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.GLAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdGLAcc_FK");

                entity.HasOne(d => d.cdGLAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdGLAcc_FK");

                entity.HasOne(d => d.bsDocumentType)
                    .WithMany()
                    .HasForeignKey(d => d.DocumentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_bsDocumentType_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdImportFile_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_cdGLType_FK");

                entity.HasOne(d => d.trJournalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.JournalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_trJournalHeader_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLine_bsTaxExemption_FK");

            });

            // Configure relationships for trJournalLineCostCenterRates
            modelBuilder.Entity<trJournalLineCostCenterRates>(entity =>
            {
                entity.HasOne(d => d.trJournalLine)
                    .WithMany()
                    .HasForeignKey(d => d.JournalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLineCostCenterRates_trJournalLine_FK");

                entity.HasOne(d => d.prCostCenterHierarchy)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterHierarchyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLineCostCenterRates_prCostCenterHierarchy_FK");

            });

            // Configure relationships for trJournalLineCurrency
            modelBuilder.Entity<trJournalLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trJournalLine)
                    .WithMany()
                    .HasForeignKey(d => d.JournalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trJournalLineCurrency_trJournalLine_FK");

            });

            // Configure relationships for trMessageBox
            modelBuilder.Entity<trMessageBox>(entity =>
            {
                entity.HasOne(d => d.bsMessageImportance)
                    .WithMany()
                    .HasForeignKey(d => d.MessageImportanceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trMessageBox_bsMessageImportance_FK");

                entity.HasOne(d => d.cdMessageType)
                    .WithMany()
                    .HasForeignKey(d => d.MessageTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trMessageBox_cdMessageType_FK");

            });

            // Configure relationships for trOrderAdvancePayments
            modelBuilder.Entity<trOrderAdvancePayments>(entity =>
            {
                entity.HasOne(d => d.trChequeLine)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trChequeLine_FK");

                entity.HasOne(d => d.trGiftCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trGiftCardPaymentLine_FK");

                entity.HasOne(d => d.trCashLine)
                    .WithMany()
                    .HasForeignKey(d => d.CashLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trCashLine_FK");

                entity.HasOne(d => d.trOtherPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trOtherPaymentLine_FK");

                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trBankLine_FK");

                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trCreditCardPaymentLine_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_bsApplication_FK");

                entity.HasOne(d => d.trOrderPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.OrderPaymentPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAdvancePayments_trOrderPaymentPlan_FK");

            });

            // Configure relationships for trOrderAsnHeader
            modelBuilder.Entity<trOrderAsnHeader>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_bsApplication_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.DischargePortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdPort_FK");

                entity.HasOne(d => d.cdPort)
                    .WithMany()
                    .HasForeignKey(d => d.LadingPortCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdPort_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_bsIncoterm_FK");

                entity.HasOne(d => d.cdContainerType)
                    .WithMany()
                    .HasForeignKey(d => d.ContainerTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdContainerType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCompany_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_bsProcess_FK");

                entity.HasOne(d => d.cdCountry)
                    .WithMany()
                    .HasForeignKey(d => d.DepartureCountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCountry_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_bsTransType_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trOrderAsnLine
            modelBuilder.Entity<trOrderAsnLine>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_prItemVariant_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_trOrderLine_FK");

                entity.HasOne(d => d.trOrderAsnHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLine_trOrderAsnHeader_FK");

            });

            // Configure relationships for trOrderAsnLineSum
            modelBuilder.Entity<trOrderAsnLineSum>(entity =>
            {
                entity.HasOne(d => d.trOrderAsnHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSum_trOrderAsnHeader_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSum_cdLot_FK");

            });

            // Configure relationships for trOrderAsnLineSumDetail
            modelBuilder.Entity<trOrderAsnLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.trOrderAsnHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSumDetail_trOrderAsnHeader_FK");

                entity.HasOne(d => d.trOrderAsnLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSumDetail_trOrderAsnLineSum_FK");

                entity.HasOne(d => d.trOrderAsnLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSumDetail_trOrderAsnLineSum_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAsnLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trOrderAuditorSurvey
            modelBuilder.Entity<trOrderAuditorSurvey>(entity =>
            {
                entity.HasOne(d => d.trSurveyAnswerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyAnswerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAuditorSurvey_trSurveyAnswerHeader_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderAuditorSurvey_trOrderHeader_FK");

            });

            // Configure relationships for trOrderHeader
            modelBuilder.Entity<trOrderHeader>(entity =>
            {
                entity.HasOne(d => d.cdDiscountReason)
                    .WithMany()
                    .HasForeignKey(d => d.DiscountReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdDiscountReason_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdGLType_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdRoundsman_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdOffice_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdImportFile_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.GuarantorContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.GuarantorContactID2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCompany_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdDOV_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsProcess_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.bsOrderType)
                    .WithMany()
                    .HasForeignKey(d => d.OrderTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsOrderType_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdPaymentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdPaymentMethod_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsApplication_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdExportFile_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.TaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsTaxType_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_bsTaxExemption_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderHeader_prSubCurrAcc_FK");

            });

            // Configure relationships for trOrderLine
            modelBuilder.Entity<trOrderLine>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdCurrency_FK");

                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.trOrderLineLinkedProduct)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineLinkedProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_trOrderLineLinkedProduct_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_prItemVariant_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdSalesperson_FK");

                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_trSupportRequestHeader_FK");

                entity.HasOne(d => d.trPriceListLine)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_trPriceListLine_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdDOV_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdPurchasePlan)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasePlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdPurchasePlan_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_trOrderHeader_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.VatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdVat_FK");

                entity.HasOne(d => d.cdOrderCancelReason)
                    .WithMany()
                    .HasForeignKey(d => d.OrderCancelReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdOrderCancelReason_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.PCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdPCT_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLine_cdPaymentPlan_FK");

            });

            // Configure relationships for trOrderLineBOM
            modelBuilder.Entity<trOrderLineBOM>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineBOM_trOrderLine_FK");

            });

            // Configure relationships for trOrderLineCurrency
            modelBuilder.Entity<trOrderLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineCurrency_trOrderLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trOrderLineLinkedProduct
            modelBuilder.Entity<trOrderLineLinkedProduct>(entity =>
            {
                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineLinkedProduct_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.LinkedProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineLinkedProduct_cdItem_FK");

            });

            // Configure relationships for trOrderLineSum
            modelBuilder.Entity<trOrderLineSum>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSum_cdLot_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSum_trOrderHeader_FK");

            });

            // Configure relationships for trOrderLineSumDetail
            modelBuilder.Entity<trOrderLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSumDetail_trOrderHeader_FK");

                entity.HasOne(d => d.trOrderLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSumDetail_trOrderLineSum_FK");

                entity.HasOne(d => d.trOrderLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSumDetail_trOrderLineSum_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trOrderOpticalProduct
            modelBuilder.Entity<trOrderOpticalProduct>(entity =>
            {
                entity.HasOne(d => d.cdInsuranceAgency)
                    .WithMany()
                    .HasForeignKey(d => d.InsuranceAgencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProduct_cdInsuranceAgency_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProduct_trOrderHeader_FK");

                entity.HasOne(d => d.cdDiagnostic)
                    .WithMany()
                    .HasForeignKey(d => d.DiagnosticCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProduct_cdDiagnostic_FK");

            });

            // Configure relationships for trOrderOpticalProductLine
            modelBuilder.Entity<trOrderOpticalProductLine>(entity =>
            {
                entity.HasOne(d => d.trOrderOpticalProduct)
                    .WithMany()
                    .HasForeignKey(d => d.OrderOpticalProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProductLine_trOrderOpticalProduct_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProductLine_trOrderLine_FK");

                entity.HasOne(d => d.cdOpticalSut)
                    .WithMany()
                    .HasForeignKey(d => d.OpticalSutCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderOpticalProductLine_cdOpticalSut_FK");

            });

            // Configure relationships for trOrderPaymentPlan
            modelBuilder.Entity<trOrderPaymentPlan>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderPaymentPlan_cdCurrency_FK");

                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderPaymentPlan_trOrderHeader_FK");

            });

            // Configure relationships for trOrderSurvey
            modelBuilder.Entity<trOrderSurvey>(entity =>
            {
                entity.HasOne(d => d.trOrderHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OrderHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderSurvey_trOrderHeader_FK");

                entity.HasOne(d => d.trSurveyAnswerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyAnswerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOrderSurvey_trSurveyAnswerHeader_FK");

            });

            // Configure relationships for trOtherPaymentHeader
            modelBuilder.Entity<trOtherPaymentHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdOffice_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdGLType_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCompany_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsOtherPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_bsOtherPaymentType_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_bsApplication_FK");

                entity.HasOne(d => d.cdPaymentProvider)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentProviderCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdPaymentProvider_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trOtherPaymentLine
            modelBuilder.Entity<trOtherPaymentLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentLine_cdCurrency_FK");

                entity.HasOne(d => d.trOtherPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentLine_trOtherPaymentHeader_FK");

            });

            // Configure relationships for trOtherPaymentLineCurrency
            modelBuilder.Entity<trOtherPaymentLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trOtherPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentLineCurrency_trOtherPaymentLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trOtherPaymentLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trPaymentHeader
            modelBuilder.Entity<trPaymentHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_bsApplication_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdGLType_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCompany_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trPaymentLine
            modelBuilder.Entity<trPaymentLine>(entity =>
            {
                entity.HasOne(d => d.trOtherPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.OtherPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trOtherPaymentLine_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.DebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trDebitLine_FK");

                entity.HasOne(d => d.trDebitLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReverseDebitLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trDebitLine_FK");

                entity.HasOne(d => d.trBankLine)
                    .WithMany()
                    .HasForeignKey(d => d.BankLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trBankLine_FK");

                entity.HasOne(d => d.trEmployeeDebit)
                    .WithMany()
                    .HasForeignKey(d => d.EmployeeDebitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trEmployeeDebit_FK");

                entity.HasOne(d => d.trChequeLine)
                    .WithMany()
                    .HasForeignKey(d => d.ChequeLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trChequeLine_FK");

                entity.HasOne(d => d.trCashLine)
                    .WithMany()
                    .HasForeignKey(d => d.CashLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trCashLine_FK");

                entity.HasOne(d => d.trGiftCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.GiftCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trGiftCardPaymentLine_FK");

                entity.HasOne(d => d.trCreditCardPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardPaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trCreditCardPaymentLine_FK");

                entity.HasOne(d => d.bsPaymentType)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_bsPaymentType_FK");

                entity.HasOne(d => d.trPaymentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trPaymentHeader_FK");

                entity.HasOne(d => d.trOrderPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.OrderPaymentPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLine_trOrderPaymentPlan_FK");

            });

            // Configure relationships for trPaymentLineCurrency
            modelBuilder.Entity<trPaymentLineCurrency>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.trPaymentLine)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPaymentLineCurrency_trPaymentLine_FK");

            });

            // Configure relationships for trPayrollHeader
            modelBuilder.Entity<trPayrollHeader>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_bsApplication_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWorkPlace)
                    .WithMany()
                    .HasForeignKey(d => d.WorkPlaceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdWorkPlace_FK");

                entity.HasOne(d => d.cdWagePlanType)
                    .WithMany()
                    .HasForeignKey(d => d.WagePlanTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdWagePlanType_FK");

                entity.HasOne(d => d.cdPayrollType)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollHeader_cdPayrollType_FK");

            });

            // Configure relationships for trPayrollLine
            modelBuilder.Entity<trPayrollLine>(entity =>
            {
                entity.HasOne(d => d.trPayrollHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLine_trPayrollHeader_FK");

                entity.HasOne(d => d.cdMissingWorkReason)
                    .WithMany()
                    .HasForeignKey(d => d.MissingWorkReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLine_cdMissingWorkReason_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.JobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLine_cdJobDepartment_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLine_cdCurrAcc_FK");

            });

            // Configure relationships for trPayrollLineDeduction
            modelBuilder.Entity<trPayrollLineDeduction>(entity =>
            {
                entity.HasOne(d => d.trPayrollLine)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineDeduction_trPayrollLine_FK");

                entity.HasOne(d => d.cdDeduction)
                    .WithMany()
                    .HasForeignKey(d => d.DeductionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineDeduction_cdDeduction_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DeductionCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineDeduction_cdCurrency_FK");

            });

            // Configure relationships for trPayrollLineGarnishment
            modelBuilder.Entity<trPayrollLineGarnishment>(entity =>
            {
                entity.HasOne(d => d.hrWageGarnishment)
                    .WithMany()
                    .HasForeignKey(d => d.WageGarnishmentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineGarnishment_hrWageGarnishment_FK");

                entity.HasOne(d => d.trPayrollLine)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineGarnishment_trPayrollLine_FK");

            });

            // Configure relationships for trPayrollLineTally
            modelBuilder.Entity<trPayrollLineTally>(entity =>
            {
                entity.HasOne(d => d.trPayrollLine)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineTally_trPayrollLine_FK");

                entity.HasOne(d => d.cdEarnings)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineTally_cdEarnings_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollLineTally_cdCurrency_FK");

            });

            // Configure relationships for trPayrollTerminationSeveranceDetail
            modelBuilder.Entity<trPayrollTerminationSeveranceDetail>(entity =>
            {
                entity.HasOne(d => d.cdEarnings)
                    .WithMany()
                    .HasForeignKey(d => d.EarningsCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollTerminationSeveranceDetail_cdEarnings_FK");

                entity.HasOne(d => d.trPayrollLine)
                    .WithMany()
                    .HasForeignKey(d => d.PayrollLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPayrollTerminationSeveranceDetail_trPayrollLine_FK");

            });

            // Configure relationships for trPickingHeader
            modelBuilder.Entity<trPickingHeader>(entity =>
            {
                entity.HasOne(d => d.bsPickingType)
                    .WithMany()
                    .HasForeignKey(d => d.PickingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_bsPickingType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdOffice_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_bsProcess_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_bsApplication_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.WeightUnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdPackageBrand)
                    .WithMany()
                    .HasForeignKey(d => d.PackageBrandCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdPackageBrand_FK");

                entity.HasOne(d => d.bsPackagingType)
                    .WithMany()
                    .HasForeignKey(d => d.PackagingTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_bsPackagingType_FK");

                entity.HasOne(d => d.cdPackageVolume)
                    .WithMany()
                    .HasForeignKey(d => d.PackageVolumeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdPackageVolume_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingHeader_prSubCurrAcc_FK");

            });

            // Configure relationships for trPickingLine
            modelBuilder.Entity<trPickingLine>(entity =>
            {
                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingLine_trOrderLine_FK");

                entity.HasOne(d => d.trDispOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingLine_trDispOrderLine_FK");

                entity.HasOne(d => d.trPickingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PickingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingLine_trPickingHeader_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingLine_cdBatch_FK");

                entity.HasOne(d => d.trReserveLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPickingLine_trReserveLine_FK");

            });

            // Configure relationships for trPriceListHeader
            modelBuilder.Entity<trPriceListHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdPriceGroup)
                    .WithMany()
                    .HasForeignKey(d => d.PriceGroupCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListHeader_cdPriceGroup_FK");

                entity.HasOne(d => d.cdPriceListType)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListHeader_cdPriceListType_FK");

            });

            // Configure relationships for trPriceListLine
            modelBuilder.Entity<trPriceListLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdCurrency_FK");

                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdItemDim3_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdItem_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdItemDim2_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdItemDim1_FK");

                entity.HasOne(d => d.trPriceListHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_trPriceListHeader_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdColor_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPriceListLine_cdPaymentPlan_FK");

            });

            // Configure relationships for trProposalHeader
            modelBuilder.Entity<trProposalHeader>(entity =>
            {
                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdImportFile_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdOffice_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdGLType_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsIncoterm_FK");

                entity.HasOne(d => d.bsIncoterm)
                    .WithMany()
                    .HasForeignKey(d => d.IncotermCode1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsIncoterm_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCompany_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsProcess_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsTransType_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdDOV_FK");

                entity.HasOne(d => d.cdPaymentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdPaymentMethod_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdWarehouse_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdTaxOffice)
                    .WithMany()
                    .HasForeignKey(d => d.TaxOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdTaxOffice_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdExportFile_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrency_FK");

                entity.HasOne(d => d.bsTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.TaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsTaxType_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.bsTaxExemption)
                    .WithMany()
                    .HasForeignKey(d => d.TaxExemptionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_bsTaxExemption_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trProposalLine
            modelBuilder.Entity<trProposalLine>(entity =>
            {
                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdCurrency_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdExportFile_FK");

                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_trProposalHeader_FK");

                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.cdDOV)
                    .WithMany()
                    .HasForeignKey(d => d.DOVCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdDOV_FK");

                entity.HasOne(d => d.trPriceListLine)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_trPriceListLine_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdSalesperson_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_prItemVariant_FK");

                entity.HasOne(d => d.bsWithHoldingTaxType)
                    .WithMany()
                    .HasForeignKey(d => d.WithHoldingTaxTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_bsWithHoldingTaxType_FK");

                entity.HasOne(d => d.cdPurchasePlan)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasePlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdPurchasePlan_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdGLType_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdImportFile_FK");

                entity.HasOne(d => d.cdPCT)
                    .WithMany()
                    .HasForeignKey(d => d.PCTCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdPCT_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.VatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdVat_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLine_cdPaymentPlan_FK");

            });

            // Configure relationships for trProposalLineCurrency
            modelBuilder.Entity<trProposalLineCurrency>(entity =>
            {
                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineCurrency_trProposalLine_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineCurrency_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.RelationCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineCurrency_cdCurrency_FK");

            });

            // Configure relationships for trProposalLineSum
            modelBuilder.Entity<trProposalLineSum>(entity =>
            {
                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSum_trProposalHeader_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSum_cdLot_FK");

            });

            // Configure relationships for trProposalLineSumDetail
            modelBuilder.Entity<trProposalLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.trProposalHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSumDetail_trProposalHeader_FK");

                entity.HasOne(d => d.trProposalLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSumDetail_trProposalLineSum_FK");

                entity.HasOne(d => d.trProposalLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSumDetail_trProposalLineSum_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trProposalLineSumDetail_cdColor_FK");

            });

            // Configure relationships for trPurchaseRequisitionConfirmationEMailNotification
            modelBuilder.Entity<trPurchaseRequisitionConfirmationEMailNotification>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionConfirmationEMailNotification_trPurchaseRequisitionLine_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionConfirmationEMailNotification_prRequisitionConfirmationRuleStep_FK");

                entity.HasOne(d => d.prRequisitionConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionConfirmationEMailNotification_prRequisitionConfirmationRuleStep_FK");

            });

            // Configure relationships for trPurchaseRequisitionHeader
            modelBuilder.Entity<trPurchaseRequisitionHeader>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_bsApplication_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdContractStatus)
                    .WithMany()
                    .HasForeignKey(d => d.ContractStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdContractStatus_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdOffice_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryStoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RequesterEmployeeTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.RequesterEmployeeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryStoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdJobDepartment)
                    .WithMany()
                    .HasForeignKey(d => d.RequesterJobDepartmentCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionHeader_cdJobDepartment_FK");

            });

            // Configure relationships for trPurchaseRequisitionLine
            modelBuilder.Entity<trPurchaseRequisitionLine>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryOfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdOffice_FK");

                entity.HasOne(d => d.trPurchaseRequisitionHeader)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_trPurchaseRequisitionHeader_FK");

                entity.HasOne(d => d.prRequisitionLimit)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionLimitID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_prRequisitionLimit_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdWarehouse_FK");

                entity.HasOne(d => d.cdRequisition)
                    .WithMany()
                    .HasForeignKey(d => d.RequisitionCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdRequisition_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.CurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdCostCenter_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryStoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryStoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionLine_cdCurrAcc_FK");

            });

            // Configure relationships for trPurchaseRequisitionProposalConfirmationEMailNotification
            modelBuilder.Entity<trPurchaseRequisitionProposalConfirmationEMailNotification>(entity =>
            {
                entity.HasOne(d => d.trPurchaseRequisitionLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionProposalConfirmationEMailNotification_trPurchaseRequisitionLine_FK");

            });

            // Configure relationships for trPurchaseRequisitionProposalConfirmationEMailNotificationDetail
            modelBuilder.Entity<trPurchaseRequisitionProposalConfirmationEMailNotificationDetail>(entity =>
            {
                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.SortOrder)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionProposalConfirmationEMailNotificationDetail_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.prProposalConfirmationRuleStep)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalConfirmationRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionProposalConfirmationEMailNotificationDetail_prProposalConfirmationRuleStep_FK");

                entity.HasOne(d => d.trProposalLine)
                    .WithMany()
                    .HasForeignKey(d => d.ProposalLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionProposalConfirmationEMailNotificationDetail_trProposalLine_FK");

                entity.HasOne(d => d.tpPurchaseRequisitionProposal)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseRequisitionProposalID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trPurchaseRequisitionProposalConfirmationEMailNotificationDetail_tpPurchaseRequisitionProposal_FK");

            });

            // Configure relationships for trReportedSaleHeader
            modelBuilder.Entity<trReportedSaleHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleHeader_cdCompany_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleHeader_bsTransType_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleHeader_bsProcess_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleHeader_cdWarehouse_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleHeader_bsApplication_FK");

            });

            // Configure relationships for trReportedSaleLine
            modelBuilder.Entity<trReportedSaleLine>(entity =>
            {
                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_prItemVariant_FK");

                entity.HasOne(d => d.trReportedSaleHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ReportedSaleHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_trReportedSaleHeader_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReportedSaleLine_cdBatch_FK");

            });

            // Configure relationships for trReserveHeader
            modelBuilder.Entity<trReserveHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdCompany_FK");

                entity.HasOne(d => d.bsReserveType)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_bsReserveType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdOffice_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_bsProcess_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_bsApplication_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveHeader_prSubCurrAcc_FK");

            });

            // Configure relationships for trReserveLine
            modelBuilder.Entity<trReserveLine>(entity =>
            {
                entity.HasOne(d => d.trReserveHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveLine_trReserveHeader_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveLine_trOrderLine_FK");

            });

            // Configure relationships for trReserveTransfer
            modelBuilder.Entity<trReserveTransfer>(entity =>
            {
                entity.HasOne(d => d.trReserveHeader)
                    .WithMany()
                    .HasForeignKey(d => d.BaseReserveHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_trReserveHeader_FK");

                entity.HasOne(d => d.trReserveHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnReserveHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_trReserveHeader_FK");

                entity.HasOne(d => d.trReserveHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_trReserveHeader_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.FromWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_cdWarehouse_FK");

                entity.HasOne(d => d.trInnerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InnerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trReserveTransfer_trInnerHeader_FK");

            });

            // Configure relationships for trSalesPlan
            modelBuilder.Entity<trSalesPlan>(entity =>
            {
                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlan_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlan_cdCompany_FK");

                entity.HasOne(d => d.cdSalesPlanType)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlan_cdSalesPlanType_FK");

            });

            // Configure relationships for trSalesPlanChannel
            modelBuilder.Entity<trSalesPlanChannel>(entity =>
            {
                entity.HasOne(d => d.trSalesPlan)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanChannel_trSalesPlan_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanChannel_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanChannel_cdCurrAcc_FK");

            });

            // Configure relationships for trSalesPlanProduct
            modelBuilder.Entity<trSalesPlanProduct>(entity =>
            {
                entity.HasOne(d => d.trSalesPlan)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProduct_trSalesPlan_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProduct_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProduct_cdItem_FK");

            });

            // Configure relationships for trSalesPlanProductQty
            modelBuilder.Entity<trSalesPlanProductQty>(entity =>
            {
                entity.HasOne(d => d.trSalesPlanChannel)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanChannelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProductQty_trSalesPlanChannel_FK");

                entity.HasOne(d => d.trSalesPlanProduct)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProductQty_trSalesPlanProduct_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProductQty_cdLot_FK");

                entity.HasOne(d => d.trSalesPlan)
                    .WithMany()
                    .HasForeignKey(d => d.SalesPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProductQty_trSalesPlan_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSalesPlanProductQty_cdColor_FK");

            });

            // Configure relationships for trShipmentHeader
            modelBuilder.Entity<trShipmentHeader>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdImportFile_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdOffice_FK");

                entity.HasOne(d => d.cdRoundsman)
                    .WithMany()
                    .HasForeignKey(d => d.RoundsmanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdRoundsman_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_bsProcess_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_bsTransType_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdCompany_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.ToWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdWarehouse_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdExportFile_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentHeader_prSubCurrAcc_FK");

            });

            // Configure relationships for trShipmentLine
            modelBuilder.Entity<trShipmentLine>(entity =>
            {
                entity.HasOne(d => d.cdExportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ExportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdExportFile_FK");

                entity.HasOne(d => d.cdReturnReason)
                    .WithMany()
                    .HasForeignKey(d => d.ReturnReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdReturnReason_FK");

                entity.HasOne(d => d.trPickingLine)
                    .WithMany()
                    .HasForeignKey(d => d.PickingLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trPickingLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.trOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trOrderLine_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_prItemVariant_FK");

                entity.HasOne(d => d.trOrderAsnLine)
                    .WithMany()
                    .HasForeignKey(d => d.OrderAsnLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trOrderAsnLine_FK");

                entity.HasOne(d => d.trDispOrderLine)
                    .WithMany()
                    .HasForeignKey(d => d.DispOrderLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trDispOrderLine_FK");

                entity.HasOne(d => d.trPriceListLine)
                    .WithMany()
                    .HasForeignKey(d => d.PriceListLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trPriceListLine_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdSalesperson_FK");

                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trSupportRequestHeader_FK");

                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trShipmentHeader_FK");

                entity.HasOne(d => d.cdImportFile)
                    .WithMany()
                    .HasForeignKey(d => d.ImportFileNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdImportFile_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdBatch_FK");

                entity.HasOne(d => d.cdPurchasePlan)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasePlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdPurchasePlan_FK");

                entity.HasOne(d => d.trReserveLine)
                    .WithMany()
                    .HasForeignKey(d => d.ReserveLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_trReserveLine_FK");

                entity.HasOne(d => d.cdPaymentPlan)
                    .WithMany()
                    .HasForeignKey(d => d.PaymentPlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLine_cdPaymentPlan_FK");

            });

            // Configure relationships for trShipmentLineBOM
            modelBuilder.Entity<trShipmentLineBOM>(entity =>
            {
                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineBOM_trShipmentLine_FK");

            });

            // Configure relationships for trShipmentLineGiftCard
            modelBuilder.Entity<trShipmentLineGiftCard>(entity =>
            {
                entity.HasOne(d => d.cdGiftCard)
                    .WithMany()
                    .HasForeignKey(d => d.SerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineGiftCard_cdGiftCard_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineGiftCard_trShipmentLine_FK");

            });

            // Configure relationships for trShipmentLineSum
            modelBuilder.Entity<trShipmentLineSum>(entity =>
            {
                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSum_cdLot_FK");

                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSum_trShipmentHeader_FK");

            });

            // Configure relationships for trShipmentLineSumDetail
            modelBuilder.Entity<trShipmentLineSumDetail>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSumDetail_trShipmentHeader_FK");

                entity.HasOne(d => d.cdLot)
                    .WithMany()
                    .HasForeignKey(d => d.LotCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSumDetail_cdLot_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSumDetail_cdColor_FK");

                entity.HasOne(d => d.trShipmentLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSumDetail_trShipmentLineSum_FK");

                entity.HasOne(d => d.trShipmentLineSum)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineSumID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trShipmentLineSumDetail_trShipmentLineSum_FK");

            });

            // Configure relationships for trSMSPoolHeader
            modelBuilder.Entity<trSMSPoolHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolHeader_cdCompany_FK");

                entity.HasOne(d => d.cdMessageReason)
                    .WithMany()
                    .HasForeignKey(d => d.MessageReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolHeader_cdMessageReason_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trSMSPoolLine
            modelBuilder.Entity<trSMSPoolLine>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_prCurrAccContact_FK");

                entity.HasOne(d => d.bsSMSStatus)
                    .WithMany()
                    .HasForeignKey(d => d.SMSStatusCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_bsSMSStatus_FK");

                entity.HasOne(d => d.trSMSPoolMessage)
                    .WithMany()
                    .HasForeignKey(d => d.SMSPoolMessageID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_trSMSPoolMessage_FK");

                entity.HasOne(d => d.trSMSPoolHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SMSPoolHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_trSMSPoolHeader_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolLine_prSubCurrAcc_FK");

            });

            // Configure relationships for trSMSPoolMessage
            modelBuilder.Entity<trSMSPoolMessage>(entity =>
            {
                entity.HasOne(d => d.trSMSPoolHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SMSPoolHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSMSPoolMessage_trSMSPoolHeader_FK");

            });

            // Configure relationships for trStock
            modelBuilder.Entity<trStock>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrency_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_bsApplication_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdWarehouse_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.FromWarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdWarehouse_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdOffice_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdBatch_FK");

                entity.HasOne(d => d.bsInnerProcess)
                    .WithMany()
                    .HasForeignKey(d => d.InnerProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_bsInnerProcess_FK");

                entity.HasOne(d => d.bsProcess)
                    .WithMany()
                    .HasForeignKey(d => d.ProcessCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_bsProcess_FK");

                entity.HasOne(d => d.bsTransType)
                    .WithMany()
                    .HasForeignKey(d => d.TransTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_bsTransType_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prItemVariant_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCompany_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_prSubCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.FromStoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.FromStoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trStock_cdCurrAcc_FK");

            });

            // Configure relationships for trSupportRequestHeader
            modelBuilder.Entity<trSupportRequestHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCompany_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prItemVariant_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdSalesperson)
                    .WithMany()
                    .HasForeignKey(d => d.SalespersonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdSalesperson_FK");

                entity.HasOne(d => d.cdShipmentMethod)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentMethodCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdShipmentMethod_FK");

                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdOffice_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.ShippingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.prCurrAccPostalAddress)
                    .WithMany()
                    .HasForeignKey(d => d.BillingPostalAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prCurrAccPostalAddress_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdWarehouse_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.LocalCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_prSubCurrAcc_FK");

                entity.HasOne(d => d.bsSupportType)
                    .WithMany()
                    .HasForeignKey(d => d.SupportTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestHeader_bsSupportType_FK");

            });

            // Configure relationships for trSupportRequestLine
            modelBuilder.Entity<trSupportRequestLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.PriceCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdCurrency_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdItem_FK");

                entity.HasOne(d => d.cdBatch)
                    .WithMany()
                    .HasForeignKey(d => d.BatchCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdBatch_FK");

                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_trSupportRequestHeader_FK");

                entity.HasOne(d => d.cdVat)
                    .WithMany()
                    .HasForeignKey(d => d.VatCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestLine_cdVat_FK");

            });

            // Configure relationships for trSupportRequestSurvey
            modelBuilder.Entity<trSupportRequestSurvey>(entity =>
            {
                entity.HasOne(d => d.trSupportRequestHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SupportRequestHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestSurvey_trSupportRequestHeader_FK");

                entity.HasOne(d => d.trSurveyAnswerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyAnswerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSupportRequestSurvey_trSurveyAnswerHeader_FK");

            });

            // Configure relationships for trSurveyAnswerHeader
            modelBuilder.Entity<trSurveyAnswerHeader>(entity =>
            {
                entity.HasOne(d => d.prCurrAccContact)
                    .WithMany()
                    .HasForeignKey(d => d.ContactID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerHeader_prCurrAccContact_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trSurveyAnswerLine
            modelBuilder.Entity<trSurveyAnswerLine>(entity =>
            {
                entity.HasOne(d => d.trSurveyAnswerHeader)
                    .WithMany()
                    .HasForeignKey(d => d.SurveyAnswerHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerLine_trSurveyAnswerHeader_FK");

                entity.HasOne(d => d.cdSurveyQuestionOption)
                    .WithMany()
                    .HasForeignKey(d => d.QuestionOptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trSurveyAnswerLine_cdSurveyQuestionOption_FK");

            });

            // Configure relationships for trTaxIncurredHeader
            modelBuilder.Entity<trTaxIncurredHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdCompany_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdItem_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trTaxIncurredLine
            modelBuilder.Entity<trTaxIncurredLine>(entity =>
            {
                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.PurchaseInvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredLine_trInvoiceLine_FK");

                entity.HasOne(d => d.trInvoiceLine)
                    .WithMany()
                    .HasForeignKey(d => d.SalesInvoiceLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredLine_trInvoiceLine_FK");

                entity.HasOne(d => d.trTaxIncurredHeader)
                    .WithMany()
                    .HasForeignKey(d => d.TaxIncurredHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredLine_trTaxIncurredHeader_FK");

                entity.HasOne(d => d.trInnerLine)
                    .WithMany()
                    .HasForeignKey(d => d.InnerLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTaxIncurredLine_trInnerLine_FK");

            });

            // Configure relationships for trTFRSInvoiceAdjustment
            modelBuilder.Entity<trTFRSInvoiceAdjustment>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTFRSInvoiceAdjustment_trInvoiceHeader_FK");

            });

            // Configure relationships for trTransferPlan
            modelBuilder.Entity<trTransferPlan>(entity =>
            {
                entity.HasOne(d => d.bsTransferPlanRule)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanRuleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlan_bsTransferPlanRule_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlan_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlan_cdCompany_FK");

            });

            // Configure relationships for trTransferPlanChannel
            modelBuilder.Entity<trTransferPlanChannel>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanChannel_trTransferPlan_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanChannel_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanChannel_cdCurrAcc_FK");

            });

            // Configure relationships for trTransferPlanParameterValue
            modelBuilder.Entity<trTransferPlanParameterValue>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanParameterValue_trTransferPlan_FK");

            });

            // Configure relationships for trTransferPlanProduct
            modelBuilder.Entity<trTransferPlanProduct>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_trTransferPlan_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ProductCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_prItemVariant_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProduct_cdColor_FK");

            });

            // Configure relationships for trTransferPlanProductQty
            modelBuilder.Entity<trTransferPlanProductQty>(entity =>
            {
                entity.HasOne(d => d.trTransferPlan)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProductQty_trTransferPlan_FK");

                entity.HasOne(d => d.trTransferPlanProduct)
                    .WithMany()
                    .HasForeignKey(d => d.TransferPlanProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trTransferPlanProductQty_trTransferPlanProduct_FK");

            });

            // Configure relationships for trVehicleLoadingHeader
            modelBuilder.Entity<trVehicleLoadingHeader>(entity =>
            {
                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdVehicle_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryCompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdDeliveryCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdDeliveryCompany_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trVehicleLoadingLine
            modelBuilder.Entity<trVehicleLoadingLine>(entity =>
            {
                entity.HasOne(d => d.trShipmentHeader)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingLine_trShipmentHeader_FK");

                entity.HasOne(d => d.trVehicleLoadingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleLoadingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleLoadingLine_trVehicleLoadingHeader_FK");

            });

            // Configure relationships for trVehicleUnLoadingHeader
            modelBuilder.Entity<trVehicleUnLoadingHeader>(entity =>
            {
                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_bsApplication_FK");

                entity.HasOne(d => d.cdVehicle)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdVehicle_FK");

                entity.HasOne(d => d.cdWarehouse)
                    .WithMany()
                    .HasForeignKey(d => d.WarehouseCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdWarehouse_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trVehicleUnLoadingLine
            modelBuilder.Entity<trVehicleUnLoadingLine>(entity =>
            {
                entity.HasOne(d => d.trVehicleUnLoadingHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VehicleUnLoadingHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_trVehicleUnLoadingHeader_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.prItemVariant)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_prItemVariant_FK");

                entity.HasOne(d => d.trShipmentLine)
                    .WithMany()
                    .HasForeignKey(d => d.ShipmentLineID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVehicleUnLoadingLine_trShipmentLine_FK");

            });

            // Configure relationships for trVendorPriceListHeader
            modelBuilder.Entity<trVendorPriceListHeader>(entity =>
            {
                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListHeader_cdCurrency_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.VendorTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trVendorPriceListLine
            modelBuilder.Entity<trVendorPriceListLine>(entity =>
            {
                entity.HasOne(d => d.cdCurrency)
                    .WithMany()
                    .HasForeignKey(d => d.DocCurrencyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdCurrency_FK");

                entity.HasOne(d => d.cdItemDim3)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim3Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdItemDim3_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdItem_FK");

                entity.HasOne(d => d.cdItem)
                    .WithMany()
                    .HasForeignKey(d => d.ItemCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdItem_FK");

                entity.HasOne(d => d.cdUnitOfMeasure)
                    .WithMany()
                    .HasForeignKey(d => d.UnitOfMeasureCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdUnitOfMeasure_FK");

                entity.HasOne(d => d.trVendorPriceListHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VendorPriceListHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_trVendorPriceListHeader_FK");

                entity.HasOne(d => d.cdItemDim1)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim1Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdItemDim1_FK");

                entity.HasOne(d => d.cdPurchasePlan)
                    .WithMany()
                    .HasForeignKey(d => d.PurchasePlanCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdPurchasePlan_FK");

                entity.HasOne(d => d.cdItemDim2)
                    .WithMany()
                    .HasForeignKey(d => d.ItemDim2Code)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdItemDim2_FK");

                entity.HasOne(d => d.cdColor)
                    .WithMany()
                    .HasForeignKey(d => d.ColorCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVendorPriceListLine_cdColor_FK");

            });

            // Configure relationships for trVirementHeader
            modelBuilder.Entity<trVirementHeader>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_cdGLType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_cdCompany_FK");

                entity.HasOne(d => d.bsApplication)
                    .WithMany()
                    .HasForeignKey(d => d.ApplicationCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_bsApplication_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.StoreCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementHeader_cdCurrAcc_FK");

            });

            // Configure relationships for trVirementLine
            modelBuilder.Entity<trVirementLine>(entity =>
            {
                entity.HasOne(d => d.trVirementHeader)
                    .WithMany()
                    .HasForeignKey(d => d.VirementHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementLine_trVirementHeader_FK");

                entity.HasOne(d => d.cdDebitReason)
                    .WithMany()
                    .HasForeignKey(d => d.DebitReasonCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementLine_cdDebitReason_FK");

                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementLine_cdGLType_FK");

                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.CreditDebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementLine_trDebitHeader_FK");

                entity.HasOne(d => d.trDebitHeader)
                    .WithMany()
                    .HasForeignKey(d => d.DebitDebitHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("trVirementLine_trDebitHeader_FK");

            });

            // Configure relationships for zpJoyRefundTransaction
            modelBuilder.Entity<zpJoyRefundTransaction>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpJoyRefundTransaction_trInvoiceHeader_FK");

            });

            // Configure relationships for zpOnlineBankCreditCardPaymentTransaction
            modelBuilder.Entity<zpOnlineBankCreditCardPaymentTransaction>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdGLType_FK");

                entity.HasOne(d => d.cdCreditCardType)
                    .WithMany()
                    .HasForeignKey(d => d.CreditCardTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdCreditCardType_FK");

                entity.HasOne(d => d.cdOffice)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdOffice_FK");

                entity.HasOne(d => d.cdCompany)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdCompany_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdCurrAcc_FK");

                entity.HasOne(d => d.cdCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.CurrAccTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_cdCurrAcc_FK");

                entity.HasOne(d => d.prSubCurrAcc)
                    .WithMany()
                    .HasForeignKey(d => d.SubCurrAccID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankCreditCardPaymentTransaction_prSubCurrAcc_FK");

            });

            // Configure relationships for zpOnlineBankTransaction
            modelBuilder.Entity<zpOnlineBankTransaction>(entity =>
            {
                entity.HasOne(d => d.cdGLType)
                    .WithMany()
                    .HasForeignKey(d => d.GLTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankTransaction_cdGLType_FK");

                entity.HasOne(d => d.cdBankOpType)
                    .WithMany()
                    .HasForeignKey(d => d.BankOpTypeCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankTransaction_cdBankOpType_FK");

                entity.HasOne(d => d.cdCostCenter)
                    .WithMany()
                    .HasForeignKey(d => d.CostCenterCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpOnlineBankTransaction_cdCostCenter_FK");

            });

            // Configure relationships for zpTaxFreeZoneTransaction
            modelBuilder.Entity<zpTaxFreeZoneTransaction>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpTaxFreeZoneTransaction_trInvoiceHeader_FK");

            });

            // Configure relationships for zpWeArePlanetTaxFreeTransaction
            modelBuilder.Entity<zpWeArePlanetTaxFreeTransaction>(entity =>
            {
                entity.HasOne(d => d.trInvoiceHeader)
                    .WithMany()
                    .HasForeignKey(d => d.InvoiceHeaderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("zpWeArePlanetTaxFreeTransaction_trInvoiceHeader_FK");

            });
          
        }
    }
} 